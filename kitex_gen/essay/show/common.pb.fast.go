// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package show

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SignUpReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignUpReq[number], err)
}

func (x *SignUpReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.VerifyCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignUpResp[number], err)
}

func (x *SignUpResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccessExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SignUpResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignInReq[number], err)
}

func (x *SignInReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.VerifyCode = &tmp
	return offset, err
}

func (x *SignInReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Password = &tmp
	return offset, err
}

func (x *SignInResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignInResp[number], err)
}

func (x *SignInResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccessExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SignInResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetUserInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserInfoResp[number], err)
}

func (x *GetUserInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v GetUserInfoResp_Payload
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Payload = &v
	return offset, nil
}

func (x *UpdateUserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateUserInfoReq[number], err)
}

func (x *UpdateUserInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EssayEvaluateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EssayEvaluateReq[number], err)
}

func (x *EssayEvaluateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EssayEvaluateReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EssayEvaluateReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Grade, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *EssayEvaluateReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Ocr = append(x.Ocr, v)
	return offset, err
}

func (x *EssayEvaluateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EssayEvaluateResp[number], err)
}

func (x *EssayEvaluateResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *EssayEvaluateResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EssayEvaluateResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Response, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetEssayEvaluateLogsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetEssayEvaluateLogsReq[number], err)
}

func (x *GetEssayEvaluateLogsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetEssayEvaluateLogsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetEssayEvaluateLogsResp[number], err)
}

func (x *GetEssayEvaluateLogsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetEssayEvaluateLogsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Log
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Logs = append(x.Logs, &v)
	return offset, nil
}

func (x *Log) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Log[number], err)
}

func (x *Log) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Log) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Grade, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Log) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Ocr = append(x.Ocr, v)
	return offset, err
}

func (x *Log) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Response, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Log) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ApplySignedUrlReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ApplySignedUrlReq[number], err)
}

func (x *ApplySignedUrlReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Prefix = &tmp
	return offset, err
}

func (x *ApplySignedUrlReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Suffix = &tmp
	return offset, err
}

func (x *ApplySignedUrlResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ApplySignedUrlResp[number], err)
}

func (x *ApplySignedUrlResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ApplySignedUrlResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SessionToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OCRReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OCRReq[number], err)
}

func (x *OCRReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Ocr = append(x.Ocr, v)
	return offset, err
}

func (x *OCRResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OCRResp[number], err)
}

func (x *OCRResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OCRResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Response) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Response[number], err)
}

func (x *Response) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Response) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendVerifyCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendVerifyCodeReq[number], err)
}

func (x *SendVerifyCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendVerifyCodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendVerifyCodeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp_Payload) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserInfoResp_Payload[number], err)
}

func (x *GetUserInfoResp_Payload) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp_Payload) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp_Payload) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SignUpReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthId())
	return offset
}

func (x *SignUpReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthType())
	return offset
}

func (x *SignUpReq) fastWriteField3(buf []byte) (offset int) {
	if x.VerifyCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetVerifyCode())
	return offset
}

func (x *SignUpReq) fastWriteField4(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPassword())
	return offset
}

func (x *SignUpReq) fastWriteField5(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetName())
	return offset
}

func (x *SignUpResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SignUpResp) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *SignUpResp) fastWriteField2(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAccessToken())
	return offset
}

func (x *SignUpResp) fastWriteField3(buf []byte) (offset int) {
	if x.AccessExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetAccessExpire())
	return offset
}

func (x *SignUpResp) fastWriteField4(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetName())
	return offset
}

func (x *SignInReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SignInReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthId())
	return offset
}

func (x *SignInReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthType())
	return offset
}

func (x *SignInReq) fastWriteField3(buf []byte) (offset int) {
	if x.VerifyCode == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetVerifyCode())
	return offset
}

func (x *SignInReq) fastWriteField4(buf []byte) (offset int) {
	if x.Password == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPassword())
	return offset
}

func (x *SignInResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SignInResp) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *SignInResp) fastWriteField2(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAccessToken())
	return offset
}

func (x *SignInResp) fastWriteField3(buf []byte) (offset int) {
	if x.AccessExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetAccessExpire())
	return offset
}

func (x *SignInResp) fastWriteField4(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetName())
	return offset
}

func (x *GetUserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetUserInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetUserInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetUserInfoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetUserInfoResp) fastWriteField3(buf []byte) (offset int) {
	if x.Payload == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetPayload())
	return offset
}

func (x *UpdateUserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *EssayEvaluateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *EssayEvaluateReq) fastWriteField1(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTitle())
	return offset
}

func (x *EssayEvaluateReq) fastWriteField2(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetText())
	return offset
}

func (x *EssayEvaluateReq) fastWriteField3(buf []byte) (offset int) {
	if x.Grade == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetGrade())
	return offset
}

func (x *EssayEvaluateReq) fastWriteField4(buf []byte) (offset int) {
	if len(x.Ocr) == 0 {
		return offset
	}
	for i := range x.GetOcr() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetOcr()[i])
	}
	return offset
}

func (x *EssayEvaluateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *EssayEvaluateResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *EssayEvaluateResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *EssayEvaluateResp) fastWriteField3(buf []byte) (offset int) {
	if x.Response == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetResponse())
	return offset
}

func (x *GetEssayEvaluateLogsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetEssayEvaluateLogsReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *GetEssayEvaluateLogsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetEssayEvaluateLogsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *GetEssayEvaluateLogsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Logs == nil {
		return offset
	}
	for i := range x.GetLogs() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetLogs()[i])
	}
	return offset
}

func (x *Log) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Log) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Log) fastWriteField2(buf []byte) (offset int) {
	if x.Grade == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetGrade())
	return offset
}

func (x *Log) fastWriteField3(buf []byte) (offset int) {
	if len(x.Ocr) == 0 {
		return offset
	}
	for i := range x.GetOcr() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetOcr()[i])
	}
	return offset
}

func (x *Log) fastWriteField4(buf []byte) (offset int) {
	if x.Response == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetResponse())
	return offset
}

func (x *Log) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *ApplySignedUrlReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ApplySignedUrlReq) fastWriteField1(buf []byte) (offset int) {
	if x.Prefix == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPrefix())
	return offset
}

func (x *ApplySignedUrlReq) fastWriteField2(buf []byte) (offset int) {
	if x.Suffix == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSuffix())
	return offset
}

func (x *ApplySignedUrlResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ApplySignedUrlResp) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *ApplySignedUrlResp) fastWriteField2(buf []byte) (offset int) {
	if x.SessionToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSessionToken())
	return offset
}

func (x *OCRReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *OCRReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.Ocr) == 0 {
		return offset
	}
	for i := range x.GetOcr() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetOcr()[i])
	}
	return offset
}

func (x *OCRResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *OCRResp) fastWriteField1(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTitle())
	return offset
}

func (x *OCRResp) fastWriteField2(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetText())
	return offset
}

func (x *Response) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Response) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *Response) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *SendVerifyCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SendVerifyCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthType())
	return offset
}

func (x *SendVerifyCodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthId())
	return offset
}

func (x *SendVerifyCodeReq) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetType())
	return offset
}

func (x *GetUserInfoResp_Payload) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetUserInfoResp_Payload) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *GetUserInfoResp_Payload) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCount())
	return offset
}

func (x *GetUserInfoResp_Payload) fastWriteField3(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPhone())
	return offset
}

func (x *SignUpReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SignUpReq) sizeField1() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthId())
	return n
}

func (x *SignUpReq) sizeField2() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthType())
	return n
}

func (x *SignUpReq) sizeField3() (n int) {
	if x.VerifyCode == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetVerifyCode())
	return n
}

func (x *SignUpReq) sizeField4() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPassword())
	return n
}

func (x *SignUpReq) sizeField5() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetName())
	return n
}

func (x *SignUpResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SignUpResp) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *SignUpResp) sizeField2() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAccessToken())
	return n
}

func (x *SignUpResp) sizeField3() (n int) {
	if x.AccessExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetAccessExpire())
	return n
}

func (x *SignUpResp) sizeField4() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetName())
	return n
}

func (x *SignInReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SignInReq) sizeField1() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthId())
	return n
}

func (x *SignInReq) sizeField2() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthType())
	return n
}

func (x *SignInReq) sizeField3() (n int) {
	if x.VerifyCode == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetVerifyCode())
	return n
}

func (x *SignInReq) sizeField4() (n int) {
	if x.Password == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetPassword())
	return n
}

func (x *SignInResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SignInResp) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *SignInResp) sizeField2() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAccessToken())
	return n
}

func (x *SignInResp) sizeField3() (n int) {
	if x.AccessExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetAccessExpire())
	return n
}

func (x *SignInResp) sizeField4() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetName())
	return n
}

func (x *GetUserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetUserInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetUserInfoResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *GetUserInfoResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetUserInfoResp) sizeField3() (n int) {
	if x.Payload == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetPayload())
	return n
}

func (x *UpdateUserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateUserInfoReq) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *EssayEvaluateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *EssayEvaluateReq) sizeField1() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTitle())
	return n
}

func (x *EssayEvaluateReq) sizeField2() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetText())
	return n
}

func (x *EssayEvaluateReq) sizeField3() (n int) {
	if x.Grade == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetGrade())
	return n
}

func (x *EssayEvaluateReq) sizeField4() (n int) {
	if len(x.Ocr) == 0 {
		return n
	}
	for i := range x.GetOcr() {
		n += fastpb.SizeString(4, x.GetOcr()[i])
	}
	return n
}

func (x *EssayEvaluateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *EssayEvaluateResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *EssayEvaluateResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *EssayEvaluateResp) sizeField3() (n int) {
	if x.Response == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetResponse())
	return n
}

func (x *GetEssayEvaluateLogsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetEssayEvaluateLogsReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *GetEssayEvaluateLogsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetEssayEvaluateLogsResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *GetEssayEvaluateLogsResp) sizeField2() (n int) {
	if x.Logs == nil {
		return n
	}
	for i := range x.GetLogs() {
		n += fastpb.SizeMessage(2, x.GetLogs()[i])
	}
	return n
}

func (x *Log) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Log) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Log) sizeField2() (n int) {
	if x.Grade == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetGrade())
	return n
}

func (x *Log) sizeField3() (n int) {
	if len(x.Ocr) == 0 {
		return n
	}
	for i := range x.GetOcr() {
		n += fastpb.SizeString(3, x.GetOcr()[i])
	}
	return n
}

func (x *Log) sizeField4() (n int) {
	if x.Response == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetResponse())
	return n
}

func (x *Log) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *ApplySignedUrlReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ApplySignedUrlReq) sizeField1() (n int) {
	if x.Prefix == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetPrefix())
	return n
}

func (x *ApplySignedUrlReq) sizeField2() (n int) {
	if x.Suffix == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetSuffix())
	return n
}

func (x *ApplySignedUrlResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ApplySignedUrlResp) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *ApplySignedUrlResp) sizeField2() (n int) {
	if x.SessionToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSessionToken())
	return n
}

func (x *OCRReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *OCRReq) sizeField1() (n int) {
	if len(x.Ocr) == 0 {
		return n
	}
	for i := range x.GetOcr() {
		n += fastpb.SizeString(1, x.GetOcr()[i])
	}
	return n
}

func (x *OCRResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *OCRResp) sizeField1() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTitle())
	return n
}

func (x *OCRResp) sizeField2() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetText())
	return n
}

func (x *Response) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Response) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *Response) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *SendVerifyCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SendVerifyCodeReq) sizeField1() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthType())
	return n
}

func (x *SendVerifyCodeReq) sizeField2() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthId())
	return n
}

func (x *SendVerifyCodeReq) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetType())
	return n
}

func (x *GetUserInfoResp_Payload) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetUserInfoResp_Payload) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *GetUserInfoResp_Payload) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCount())
	return n
}

func (x *GetUserInfoResp_Payload) sizeField3() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPhone())
	return n
}

var fieldIDToName_SignUpReq = map[int32]string{
	1: "AuthId",
	2: "AuthType",
	3: "VerifyCode",
	4: "Password",
	5: "Name",
}

var fieldIDToName_SignUpResp = map[int32]string{
	1: "Id",
	2: "AccessToken",
	3: "AccessExpire",
	4: "Name",
}

var fieldIDToName_SignInReq = map[int32]string{
	1: "AuthId",
	2: "AuthType",
	3: "VerifyCode",
	4: "Password",
}

var fieldIDToName_SignInResp = map[int32]string{
	1: "Id",
	2: "AccessToken",
	3: "AccessExpire",
	4: "Name",
}

var fieldIDToName_GetUserInfoReq = map[int32]string{}

var fieldIDToName_GetUserInfoResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Payload",
}

var fieldIDToName_UpdateUserInfoReq = map[int32]string{
	1: "Username",
}

var fieldIDToName_EssayEvaluateReq = map[int32]string{
	1: "Title",
	2: "Text",
	3: "Grade",
	4: "Ocr",
}

var fieldIDToName_EssayEvaluateResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Response",
}

var fieldIDToName_GetEssayEvaluateLogsReq = map[int32]string{
	1: "PaginationOptions",
}

var fieldIDToName_GetEssayEvaluateLogsResp = map[int32]string{
	1: "Total",
	2: "Logs",
}

var fieldIDToName_Log = map[int32]string{
	1: "Id",
	2: "Grade",
	3: "Ocr",
	4: "Response",
	5: "CreateTime",
}

var fieldIDToName_ApplySignedUrlReq = map[int32]string{
	1: "Prefix",
	2: "Suffix",
}

var fieldIDToName_ApplySignedUrlResp = map[int32]string{
	1: "Url",
	2: "SessionToken",
}

var fieldIDToName_OCRReq = map[int32]string{
	1: "Ocr",
}

var fieldIDToName_OCRResp = map[int32]string{
	1: "Title",
	2: "Text",
}

var fieldIDToName_Response = map[int32]string{
	1: "Code",
	2: "Msg",
}

var fieldIDToName_SendVerifyCodeReq = map[int32]string{
	1: "AuthType",
	2: "AuthId",
	3: "Type",
}

var fieldIDToName_GetUserInfoResp_Payload = map[int32]string{
	1: "Name",
	2: "Count",
	3: "Phone",
}

var _ = basic.File_basic_pagination_proto
