// Code generated by Kitex v0.11.3. DO NOT EDIT.

package show

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	show "github.com/xh-polaris/service-idl-gen-go/kitex_gen/essay/show"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SignUp": kitex.NewMethodInfo(
		signUpHandler,
		newSignUpArgs,
		newSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SignIn": kitex.NewMethodInfo(
		signInHandler,
		newSignInArgs,
		newSignInResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newGetUserInfoArgs,
		newGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdatePassword": kitex.NewMethodInfo(
		updatePasswordHandler,
		newUpdatePasswordArgs,
		newUpdatePasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateUserInfo": kitex.NewMethodInfo(
		updateUserInfoHandler,
		newUpdateUserInfoArgs,
		newUpdateUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"EssayEvaluate": kitex.NewMethodInfo(
		essayEvaluateHandler,
		newEssayEvaluateArgs,
		newEssayEvaluateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetEvaluateLogs": kitex.NewMethodInfo(
		getEvaluateLogsHandler,
		newGetEvaluateLogsArgs,
		newGetEvaluateLogsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"OCR": kitex.NewMethodInfo(
		oCRHandler,
		newOCRArgs,
		newOCRResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ApplySignedUrl": kitex.NewMethodInfo(
		applySignedUrlHandler,
		newApplySignedUrlArgs,
		newApplySignedUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SendVerifyCode": kitex.NewMethodInfo(
		sendVerifyCodeHandler,
		newSendVerifyCodeArgs,
		newSendVerifyCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	showServiceInfo                = NewServiceInfo()
	showServiceInfoForClient       = NewServiceInfoForClient()
	showServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return showServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return showServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return showServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "show"
	handlerType := (*show.Show)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "essay.show",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func signUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.SignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).SignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SignUpArgs:
		success, err := handler.(show.Show).SignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSignUpArgs() interface{} {
	return &SignUpArgs{}
}

func newSignUpResult() interface{} {
	return &SignUpResult{}
}

type SignUpArgs struct {
	Req *show.SignUpReq
}

func (p *SignUpArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.SignUpReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SignUpArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SignUpArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SignUpArgs) Unmarshal(in []byte) error {
	msg := new(show.SignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SignUpArgs_Req_DEFAULT *show.SignUpReq

func (p *SignUpArgs) GetReq() *show.SignUpReq {
	if !p.IsSetReq() {
		return SignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SignUpResult struct {
	Success *show.SignUpResp
}

var SignUpResult_Success_DEFAULT *show.SignUpResp

func (p *SignUpResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.SignUpResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SignUpResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SignUpResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SignUpResult) Unmarshal(in []byte) error {
	msg := new(show.SignUpResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SignUpResult) GetSuccess() *show.SignUpResp {
	if !p.IsSetSuccess() {
		return SignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.SignUpResp)
}

func (p *SignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SignUpResult) GetResult() interface{} {
	return p.Success
}

func signInHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.SignInReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).SignIn(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SignInArgs:
		success, err := handler.(show.Show).SignIn(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SignInResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSignInArgs() interface{} {
	return &SignInArgs{}
}

func newSignInResult() interface{} {
	return &SignInResult{}
}

type SignInArgs struct {
	Req *show.SignInReq
}

func (p *SignInArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.SignInReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SignInArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SignInArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SignInArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SignInArgs) Unmarshal(in []byte) error {
	msg := new(show.SignInReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SignInArgs_Req_DEFAULT *show.SignInReq

func (p *SignInArgs) GetReq() *show.SignInReq {
	if !p.IsSetReq() {
		return SignInArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SignInArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SignInArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SignInResult struct {
	Success *show.SignInResp
}

var SignInResult_Success_DEFAULT *show.SignInResp

func (p *SignInResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.SignInResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SignInResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SignInResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SignInResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SignInResult) Unmarshal(in []byte) error {
	msg := new(show.SignInResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SignInResult) GetSuccess() *show.SignInResp {
	if !p.IsSetSuccess() {
		return SignInResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SignInResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.SignInResp)
}

func (p *SignInResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SignInResult) GetResult() interface{} {
	return p.Success
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.GetUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserInfoArgs:
		success, err := handler.(show.Show).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *show.GetUserInfoReq
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.GetUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(show.GetUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *show.GetUserInfoReq

func (p *GetUserInfoArgs) GetReq() *show.GetUserInfoReq {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoResult struct {
	Success *show.GetUserInfoResp
}

var GetUserInfoResult_Success_DEFAULT *show.GetUserInfoResp

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.GetUserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(show.GetUserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *show.GetUserInfoResp {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.GetUserInfoResp)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) GetResult() interface{} {
	return p.Success
}

func updatePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.UpdatePasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).UpdatePassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdatePasswordArgs:
		success, err := handler.(show.Show).UpdatePassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdatePasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdatePasswordArgs() interface{} {
	return &UpdatePasswordArgs{}
}

func newUpdatePasswordResult() interface{} {
	return &UpdatePasswordResult{}
}

type UpdatePasswordArgs struct {
	Req *show.UpdatePasswordReq
}

func (p *UpdatePasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.UpdatePasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdatePasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdatePasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdatePasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdatePasswordArgs) Unmarshal(in []byte) error {
	msg := new(show.UpdatePasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdatePasswordArgs_Req_DEFAULT *show.UpdatePasswordReq

func (p *UpdatePasswordArgs) GetReq() *show.UpdatePasswordReq {
	if !p.IsSetReq() {
		return UpdatePasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdatePasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdatePasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdatePasswordResult struct {
	Success *show.UpdatePasswordReq
}

var UpdatePasswordResult_Success_DEFAULT *show.UpdatePasswordReq

func (p *UpdatePasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.UpdatePasswordReq)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdatePasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdatePasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdatePasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdatePasswordResult) Unmarshal(in []byte) error {
	msg := new(show.UpdatePasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdatePasswordResult) GetSuccess() *show.UpdatePasswordReq {
	if !p.IsSetSuccess() {
		return UpdatePasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdatePasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.UpdatePasswordReq)
}

func (p *UpdatePasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdatePasswordResult) GetResult() interface{} {
	return p.Success
}

func updateUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.UpdateUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).UpdateUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateUserInfoArgs:
		success, err := handler.(show.Show).UpdateUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateUserInfoArgs() interface{} {
	return &UpdateUserInfoArgs{}
}

func newUpdateUserInfoResult() interface{} {
	return &UpdateUserInfoResult{}
}

type UpdateUserInfoArgs struct {
	Req *show.UpdateUserInfoReq
}

func (p *UpdateUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.UpdateUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(show.UpdateUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserInfoArgs_Req_DEFAULT *show.UpdateUserInfoReq

func (p *UpdateUserInfoArgs) GetReq() *show.UpdateUserInfoReq {
	if !p.IsSetReq() {
		return UpdateUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserInfoResult struct {
	Success *show.Response
}

var UpdateUserInfoResult_Success_DEFAULT *show.Response

func (p *UpdateUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserInfoResult) Unmarshal(in []byte) error {
	msg := new(show.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserInfoResult) GetSuccess() *show.Response {
	if !p.IsSetSuccess() {
		return UpdateUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.Response)
}

func (p *UpdateUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserInfoResult) GetResult() interface{} {
	return p.Success
}

func essayEvaluateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.EssayEvaluateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).EssayEvaluate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *EssayEvaluateArgs:
		success, err := handler.(show.Show).EssayEvaluate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*EssayEvaluateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newEssayEvaluateArgs() interface{} {
	return &EssayEvaluateArgs{}
}

func newEssayEvaluateResult() interface{} {
	return &EssayEvaluateResult{}
}

type EssayEvaluateArgs struct {
	Req *show.EssayEvaluateReq
}

func (p *EssayEvaluateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.EssayEvaluateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EssayEvaluateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EssayEvaluateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EssayEvaluateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EssayEvaluateArgs) Unmarshal(in []byte) error {
	msg := new(show.EssayEvaluateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EssayEvaluateArgs_Req_DEFAULT *show.EssayEvaluateReq

func (p *EssayEvaluateArgs) GetReq() *show.EssayEvaluateReq {
	if !p.IsSetReq() {
		return EssayEvaluateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EssayEvaluateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EssayEvaluateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EssayEvaluateResult struct {
	Success *show.EssayEvaluateResp
}

var EssayEvaluateResult_Success_DEFAULT *show.EssayEvaluateResp

func (p *EssayEvaluateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.EssayEvaluateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EssayEvaluateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EssayEvaluateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EssayEvaluateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EssayEvaluateResult) Unmarshal(in []byte) error {
	msg := new(show.EssayEvaluateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EssayEvaluateResult) GetSuccess() *show.EssayEvaluateResp {
	if !p.IsSetSuccess() {
		return EssayEvaluateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EssayEvaluateResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.EssayEvaluateResp)
}

func (p *EssayEvaluateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EssayEvaluateResult) GetResult() interface{} {
	return p.Success
}

func getEvaluateLogsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.GetEssayEvaluateLogsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).GetEvaluateLogs(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetEvaluateLogsArgs:
		success, err := handler.(show.Show).GetEvaluateLogs(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetEvaluateLogsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetEvaluateLogsArgs() interface{} {
	return &GetEvaluateLogsArgs{}
}

func newGetEvaluateLogsResult() interface{} {
	return &GetEvaluateLogsResult{}
}

type GetEvaluateLogsArgs struct {
	Req *show.GetEssayEvaluateLogsReq
}

func (p *GetEvaluateLogsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.GetEssayEvaluateLogsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetEvaluateLogsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetEvaluateLogsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetEvaluateLogsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetEvaluateLogsArgs) Unmarshal(in []byte) error {
	msg := new(show.GetEssayEvaluateLogsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetEvaluateLogsArgs_Req_DEFAULT *show.GetEssayEvaluateLogsReq

func (p *GetEvaluateLogsArgs) GetReq() *show.GetEssayEvaluateLogsReq {
	if !p.IsSetReq() {
		return GetEvaluateLogsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetEvaluateLogsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetEvaluateLogsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetEvaluateLogsResult struct {
	Success *show.GetEssayEvaluateLogsResp
}

var GetEvaluateLogsResult_Success_DEFAULT *show.GetEssayEvaluateLogsResp

func (p *GetEvaluateLogsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.GetEssayEvaluateLogsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetEvaluateLogsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetEvaluateLogsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetEvaluateLogsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetEvaluateLogsResult) Unmarshal(in []byte) error {
	msg := new(show.GetEssayEvaluateLogsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetEvaluateLogsResult) GetSuccess() *show.GetEssayEvaluateLogsResp {
	if !p.IsSetSuccess() {
		return GetEvaluateLogsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetEvaluateLogsResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.GetEssayEvaluateLogsResp)
}

func (p *GetEvaluateLogsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetEvaluateLogsResult) GetResult() interface{} {
	return p.Success
}

func oCRHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.OCRReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).OCR(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *OCRArgs:
		success, err := handler.(show.Show).OCR(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*OCRResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newOCRArgs() interface{} {
	return &OCRArgs{}
}

func newOCRResult() interface{} {
	return &OCRResult{}
}

type OCRArgs struct {
	Req *show.OCRReq
}

func (p *OCRArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.OCRReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *OCRArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *OCRArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *OCRArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *OCRArgs) Unmarshal(in []byte) error {
	msg := new(show.OCRReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var OCRArgs_Req_DEFAULT *show.OCRReq

func (p *OCRArgs) GetReq() *show.OCRReq {
	if !p.IsSetReq() {
		return OCRArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *OCRArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OCRArgs) GetFirstArgument() interface{} {
	return p.Req
}

type OCRResult struct {
	Success *show.OCRResp
}

var OCRResult_Success_DEFAULT *show.OCRResp

func (p *OCRResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.OCRResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *OCRResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *OCRResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *OCRResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *OCRResult) Unmarshal(in []byte) error {
	msg := new(show.OCRResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *OCRResult) GetSuccess() *show.OCRResp {
	if !p.IsSetSuccess() {
		return OCRResult_Success_DEFAULT
	}
	return p.Success
}

func (p *OCRResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.OCRResp)
}

func (p *OCRResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OCRResult) GetResult() interface{} {
	return p.Success
}

func applySignedUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.ApplySignedUrlReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).ApplySignedUrl(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ApplySignedUrlArgs:
		success, err := handler.(show.Show).ApplySignedUrl(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ApplySignedUrlResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newApplySignedUrlArgs() interface{} {
	return &ApplySignedUrlArgs{}
}

func newApplySignedUrlResult() interface{} {
	return &ApplySignedUrlResult{}
}

type ApplySignedUrlArgs struct {
	Req *show.ApplySignedUrlReq
}

func (p *ApplySignedUrlArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.ApplySignedUrlReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ApplySignedUrlArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ApplySignedUrlArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ApplySignedUrlArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ApplySignedUrlArgs) Unmarshal(in []byte) error {
	msg := new(show.ApplySignedUrlReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ApplySignedUrlArgs_Req_DEFAULT *show.ApplySignedUrlReq

func (p *ApplySignedUrlArgs) GetReq() *show.ApplySignedUrlReq {
	if !p.IsSetReq() {
		return ApplySignedUrlArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ApplySignedUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ApplySignedUrlArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ApplySignedUrlResult struct {
	Success *show.ApplySignedUrlResp
}

var ApplySignedUrlResult_Success_DEFAULT *show.ApplySignedUrlResp

func (p *ApplySignedUrlResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.ApplySignedUrlResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ApplySignedUrlResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ApplySignedUrlResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ApplySignedUrlResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ApplySignedUrlResult) Unmarshal(in []byte) error {
	msg := new(show.ApplySignedUrlResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ApplySignedUrlResult) GetSuccess() *show.ApplySignedUrlResp {
	if !p.IsSetSuccess() {
		return ApplySignedUrlResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ApplySignedUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.ApplySignedUrlResp)
}

func (p *ApplySignedUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApplySignedUrlResult) GetResult() interface{} {
	return p.Success
}

func sendVerifyCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.SendVerifyCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).SendVerifyCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendVerifyCodeArgs:
		success, err := handler.(show.Show).SendVerifyCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendVerifyCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendVerifyCodeArgs() interface{} {
	return &SendVerifyCodeArgs{}
}

func newSendVerifyCodeResult() interface{} {
	return &SendVerifyCodeResult{}
}

type SendVerifyCodeArgs struct {
	Req *show.SendVerifyCodeReq
}

func (p *SendVerifyCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.SendVerifyCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendVerifyCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendVerifyCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendVerifyCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendVerifyCodeArgs) Unmarshal(in []byte) error {
	msg := new(show.SendVerifyCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendVerifyCodeArgs_Req_DEFAULT *show.SendVerifyCodeReq

func (p *SendVerifyCodeArgs) GetReq() *show.SendVerifyCodeReq {
	if !p.IsSetReq() {
		return SendVerifyCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendVerifyCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendVerifyCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendVerifyCodeResult struct {
	Success *show.Response
}

var SendVerifyCodeResult_Success_DEFAULT *show.Response

func (p *SendVerifyCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendVerifyCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendVerifyCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendVerifyCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendVerifyCodeResult) Unmarshal(in []byte) error {
	msg := new(show.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendVerifyCodeResult) GetSuccess() *show.Response {
	if !p.IsSetSuccess() {
		return SendVerifyCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendVerifyCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.Response)
}

func (p *SendVerifyCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendVerifyCodeResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SignUp(ctx context.Context, Req *show.SignUpReq) (r *show.SignUpResp, err error) {
	var _args SignUpArgs
	_args.Req = Req
	var _result SignUpResult
	if err = p.c.Call(ctx, "SignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignIn(ctx context.Context, Req *show.SignInReq) (r *show.SignInResp, err error) {
	var _args SignInArgs
	_args.Req = Req
	var _result SignInResult
	if err = p.c.Call(ctx, "SignIn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *show.GetUserInfoReq) (r *show.GetUserInfoResp, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePassword(ctx context.Context, Req *show.UpdatePasswordReq) (r *show.UpdatePasswordReq, err error) {
	var _args UpdatePasswordArgs
	_args.Req = Req
	var _result UpdatePasswordResult
	if err = p.c.Call(ctx, "UpdatePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserInfo(ctx context.Context, Req *show.UpdateUserInfoReq) (r *show.Response, err error) {
	var _args UpdateUserInfoArgs
	_args.Req = Req
	var _result UpdateUserInfoResult
	if err = p.c.Call(ctx, "UpdateUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EssayEvaluate(ctx context.Context, Req *show.EssayEvaluateReq) (r *show.EssayEvaluateResp, err error) {
	var _args EssayEvaluateArgs
	_args.Req = Req
	var _result EssayEvaluateResult
	if err = p.c.Call(ctx, "EssayEvaluate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEvaluateLogs(ctx context.Context, Req *show.GetEssayEvaluateLogsReq) (r *show.GetEssayEvaluateLogsResp, err error) {
	var _args GetEvaluateLogsArgs
	_args.Req = Req
	var _result GetEvaluateLogsResult
	if err = p.c.Call(ctx, "GetEvaluateLogs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OCR(ctx context.Context, Req *show.OCRReq) (r *show.OCRResp, err error) {
	var _args OCRArgs
	_args.Req = Req
	var _result OCRResult
	if err = p.c.Call(ctx, "OCR", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApplySignedUrl(ctx context.Context, Req *show.ApplySignedUrlReq) (r *show.ApplySignedUrlResp, err error) {
	var _args ApplySignedUrlArgs
	_args.Req = Req
	var _result ApplySignedUrlResult
	if err = p.c.Call(ctx, "ApplySignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendVerifyCode(ctx context.Context, Req *show.SendVerifyCodeReq) (r *show.Response, err error) {
	var _args SendVerifyCodeArgs
	_args.Req = Req
	var _result SendVerifyCodeResult
	if err = p.c.Call(ctx, "SendVerifyCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
