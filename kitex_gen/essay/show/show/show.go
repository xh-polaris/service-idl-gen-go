// Code generated by Kitex v0.11.3. DO NOT EDIT.

package show

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	show "github.com/xh-polaris/service-idl-gen-go/kitex_gen/essay/show"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SignUp": kitex.NewMethodInfo(
		signUpHandler,
		newSignUpArgs,
		newSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"EssayEvaluate": kitex.NewMethodInfo(
		essayEvaluateHandler,
		newEssayEvaluateArgs,
		newEssayEvaluateResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetEvaluateLogs": kitex.NewMethodInfo(
		getEvaluateLogsHandler,
		newGetEvaluateLogsArgs,
		newGetEvaluateLogsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	showServiceInfo                = NewServiceInfo()
	showServiceInfoForClient       = NewServiceInfoForClient()
	showServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return showServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return showServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return showServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "show"
	handlerType := (*show.Show)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "essay.show",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func signUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.SignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).SignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SignUpArgs:
		success, err := handler.(show.Show).SignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSignUpArgs() interface{} {
	return &SignUpArgs{}
}

func newSignUpResult() interface{} {
	return &SignUpResult{}
}

type SignUpArgs struct {
	Req *show.SignUpReq
}

func (p *SignUpArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.SignUpReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SignUpArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SignUpArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SignUpArgs) Unmarshal(in []byte) error {
	msg := new(show.SignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SignUpArgs_Req_DEFAULT *show.SignUpReq

func (p *SignUpArgs) GetReq() *show.SignUpReq {
	if !p.IsSetReq() {
		return SignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SignUpResult struct {
	Success *show.SignUpResp
}

var SignUpResult_Success_DEFAULT *show.SignUpResp

func (p *SignUpResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.SignUpResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SignUpResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SignUpResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SignUpResult) Unmarshal(in []byte) error {
	msg := new(show.SignUpResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SignUpResult) GetSuccess() *show.SignUpResp {
	if !p.IsSetSuccess() {
		return SignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.SignUpResp)
}

func (p *SignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SignUpResult) GetResult() interface{} {
	return p.Success
}

func essayEvaluateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.EssayEvaluateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).EssayEvaluate(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *EssayEvaluateArgs:
		success, err := handler.(show.Show).EssayEvaluate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*EssayEvaluateResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newEssayEvaluateArgs() interface{} {
	return &EssayEvaluateArgs{}
}

func newEssayEvaluateResult() interface{} {
	return &EssayEvaluateResult{}
}

type EssayEvaluateArgs struct {
	Req *show.EssayEvaluateReq
}

func (p *EssayEvaluateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.EssayEvaluateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EssayEvaluateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EssayEvaluateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EssayEvaluateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EssayEvaluateArgs) Unmarshal(in []byte) error {
	msg := new(show.EssayEvaluateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EssayEvaluateArgs_Req_DEFAULT *show.EssayEvaluateReq

func (p *EssayEvaluateArgs) GetReq() *show.EssayEvaluateReq {
	if !p.IsSetReq() {
		return EssayEvaluateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EssayEvaluateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EssayEvaluateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EssayEvaluateResult struct {
	Success *show.EssayEvaluateResp
}

var EssayEvaluateResult_Success_DEFAULT *show.EssayEvaluateResp

func (p *EssayEvaluateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.EssayEvaluateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EssayEvaluateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EssayEvaluateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EssayEvaluateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EssayEvaluateResult) Unmarshal(in []byte) error {
	msg := new(show.EssayEvaluateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EssayEvaluateResult) GetSuccess() *show.EssayEvaluateResp {
	if !p.IsSetSuccess() {
		return EssayEvaluateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EssayEvaluateResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.EssayEvaluateResp)
}

func (p *EssayEvaluateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EssayEvaluateResult) GetResult() interface{} {
	return p.Success
}

func getEvaluateLogsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(show.GetEssayEvaluateLogsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(show.Show).GetEvaluateLogs(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetEvaluateLogsArgs:
		success, err := handler.(show.Show).GetEvaluateLogs(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetEvaluateLogsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetEvaluateLogsArgs() interface{} {
	return &GetEvaluateLogsArgs{}
}

func newGetEvaluateLogsResult() interface{} {
	return &GetEvaluateLogsResult{}
}

type GetEvaluateLogsArgs struct {
	Req *show.GetEssayEvaluateLogsReq
}

func (p *GetEvaluateLogsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(show.GetEssayEvaluateLogsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetEvaluateLogsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetEvaluateLogsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetEvaluateLogsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetEvaluateLogsArgs) Unmarshal(in []byte) error {
	msg := new(show.GetEssayEvaluateLogsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetEvaluateLogsArgs_Req_DEFAULT *show.GetEssayEvaluateLogsReq

func (p *GetEvaluateLogsArgs) GetReq() *show.GetEssayEvaluateLogsReq {
	if !p.IsSetReq() {
		return GetEvaluateLogsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetEvaluateLogsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetEvaluateLogsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetEvaluateLogsResult struct {
	Success *show.GetEssayEvaluateLogsResp
}

var GetEvaluateLogsResult_Success_DEFAULT *show.GetEssayEvaluateLogsResp

func (p *GetEvaluateLogsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(show.GetEssayEvaluateLogsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetEvaluateLogsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetEvaluateLogsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetEvaluateLogsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetEvaluateLogsResult) Unmarshal(in []byte) error {
	msg := new(show.GetEssayEvaluateLogsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetEvaluateLogsResult) GetSuccess() *show.GetEssayEvaluateLogsResp {
	if !p.IsSetSuccess() {
		return GetEvaluateLogsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetEvaluateLogsResult) SetSuccess(x interface{}) {
	p.Success = x.(*show.GetEssayEvaluateLogsResp)
}

func (p *GetEvaluateLogsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetEvaluateLogsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SignUp(ctx context.Context, Req *show.SignUpReq) (r *show.SignUpResp, err error) {
	var _args SignUpArgs
	_args.Req = Req
	var _result SignUpResult
	if err = p.c.Call(ctx, "SignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EssayEvaluate(ctx context.Context, Req *show.EssayEvaluateReq) (r *show.EssayEvaluateResp, err error) {
	var _args EssayEvaluateArgs
	_args.Req = Req
	var _result EssayEvaluateResult
	if err = p.c.Call(ctx, "EssayEvaluate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEvaluateLogs(ctx context.Context, Req *show.GetEssayEvaluateLogsReq) (r *show.GetEssayEvaluateLogsResp, err error) {
	var _args GetEvaluateLogsArgs
	_args.Req = Req
	var _result GetEvaluateLogsResult
	if err = p.c.Call(ctx, "GetEvaluateLogs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
