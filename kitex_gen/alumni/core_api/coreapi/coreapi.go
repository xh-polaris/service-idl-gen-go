// Code generated by Kitex v0.12.1. DO NOT EDIT.

package coreapi

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/service-idl-gen-go/kitex_gen/alumni/core_api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SignUp": kitex.NewMethodInfo(
		signUpHandler,
		newSignUpArgs,
		newSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SignIn": kitex.NewMethodInfo(
		signInHandler,
		newSignInArgs,
		newSignInResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateUserInfo": kitex.NewMethodInfo(
		updateUserInfoHandler,
		newUpdateUserInfoArgs,
		newUpdateUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateEducation": kitex.NewMethodInfo(
		updateEducationHandler,
		newUpdateEducationArgs,
		newUpdateEducationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateEmployment": kitex.NewMethodInfo(
		updateEmploymentHandler,
		newUpdateEmploymentArgs,
		newUpdateEmploymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newGetUserInfoArgs,
		newGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateActivity": kitex.NewMethodInfo(
		createActivityHandler,
		newCreateActivityArgs,
		newCreateActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateActivity": kitex.NewMethodInfo(
		updateActivityHandler,
		newUpdateActivityArgs,
		newUpdateActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetActivities": kitex.NewMethodInfo(
		getActivitiesHandler,
		newGetActivitiesArgs,
		newGetActivitiesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetActivity": kitex.NewMethodInfo(
		getActivityHandler,
		newGetActivityArgs,
		newGetActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RegisterActivity": kitex.NewMethodInfo(
		registerActivityHandler,
		newRegisterActivityArgs,
		newRegisterActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CheckIn": kitex.NewMethodInfo(
		checkInHandler,
		newCheckInArgs,
		newCheckInResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetRegisters": kitex.NewMethodInfo(
		getRegistersHandler,
		newGetRegistersArgs,
		newGetRegistersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ApplySignedUrl": kitex.NewMethodInfo(
		applySignedUrlHandler,
		newApplySignedUrlArgs,
		newApplySignedUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SendVerifyCode": kitex.NewMethodInfo(
		sendVerifyCodeHandler,
		newSendVerifyCodeArgs,
		newSendVerifyCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	coreApiServiceInfo                = NewServiceInfo()
	coreApiServiceInfoForClient       = NewServiceInfoForClient()
	coreApiServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return coreApiServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return coreApiServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return coreApiServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "core_api"
	handlerType := (*core_api.CoreApi)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "alumni.core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func signUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).SignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SignUpArgs:
		success, err := handler.(core_api.CoreApi).SignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSignUpArgs() interface{} {
	return &SignUpArgs{}
}

func newSignUpResult() interface{} {
	return &SignUpResult{}
}

type SignUpArgs struct {
	Req *core_api.SignUpReq
}

func (p *SignUpArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SignUpReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SignUpArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SignUpArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SignUpArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SignUpArgs_Req_DEFAULT *core_api.SignUpReq

func (p *SignUpArgs) GetReq() *core_api.SignUpReq {
	if !p.IsSetReq() {
		return SignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SignUpResult struct {
	Success *core_api.SignUpResp
}

var SignUpResult_Success_DEFAULT *core_api.SignUpResp

func (p *SignUpResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SignUpResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SignUpResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SignUpResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SignUpResult) Unmarshal(in []byte) error {
	msg := new(core_api.SignUpResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SignUpResult) GetSuccess() *core_api.SignUpResp {
	if !p.IsSetSuccess() {
		return SignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SignUpResp)
}

func (p *SignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SignUpResult) GetResult() interface{} {
	return p.Success
}

func signInHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SignInReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).SignIn(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SignInArgs:
		success, err := handler.(core_api.CoreApi).SignIn(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SignInResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSignInArgs() interface{} {
	return &SignInArgs{}
}

func newSignInResult() interface{} {
	return &SignInResult{}
}

type SignInArgs struct {
	Req *core_api.SignInReq
}

func (p *SignInArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SignInReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SignInArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SignInArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SignInArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SignInArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SignInReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SignInArgs_Req_DEFAULT *core_api.SignInReq

func (p *SignInArgs) GetReq() *core_api.SignInReq {
	if !p.IsSetReq() {
		return SignInArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SignInArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SignInArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SignInResult struct {
	Success *core_api.SignInResp
}

var SignInResult_Success_DEFAULT *core_api.SignInResp

func (p *SignInResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SignInResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SignInResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SignInResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SignInResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SignInResult) Unmarshal(in []byte) error {
	msg := new(core_api.SignInResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SignInResult) GetSuccess() *core_api.SignInResp {
	if !p.IsSetSuccess() {
		return SignInResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SignInResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SignInResp)
}

func (p *SignInResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SignInResult) GetResult() interface{} {
	return p.Success
}

func updateUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).UpdateUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateUserInfoArgs:
		success, err := handler.(core_api.CoreApi).UpdateUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateUserInfoArgs() interface{} {
	return &UpdateUserInfoArgs{}
}

func newUpdateUserInfoResult() interface{} {
	return &UpdateUserInfoResult{}
}

type UpdateUserInfoArgs struct {
	Req *core_api.UpdateUserInfoReq
}

func (p *UpdateUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserInfoArgs_Req_DEFAULT *core_api.UpdateUserInfoReq

func (p *UpdateUserInfoArgs) GetReq() *core_api.UpdateUserInfoReq {
	if !p.IsSetReq() {
		return UpdateUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserInfoResult struct {
	Success *core_api.Response
}

var UpdateUserInfoResult_Success_DEFAULT *core_api.Response

func (p *UpdateUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserInfoResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserInfoResult) GetResult() interface{} {
	return p.Success
}

func updateEducationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateEducationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).UpdateEducation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateEducationArgs:
		success, err := handler.(core_api.CoreApi).UpdateEducation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateEducationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateEducationArgs() interface{} {
	return &UpdateEducationArgs{}
}

func newUpdateEducationResult() interface{} {
	return &UpdateEducationResult{}
}

type UpdateEducationArgs struct {
	Req *core_api.UpdateEducationReq
}

func (p *UpdateEducationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateEducationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateEducationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateEducationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateEducationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateEducationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateEducationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateEducationArgs_Req_DEFAULT *core_api.UpdateEducationReq

func (p *UpdateEducationArgs) GetReq() *core_api.UpdateEducationReq {
	if !p.IsSetReq() {
		return UpdateEducationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateEducationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateEducationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateEducationResult struct {
	Success *core_api.Response
}

var UpdateEducationResult_Success_DEFAULT *core_api.Response

func (p *UpdateEducationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateEducationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateEducationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateEducationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateEducationResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateEducationResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateEducationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateEducationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateEducationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateEducationResult) GetResult() interface{} {
	return p.Success
}

func updateEmploymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateEmploymentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).UpdateEmployment(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateEmploymentArgs:
		success, err := handler.(core_api.CoreApi).UpdateEmployment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateEmploymentResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateEmploymentArgs() interface{} {
	return &UpdateEmploymentArgs{}
}

func newUpdateEmploymentResult() interface{} {
	return &UpdateEmploymentResult{}
}

type UpdateEmploymentArgs struct {
	Req *core_api.UpdateEmploymentReq
}

func (p *UpdateEmploymentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateEmploymentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateEmploymentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateEmploymentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateEmploymentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateEmploymentArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateEmploymentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateEmploymentArgs_Req_DEFAULT *core_api.UpdateEmploymentReq

func (p *UpdateEmploymentArgs) GetReq() *core_api.UpdateEmploymentReq {
	if !p.IsSetReq() {
		return UpdateEmploymentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateEmploymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateEmploymentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateEmploymentResult struct {
	Success *core_api.Response
}

var UpdateEmploymentResult_Success_DEFAULT *core_api.Response

func (p *UpdateEmploymentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateEmploymentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateEmploymentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateEmploymentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateEmploymentResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateEmploymentResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateEmploymentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateEmploymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateEmploymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateEmploymentResult) GetResult() interface{} {
	return p.Success
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserInfoArgs:
		success, err := handler.(core_api.CoreApi).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *core_api.GetUserInfoReq
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *core_api.GetUserInfoReq

func (p *GetUserInfoArgs) GetReq() *core_api.GetUserInfoReq {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoResult struct {
	Success *core_api.GetUserInfoResp
}

var GetUserInfoResult_Success_DEFAULT *core_api.GetUserInfoResp

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *core_api.GetUserInfoResp {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserInfoResp)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) GetResult() interface{} {
	return p.Success
}

func createActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).CreateActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateActivityArgs:
		success, err := handler.(core_api.CoreApi).CreateActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateActivityArgs() interface{} {
	return &CreateActivityArgs{}
}

func newCreateActivityResult() interface{} {
	return &CreateActivityResult{}
}

type CreateActivityArgs struct {
	Req *core_api.CreateActivityReq
}

func (p *CreateActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateActivityArgs_Req_DEFAULT *core_api.CreateActivityReq

func (p *CreateActivityArgs) GetReq() *core_api.CreateActivityReq {
	if !p.IsSetReq() {
		return CreateActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateActivityResult struct {
	Success *core_api.Response
}

var CreateActivityResult_Success_DEFAULT *core_api.Response

func (p *CreateActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateActivityResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CreateActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CreateActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateActivityResult) GetResult() interface{} {
	return p.Success
}

func updateActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).UpdateActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateActivityArgs:
		success, err := handler.(core_api.CoreApi).UpdateActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateActivityArgs() interface{} {
	return &UpdateActivityArgs{}
}

func newUpdateActivityResult() interface{} {
	return &UpdateActivityResult{}
}

type UpdateActivityArgs struct {
	Req *core_api.UpdateActivityReq
}

func (p *UpdateActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateActivityArgs_Req_DEFAULT *core_api.UpdateActivityReq

func (p *UpdateActivityArgs) GetReq() *core_api.UpdateActivityReq {
	if !p.IsSetReq() {
		return UpdateActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateActivityResult struct {
	Success *core_api.Response
}

var UpdateActivityResult_Success_DEFAULT *core_api.Response

func (p *UpdateActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateActivityResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateActivityResult) GetResult() interface{} {
	return p.Success
}

func getActivitiesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetActivitiesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).GetActivities(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetActivitiesArgs:
		success, err := handler.(core_api.CoreApi).GetActivities(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetActivitiesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetActivitiesArgs() interface{} {
	return &GetActivitiesArgs{}
}

func newGetActivitiesResult() interface{} {
	return &GetActivitiesResult{}
}

type GetActivitiesArgs struct {
	Req *core_api.GetActivitiesReq
}

func (p *GetActivitiesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetActivitiesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetActivitiesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetActivitiesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetActivitiesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetActivitiesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetActivitiesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetActivitiesArgs_Req_DEFAULT *core_api.GetActivitiesReq

func (p *GetActivitiesArgs) GetReq() *core_api.GetActivitiesReq {
	if !p.IsSetReq() {
		return GetActivitiesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetActivitiesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetActivitiesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetActivitiesResult struct {
	Success *core_api.GetActivitiesResp
}

var GetActivitiesResult_Success_DEFAULT *core_api.GetActivitiesResp

func (p *GetActivitiesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetActivitiesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetActivitiesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetActivitiesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetActivitiesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetActivitiesResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetActivitiesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetActivitiesResult) GetSuccess() *core_api.GetActivitiesResp {
	if !p.IsSetSuccess() {
		return GetActivitiesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetActivitiesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetActivitiesResp)
}

func (p *GetActivitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetActivitiesResult) GetResult() interface{} {
	return p.Success
}

func getActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).GetActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetActivityArgs:
		success, err := handler.(core_api.CoreApi).GetActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetActivityArgs() interface{} {
	return &GetActivityArgs{}
}

func newGetActivityResult() interface{} {
	return &GetActivityResult{}
}

type GetActivityArgs struct {
	Req *core_api.GetActivityReq
}

func (p *GetActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetActivityArgs_Req_DEFAULT *core_api.GetActivityReq

func (p *GetActivityArgs) GetReq() *core_api.GetActivityReq {
	if !p.IsSetReq() {
		return GetActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetActivityResult struct {
	Success *core_api.GetActivityResp
}

var GetActivityResult_Success_DEFAULT *core_api.GetActivityResp

func (p *GetActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetActivityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetActivityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetActivityResult) GetSuccess() *core_api.GetActivityResp {
	if !p.IsSetSuccess() {
		return GetActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetActivityResp)
}

func (p *GetActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetActivityResult) GetResult() interface{} {
	return p.Success
}

func registerActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.RegisterActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).RegisterActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RegisterActivityArgs:
		success, err := handler.(core_api.CoreApi).RegisterActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRegisterActivityArgs() interface{} {
	return &RegisterActivityArgs{}
}

func newRegisterActivityResult() interface{} {
	return &RegisterActivityResult{}
}

type RegisterActivityArgs struct {
	Req *core_api.RegisterActivityReq
}

func (p *RegisterActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.RegisterActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.RegisterActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterActivityArgs_Req_DEFAULT *core_api.RegisterActivityReq

func (p *RegisterActivityArgs) GetReq() *core_api.RegisterActivityReq {
	if !p.IsSetReq() {
		return RegisterActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RegisterActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RegisterActivityResult struct {
	Success *core_api.Response
}

var RegisterActivityResult_Success_DEFAULT *core_api.Response

func (p *RegisterActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterActivityResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return RegisterActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *RegisterActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterActivityResult) GetResult() interface{} {
	return p.Success
}

func checkInHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CheckInReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).CheckIn(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckInArgs:
		success, err := handler.(core_api.CoreApi).CheckIn(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckInResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckInArgs() interface{} {
	return &CheckInArgs{}
}

func newCheckInResult() interface{} {
	return &CheckInResult{}
}

type CheckInArgs struct {
	Req *core_api.CheckInReq
}

func (p *CheckInArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CheckInReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckInArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckInArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckInArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckInArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CheckInReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckInArgs_Req_DEFAULT *core_api.CheckInReq

func (p *CheckInArgs) GetReq() *core_api.CheckInReq {
	if !p.IsSetReq() {
		return CheckInArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckInArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckInArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckInResult struct {
	Success *core_api.Response
}

var CheckInResult_Success_DEFAULT *core_api.Response

func (p *CheckInResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckInResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckInResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckInResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckInResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckInResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CheckInResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckInResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CheckInResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckInResult) GetResult() interface{} {
	return p.Success
}

func getRegistersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetRegistersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).GetRegisters(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetRegistersArgs:
		success, err := handler.(core_api.CoreApi).GetRegisters(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetRegistersResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetRegistersArgs() interface{} {
	return &GetRegistersArgs{}
}

func newGetRegistersResult() interface{} {
	return &GetRegistersResult{}
}

type GetRegistersArgs struct {
	Req *core_api.GetRegistersReq
}

func (p *GetRegistersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetRegistersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetRegistersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetRegistersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetRegistersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetRegistersArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetRegistersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetRegistersArgs_Req_DEFAULT *core_api.GetRegistersReq

func (p *GetRegistersArgs) GetReq() *core_api.GetRegistersReq {
	if !p.IsSetReq() {
		return GetRegistersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetRegistersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetRegistersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetRegistersResult struct {
	Success *core_api.GetRegisterResp
}

var GetRegistersResult_Success_DEFAULT *core_api.GetRegisterResp

func (p *GetRegistersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetRegisterResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetRegistersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetRegistersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetRegistersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetRegistersResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetRegisterResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetRegistersResult) GetSuccess() *core_api.GetRegisterResp {
	if !p.IsSetSuccess() {
		return GetRegistersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetRegistersResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetRegisterResp)
}

func (p *GetRegistersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRegistersResult) GetResult() interface{} {
	return p.Success
}

func applySignedUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ApplySignedUrlReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).ApplySignedUrl(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ApplySignedUrlArgs:
		success, err := handler.(core_api.CoreApi).ApplySignedUrl(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ApplySignedUrlResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newApplySignedUrlArgs() interface{} {
	return &ApplySignedUrlArgs{}
}

func newApplySignedUrlResult() interface{} {
	return &ApplySignedUrlResult{}
}

type ApplySignedUrlArgs struct {
	Req *core_api.ApplySignedUrlReq
}

func (p *ApplySignedUrlArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ApplySignedUrlReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ApplySignedUrlArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ApplySignedUrlArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ApplySignedUrlArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ApplySignedUrlArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ApplySignedUrlReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ApplySignedUrlArgs_Req_DEFAULT *core_api.ApplySignedUrlReq

func (p *ApplySignedUrlArgs) GetReq() *core_api.ApplySignedUrlReq {
	if !p.IsSetReq() {
		return ApplySignedUrlArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ApplySignedUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ApplySignedUrlArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ApplySignedUrlResult struct {
	Success *core_api.ApplySignedUrlResp
}

var ApplySignedUrlResult_Success_DEFAULT *core_api.ApplySignedUrlResp

func (p *ApplySignedUrlResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ApplySignedUrlResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ApplySignedUrlResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ApplySignedUrlResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ApplySignedUrlResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ApplySignedUrlResult) Unmarshal(in []byte) error {
	msg := new(core_api.ApplySignedUrlResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ApplySignedUrlResult) GetSuccess() *core_api.ApplySignedUrlResp {
	if !p.IsSetSuccess() {
		return ApplySignedUrlResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ApplySignedUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ApplySignedUrlResp)
}

func (p *ApplySignedUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApplySignedUrlResult) GetResult() interface{} {
	return p.Success
}

func sendVerifyCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SendVerifyCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.CoreApi).SendVerifyCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendVerifyCodeArgs:
		success, err := handler.(core_api.CoreApi).SendVerifyCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendVerifyCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendVerifyCodeArgs() interface{} {
	return &SendVerifyCodeArgs{}
}

func newSendVerifyCodeResult() interface{} {
	return &SendVerifyCodeResult{}
}

type SendVerifyCodeArgs struct {
	Req *core_api.SendVerifyCodeReq
}

func (p *SendVerifyCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SendVerifyCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendVerifyCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendVerifyCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendVerifyCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendVerifyCodeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SendVerifyCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendVerifyCodeArgs_Req_DEFAULT *core_api.SendVerifyCodeReq

func (p *SendVerifyCodeArgs) GetReq() *core_api.SendVerifyCodeReq {
	if !p.IsSetReq() {
		return SendVerifyCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendVerifyCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendVerifyCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendVerifyCodeResult struct {
	Success *core_api.Response
}

var SendVerifyCodeResult_Success_DEFAULT *core_api.Response

func (p *SendVerifyCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendVerifyCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendVerifyCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendVerifyCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendVerifyCodeResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendVerifyCodeResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return SendVerifyCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendVerifyCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *SendVerifyCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendVerifyCodeResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SignUp(ctx context.Context, Req *core_api.SignUpReq) (r *core_api.SignUpResp, err error) {
	var _args SignUpArgs
	_args.Req = Req
	var _result SignUpResult
	if err = p.c.Call(ctx, "SignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignIn(ctx context.Context, Req *core_api.SignInReq) (r *core_api.SignInResp, err error) {
	var _args SignInArgs
	_args.Req = Req
	var _result SignInResult
	if err = p.c.Call(ctx, "SignIn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserInfo(ctx context.Context, Req *core_api.UpdateUserInfoReq) (r *core_api.Response, err error) {
	var _args UpdateUserInfoArgs
	_args.Req = Req
	var _result UpdateUserInfoResult
	if err = p.c.Call(ctx, "UpdateUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateEducation(ctx context.Context, Req *core_api.UpdateEducationReq) (r *core_api.Response, err error) {
	var _args UpdateEducationArgs
	_args.Req = Req
	var _result UpdateEducationResult
	if err = p.c.Call(ctx, "UpdateEducation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateEmployment(ctx context.Context, Req *core_api.UpdateEmploymentReq) (r *core_api.Response, err error) {
	var _args UpdateEmploymentArgs
	_args.Req = Req
	var _result UpdateEmploymentResult
	if err = p.c.Call(ctx, "UpdateEmployment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *core_api.GetUserInfoReq) (r *core_api.GetUserInfoResp, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateActivity(ctx context.Context, Req *core_api.CreateActivityReq) (r *core_api.Response, err error) {
	var _args CreateActivityArgs
	_args.Req = Req
	var _result CreateActivityResult
	if err = p.c.Call(ctx, "CreateActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateActivity(ctx context.Context, Req *core_api.UpdateActivityReq) (r *core_api.Response, err error) {
	var _args UpdateActivityArgs
	_args.Req = Req
	var _result UpdateActivityResult
	if err = p.c.Call(ctx, "UpdateActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetActivities(ctx context.Context, Req *core_api.GetActivitiesReq) (r *core_api.GetActivitiesResp, err error) {
	var _args GetActivitiesArgs
	_args.Req = Req
	var _result GetActivitiesResult
	if err = p.c.Call(ctx, "GetActivities", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetActivity(ctx context.Context, Req *core_api.GetActivityReq) (r *core_api.GetActivityResp, err error) {
	var _args GetActivityArgs
	_args.Req = Req
	var _result GetActivityResult
	if err = p.c.Call(ctx, "GetActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterActivity(ctx context.Context, Req *core_api.RegisterActivityReq) (r *core_api.Response, err error) {
	var _args RegisterActivityArgs
	_args.Req = Req
	var _result RegisterActivityResult
	if err = p.c.Call(ctx, "RegisterActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckIn(ctx context.Context, Req *core_api.CheckInReq) (r *core_api.Response, err error) {
	var _args CheckInArgs
	_args.Req = Req
	var _result CheckInResult
	if err = p.c.Call(ctx, "CheckIn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRegisters(ctx context.Context, Req *core_api.GetRegistersReq) (r *core_api.GetRegisterResp, err error) {
	var _args GetRegistersArgs
	_args.Req = Req
	var _result GetRegistersResult
	if err = p.c.Call(ctx, "GetRegisters", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ApplySignedUrl(ctx context.Context, Req *core_api.ApplySignedUrlReq) (r *core_api.ApplySignedUrlResp, err error) {
	var _args ApplySignedUrlArgs
	_args.Req = Req
	var _result ApplySignedUrlResult
	if err = p.c.Call(ctx, "ApplySignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendVerifyCode(ctx context.Context, Req *core_api.SendVerifyCodeReq) (r *core_api.Response, err error) {
	var _args SendVerifyCodeArgs
	_args.Req = Req
	var _result SendVerifyCodeResult
	if err = p.c.Call(ctx, "SendVerifyCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
