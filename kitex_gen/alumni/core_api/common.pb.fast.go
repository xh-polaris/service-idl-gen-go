// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SignUpReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignUpReq[number], err)
}

func (x *SignUpReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.VerifyCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignUpResp[number], err)
}

func (x *SignUpResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccessExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SignInReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignInReq[number], err)
}

func (x *SignInReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.VerifyCode = &tmp
	return offset, err
}

func (x *SignInReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Password = &tmp
	return offset, err
}

func (x *SignInResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignInResp[number], err)
}

func (x *SignInResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccessExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateUserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateUserInfoReq[number], err)
}

func (x *UpdateUserInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Avatar = &tmp
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Name = &tmp
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Gender = &tmp
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Birthday = &tmp
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Phone = &tmp
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.WxId = &tmp
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Hometown = &tmp
	return offset, err
}

func (x *UpdateEducationReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateEducationReq[number], err)
}

func (x *UpdateEducationReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateEducationReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Education
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Educations = append(x.Educations, &v)
	return offset, nil
}

func (x *UpdateEmploymentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateEmploymentReq[number], err)
}

func (x *UpdateEmploymentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Employment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Employments = append(x.Employments, &v)
	return offset, nil
}

func (x *GetUserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetUserInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserInfoResp[number], err)
}

func (x *GetUserInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Gender, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Birthday, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.WxId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Hometown, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v Education
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.HometownEducations = append(x.HometownEducations, &v)
	return offset, nil
}

func (x *GetUserInfoResp) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v Education
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ShanghaiEducations = append(x.ShanghaiEducations, &v)
	return offset, nil
}

func (x *GetUserInfoResp) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	var v Employment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Employments = append(x.Employments, &v)
	return offset, nil
}

func (x *CreateActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateActivityReq[number], err)
}

func (x *CreateActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Cover, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Location, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ExactLocation, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Sponsor, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Start, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.RegisterStart, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.RegisterEnd, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Contact, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *UpdateActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateActivityReq[number], err)
}

func (x *UpdateActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateActivityReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Cover = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Name = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Location = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.ExactLocation = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Sponsor = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Start = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.RegisterStart = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.RegisterEnd = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Description = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Contact = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Limit = &tmp
	return offset, err
}

func (x *UpdateActivityReq) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Status = &tmp
	return offset, err
}

func (x *GetActivitiesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetActivitiesReq[number], err)
}

func (x *GetActivitiesReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetActivitiesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetActivitiesResp[number], err)
}

func (x *GetActivitiesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetActivitiesResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Activity
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Activities = append(x.Activities, &v)
	return offset, nil
}

func (x *GetActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetActivityReq[number], err)
}

func (x *GetActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetActivityResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetActivityResp[number], err)
}

func (x *GetActivityResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Activity
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Activity = &v
	return offset, nil
}

func (x *GetActivityResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Numbers, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RegisterActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterActivityReq[number], err)
}

func (x *RegisterActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterActivityReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v RegisterActivityReq_RegisterItem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *CheckInReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CheckInReq[number], err)
}

func (x *CheckInReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CheckInReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CheckInReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetRegistersReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetRegistersReq[number], err)
}

func (x *GetRegistersReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetRegisterResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetRegisterResp[number], err)
}

func (x *GetRegisterResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetRegisterResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Checked, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetRegisterResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Register
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Registers = append(x.Registers, &v)
	return offset, nil
}

func (x *Education) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Education[number], err)
}

func (x *Education) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Phase, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Education) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.School, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Education) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Year, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Employment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Employment[number], err)
}

func (x *Employment) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Organization, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Employment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Position, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Employment) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Industry, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Employment) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Entry, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Employment) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Departure, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Activity[number], err)
}

func (x *Activity) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cover, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Location, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ExactLocation, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Sponsor, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Start, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.RegisterStart, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.RegisterEnd, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Contact, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Register) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Register[number], err)
}

func (x *Register) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Register) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Register) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Register) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Register) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CheckIn, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Register) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Register) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Response) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Response[number], err)
}

func (x *Response) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Response) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendVerifyCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendVerifyCodeReq[number], err)
}

func (x *SendVerifyCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendVerifyCodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendVerifyCodeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ApplySignedUrlReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ApplySignedUrlReq[number], err)
}

func (x *ApplySignedUrlReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Prefix = &tmp
	return offset, err
}

func (x *ApplySignedUrlReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Suffix = &tmp
	return offset, err
}

func (x *ApplySignedUrlResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ApplySignedUrlResp[number], err)
}

func (x *ApplySignedUrlResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ApplySignedUrlResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SessionToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterActivityReq_RegisterItem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterActivityReq_RegisterItem[number], err)
}

func (x *RegisterActivityReq_RegisterItem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegisterActivityReq_RegisterItem) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SignUpReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthId())
	return offset
}

func (x *SignUpReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthType())
	return offset
}

func (x *SignUpReq) fastWriteField3(buf []byte) (offset int) {
	if x.VerifyCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetVerifyCode())
	return offset
}

func (x *SignUpReq) fastWriteField4(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPassword())
	return offset
}

func (x *SignUpReq) fastWriteField5(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetName())
	return offset
}

func (x *SignUpResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SignUpResp) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *SignUpResp) fastWriteField2(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAccessToken())
	return offset
}

func (x *SignUpResp) fastWriteField3(buf []byte) (offset int) {
	if x.AccessExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetAccessExpire())
	return offset
}

func (x *SignInReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SignInReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthId())
	return offset
}

func (x *SignInReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthType())
	return offset
}

func (x *SignInReq) fastWriteField3(buf []byte) (offset int) {
	if x.VerifyCode == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetVerifyCode())
	return offset
}

func (x *SignInReq) fastWriteField4(buf []byte) (offset int) {
	if x.Password == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPassword())
	return offset
}

func (x *SignInResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SignInResp) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *SignInResp) fastWriteField2(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAccessToken())
	return offset
}

func (x *SignInResp) fastWriteField3(buf []byte) (offset int) {
	if x.AccessExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetAccessExpire())
	return offset
}

func (x *UpdateUserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Avatar == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAvatar())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField3(buf []byte) (offset int) {
	if x.Gender == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetGender())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField4(buf []byte) (offset int) {
	if x.Birthday == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetBirthday())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField5(buf []byte) (offset int) {
	if x.Phone == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPhone())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField6(buf []byte) (offset int) {
	if x.WxId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetWxId())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField7(buf []byte) (offset int) {
	if x.Hometown == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetHometown())
	return offset
}

func (x *UpdateEducationReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateEducationReq) fastWriteField1(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetType())
	return offset
}

func (x *UpdateEducationReq) fastWriteField2(buf []byte) (offset int) {
	if x.Educations == nil {
		return offset
	}
	for i := range x.GetEducations() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetEducations()[i])
	}
	return offset
}

func (x *UpdateEmploymentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateEmploymentReq) fastWriteField1(buf []byte) (offset int) {
	if x.Employments == nil {
		return offset
	}
	for i := range x.GetEmployments() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetEmployments()[i])
	}
	return offset
}

func (x *GetUserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetUserInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *GetUserInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAvatar())
	return offset
}

func (x *GetUserInfoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *GetUserInfoResp) fastWriteField3(buf []byte) (offset int) {
	if x.Gender == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetGender())
	return offset
}

func (x *GetUserInfoResp) fastWriteField4(buf []byte) (offset int) {
	if x.Birthday == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetBirthday())
	return offset
}

func (x *GetUserInfoResp) fastWriteField5(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPhone())
	return offset
}

func (x *GetUserInfoResp) fastWriteField6(buf []byte) (offset int) {
	if x.WxId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetWxId())
	return offset
}

func (x *GetUserInfoResp) fastWriteField7(buf []byte) (offset int) {
	if x.Hometown == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetHometown())
	return offset
}

func (x *GetUserInfoResp) fastWriteField8(buf []byte) (offset int) {
	if x.HometownEducations == nil {
		return offset
	}
	for i := range x.GetHometownEducations() {
		offset += fastpb.WriteMessage(buf[offset:], 8, x.GetHometownEducations()[i])
	}
	return offset
}

func (x *GetUserInfoResp) fastWriteField9(buf []byte) (offset int) {
	if x.ShanghaiEducations == nil {
		return offset
	}
	for i := range x.GetShanghaiEducations() {
		offset += fastpb.WriteMessage(buf[offset:], 9, x.GetShanghaiEducations()[i])
	}
	return offset
}

func (x *GetUserInfoResp) fastWriteField10(buf []byte) (offset int) {
	if x.Employments == nil {
		return offset
	}
	for i := range x.GetEmployments() {
		offset += fastpb.WriteMessage(buf[offset:], 10, x.GetEmployments()[i])
	}
	return offset
}

func (x *CreateActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *CreateActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.Cover == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCover())
	return offset
}

func (x *CreateActivityReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *CreateActivityReq) fastWriteField3(buf []byte) (offset int) {
	if x.Location == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLocation())
	return offset
}

func (x *CreateActivityReq) fastWriteField4(buf []byte) (offset int) {
	if x.ExactLocation == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetExactLocation())
	return offset
}

func (x *CreateActivityReq) fastWriteField5(buf []byte) (offset int) {
	if x.Sponsor == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetSponsor())
	return offset
}

func (x *CreateActivityReq) fastWriteField6(buf []byte) (offset int) {
	if x.Start == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetStart())
	return offset
}

func (x *CreateActivityReq) fastWriteField7(buf []byte) (offset int) {
	if x.RegisterStart == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetRegisterStart())
	return offset
}

func (x *CreateActivityReq) fastWriteField8(buf []byte) (offset int) {
	if x.RegisterEnd == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetRegisterEnd())
	return offset
}

func (x *CreateActivityReq) fastWriteField9(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetDescription())
	return offset
}

func (x *CreateActivityReq) fastWriteField10(buf []byte) (offset int) {
	if x.Contact == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetContact())
	return offset
}

func (x *CreateActivityReq) fastWriteField11(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetLimit())
	return offset
}

func (x *UpdateActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	return offset
}

func (x *UpdateActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateActivityReq) fastWriteField2(buf []byte) (offset int) {
	if x.Cover == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCover())
	return offset
}

func (x *UpdateActivityReq) fastWriteField3(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *UpdateActivityReq) fastWriteField4(buf []byte) (offset int) {
	if x.Location == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetLocation())
	return offset
}

func (x *UpdateActivityReq) fastWriteField5(buf []byte) (offset int) {
	if x.ExactLocation == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetExactLocation())
	return offset
}

func (x *UpdateActivityReq) fastWriteField6(buf []byte) (offset int) {
	if x.Sponsor == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetSponsor())
	return offset
}

func (x *UpdateActivityReq) fastWriteField7(buf []byte) (offset int) {
	if x.Start == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetStart())
	return offset
}

func (x *UpdateActivityReq) fastWriteField8(buf []byte) (offset int) {
	if x.RegisterStart == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetRegisterStart())
	return offset
}

func (x *UpdateActivityReq) fastWriteField9(buf []byte) (offset int) {
	if x.RegisterEnd == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetRegisterEnd())
	return offset
}

func (x *UpdateActivityReq) fastWriteField10(buf []byte) (offset int) {
	if x.Description == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetDescription())
	return offset
}

func (x *UpdateActivityReq) fastWriteField11(buf []byte) (offset int) {
	if x.Contact == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetContact())
	return offset
}

func (x *UpdateActivityReq) fastWriteField12(buf []byte) (offset int) {
	if x.Limit == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetLimit())
	return offset
}

func (x *UpdateActivityReq) fastWriteField13(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetStatus())
	return offset
}

func (x *GetActivitiesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetActivitiesReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *GetActivitiesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetActivitiesResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *GetActivitiesResp) fastWriteField2(buf []byte) (offset int) {
	if x.Activities == nil {
		return offset
	}
	for i := range x.GetActivities() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetActivities()[i])
	}
	return offset
}

func (x *GetActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetActivityResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetActivityResp) fastWriteField1(buf []byte) (offset int) {
	if x.Activity == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetActivity())
	return offset
}

func (x *GetActivityResp) fastWriteField2(buf []byte) (offset int) {
	if x.Numbers == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetNumbers())
	return offset
}

func (x *RegisterActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RegisterActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetActivityId())
	return offset
}

func (x *RegisterActivityReq) fastWriteField2(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetItems()[i])
	}
	return offset
}

func (x *CheckInReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CheckInReq) fastWriteField1(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetActivityId())
	return offset
}

func (x *CheckInReq) fastWriteField2(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPhone())
	return offset
}

func (x *CheckInReq) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *GetRegistersReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetRegistersReq) fastWriteField1(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetActivityId())
	return offset
}

func (x *GetRegisterResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetRegisterResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *GetRegisterResp) fastWriteField2(buf []byte) (offset int) {
	if x.Checked == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetChecked())
	return offset
}

func (x *GetRegisterResp) fastWriteField3(buf []byte) (offset int) {
	if x.Registers == nil {
		return offset
	}
	for i := range x.GetRegisters() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetRegisters()[i])
	}
	return offset
}

func (x *Education) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Education) fastWriteField1(buf []byte) (offset int) {
	if x.Phase == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPhase())
	return offset
}

func (x *Education) fastWriteField2(buf []byte) (offset int) {
	if x.School == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSchool())
	return offset
}

func (x *Education) fastWriteField3(buf []byte) (offset int) {
	if x.Year == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetYear())
	return offset
}

func (x *Employment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Employment) fastWriteField1(buf []byte) (offset int) {
	if x.Organization == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOrganization())
	return offset
}

func (x *Employment) fastWriteField2(buf []byte) (offset int) {
	if x.Position == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPosition())
	return offset
}

func (x *Employment) fastWriteField3(buf []byte) (offset int) {
	if x.Industry == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetIndustry())
	return offset
}

func (x *Employment) fastWriteField4(buf []byte) (offset int) {
	if x.Entry == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetEntry())
	return offset
}

func (x *Employment) fastWriteField5(buf []byte) (offset int) {
	if x.Departure == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetDeparture())
	return offset
}

func (x *Activity) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	return offset
}

func (x *Activity) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Activity) fastWriteField2(buf []byte) (offset int) {
	if x.Cover == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCover())
	return offset
}

func (x *Activity) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *Activity) fastWriteField4(buf []byte) (offset int) {
	if x.Location == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetLocation())
	return offset
}

func (x *Activity) fastWriteField5(buf []byte) (offset int) {
	if x.ExactLocation == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetExactLocation())
	return offset
}

func (x *Activity) fastWriteField6(buf []byte) (offset int) {
	if x.Sponsor == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetSponsor())
	return offset
}

func (x *Activity) fastWriteField7(buf []byte) (offset int) {
	if x.Start == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetStart())
	return offset
}

func (x *Activity) fastWriteField8(buf []byte) (offset int) {
	if x.RegisterStart == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetRegisterStart())
	return offset
}

func (x *Activity) fastWriteField9(buf []byte) (offset int) {
	if x.RegisterEnd == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetRegisterEnd())
	return offset
}

func (x *Activity) fastWriteField10(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetDescription())
	return offset
}

func (x *Activity) fastWriteField11(buf []byte) (offset int) {
	if x.Contact == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetContact())
	return offset
}

func (x *Activity) fastWriteField12(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetLimit())
	return offset
}

func (x *Activity) fastWriteField13(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetStatus())
	return offset
}

func (x *Register) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Register) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Register) fastWriteField2(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetActivityId())
	return offset
}

func (x *Register) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *Register) fastWriteField4(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPhone())
	return offset
}

func (x *Register) fastWriteField5(buf []byte) (offset int) {
	if !x.CheckIn {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.GetCheckIn())
	return offset
}

func (x *Register) fastWriteField6(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCreateTime())
	return offset
}

func (x *Register) fastWriteField7(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetUpdateTime())
	return offset
}

func (x *Response) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Response) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *Response) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *SendVerifyCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SendVerifyCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthType())
	return offset
}

func (x *SendVerifyCodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthId())
	return offset
}

func (x *SendVerifyCodeReq) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetType())
	return offset
}

func (x *ApplySignedUrlReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ApplySignedUrlReq) fastWriteField1(buf []byte) (offset int) {
	if x.Prefix == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPrefix())
	return offset
}

func (x *ApplySignedUrlReq) fastWriteField2(buf []byte) (offset int) {
	if x.Suffix == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSuffix())
	return offset
}

func (x *ApplySignedUrlResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ApplySignedUrlResp) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *ApplySignedUrlResp) fastWriteField2(buf []byte) (offset int) {
	if x.SessionToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSessionToken())
	return offset
}

func (x *RegisterActivityReq_RegisterItem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RegisterActivityReq_RegisterItem) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *RegisterActivityReq_RegisterItem) fastWriteField2(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPhone())
	return offset
}

func (x *SignUpReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SignUpReq) sizeField1() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthId())
	return n
}

func (x *SignUpReq) sizeField2() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthType())
	return n
}

func (x *SignUpReq) sizeField3() (n int) {
	if x.VerifyCode == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetVerifyCode())
	return n
}

func (x *SignUpReq) sizeField4() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPassword())
	return n
}

func (x *SignUpReq) sizeField5() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetName())
	return n
}

func (x *SignUpResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SignUpResp) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *SignUpResp) sizeField2() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAccessToken())
	return n
}

func (x *SignUpResp) sizeField3() (n int) {
	if x.AccessExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetAccessExpire())
	return n
}

func (x *SignInReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SignInReq) sizeField1() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthId())
	return n
}

func (x *SignInReq) sizeField2() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthType())
	return n
}

func (x *SignInReq) sizeField3() (n int) {
	if x.VerifyCode == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetVerifyCode())
	return n
}

func (x *SignInReq) sizeField4() (n int) {
	if x.Password == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetPassword())
	return n
}

func (x *SignInResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SignInResp) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *SignInResp) sizeField2() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAccessToken())
	return n
}

func (x *SignInResp) sizeField3() (n int) {
	if x.AccessExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetAccessExpire())
	return n
}

func (x *UpdateUserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *UpdateUserInfoReq) sizeField1() (n int) {
	if x.Avatar == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetAvatar())
	return n
}

func (x *UpdateUserInfoReq) sizeField2() (n int) {
	if x.Name == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdateUserInfoReq) sizeField3() (n int) {
	if x.Gender == nil {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetGender())
	return n
}

func (x *UpdateUserInfoReq) sizeField4() (n int) {
	if x.Birthday == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetBirthday())
	return n
}

func (x *UpdateUserInfoReq) sizeField5() (n int) {
	if x.Phone == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetPhone())
	return n
}

func (x *UpdateUserInfoReq) sizeField6() (n int) {
	if x.WxId == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetWxId())
	return n
}

func (x *UpdateUserInfoReq) sizeField7() (n int) {
	if x.Hometown == nil {
		return n
	}
	n += fastpb.SizeString(7, x.GetHometown())
	return n
}

func (x *UpdateEducationReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateEducationReq) sizeField1() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetType())
	return n
}

func (x *UpdateEducationReq) sizeField2() (n int) {
	if x.Educations == nil {
		return n
	}
	for i := range x.GetEducations() {
		n += fastpb.SizeMessage(2, x.GetEducations()[i])
	}
	return n
}

func (x *UpdateEmploymentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateEmploymentReq) sizeField1() (n int) {
	if x.Employments == nil {
		return n
	}
	for i := range x.GetEmployments() {
		n += fastpb.SizeMessage(1, x.GetEmployments()[i])
	}
	return n
}

func (x *GetUserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetUserInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *GetUserInfoResp) sizeField1() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAvatar())
	return n
}

func (x *GetUserInfoResp) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *GetUserInfoResp) sizeField3() (n int) {
	if x.Gender == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetGender())
	return n
}

func (x *GetUserInfoResp) sizeField4() (n int) {
	if x.Birthday == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetBirthday())
	return n
}

func (x *GetUserInfoResp) sizeField5() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetPhone())
	return n
}

func (x *GetUserInfoResp) sizeField6() (n int) {
	if x.WxId == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetWxId())
	return n
}

func (x *GetUserInfoResp) sizeField7() (n int) {
	if x.Hometown == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetHometown())
	return n
}

func (x *GetUserInfoResp) sizeField8() (n int) {
	if x.HometownEducations == nil {
		return n
	}
	for i := range x.GetHometownEducations() {
		n += fastpb.SizeMessage(8, x.GetHometownEducations()[i])
	}
	return n
}

func (x *GetUserInfoResp) sizeField9() (n int) {
	if x.ShanghaiEducations == nil {
		return n
	}
	for i := range x.GetShanghaiEducations() {
		n += fastpb.SizeMessage(9, x.GetShanghaiEducations()[i])
	}
	return n
}

func (x *GetUserInfoResp) sizeField10() (n int) {
	if x.Employments == nil {
		return n
	}
	for i := range x.GetEmployments() {
		n += fastpb.SizeMessage(10, x.GetEmployments()[i])
	}
	return n
}

func (x *CreateActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *CreateActivityReq) sizeField1() (n int) {
	if x.Cover == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCover())
	return n
}

func (x *CreateActivityReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *CreateActivityReq) sizeField3() (n int) {
	if x.Location == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLocation())
	return n
}

func (x *CreateActivityReq) sizeField4() (n int) {
	if x.ExactLocation == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetExactLocation())
	return n
}

func (x *CreateActivityReq) sizeField5() (n int) {
	if x.Sponsor == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetSponsor())
	return n
}

func (x *CreateActivityReq) sizeField6() (n int) {
	if x.Start == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetStart())
	return n
}

func (x *CreateActivityReq) sizeField7() (n int) {
	if x.RegisterStart == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetRegisterStart())
	return n
}

func (x *CreateActivityReq) sizeField8() (n int) {
	if x.RegisterEnd == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetRegisterEnd())
	return n
}

func (x *CreateActivityReq) sizeField9() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetDescription())
	return n
}

func (x *CreateActivityReq) sizeField10() (n int) {
	if x.Contact == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetContact())
	return n
}

func (x *CreateActivityReq) sizeField11() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetLimit())
	return n
}

func (x *UpdateActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	return n
}

func (x *UpdateActivityReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateActivityReq) sizeField2() (n int) {
	if x.Cover == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetCover())
	return n
}

func (x *UpdateActivityReq) sizeField3() (n int) {
	if x.Name == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *UpdateActivityReq) sizeField4() (n int) {
	if x.Location == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetLocation())
	return n
}

func (x *UpdateActivityReq) sizeField5() (n int) {
	if x.ExactLocation == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetExactLocation())
	return n
}

func (x *UpdateActivityReq) sizeField6() (n int) {
	if x.Sponsor == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetSponsor())
	return n
}

func (x *UpdateActivityReq) sizeField7() (n int) {
	if x.Start == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetStart())
	return n
}

func (x *UpdateActivityReq) sizeField8() (n int) {
	if x.RegisterStart == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetRegisterStart())
	return n
}

func (x *UpdateActivityReq) sizeField9() (n int) {
	if x.RegisterEnd == nil {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetRegisterEnd())
	return n
}

func (x *UpdateActivityReq) sizeField10() (n int) {
	if x.Description == nil {
		return n
	}
	n += fastpb.SizeString(10, x.GetDescription())
	return n
}

func (x *UpdateActivityReq) sizeField11() (n int) {
	if x.Contact == nil {
		return n
	}
	n += fastpb.SizeString(11, x.GetContact())
	return n
}

func (x *UpdateActivityReq) sizeField12() (n int) {
	if x.Limit == nil {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetLimit())
	return n
}

func (x *UpdateActivityReq) sizeField13() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetStatus())
	return n
}

func (x *GetActivitiesReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetActivitiesReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *GetActivitiesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetActivitiesResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *GetActivitiesResp) sizeField2() (n int) {
	if x.Activities == nil {
		return n
	}
	for i := range x.GetActivities() {
		n += fastpb.SizeMessage(2, x.GetActivities()[i])
	}
	return n
}

func (x *GetActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetActivityReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetActivityResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetActivityResp) sizeField1() (n int) {
	if x.Activity == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetActivity())
	return n
}

func (x *GetActivityResp) sizeField2() (n int) {
	if x.Numbers == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetNumbers())
	return n
}

func (x *RegisterActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RegisterActivityReq) sizeField1() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetActivityId())
	return n
}

func (x *RegisterActivityReq) sizeField2() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(2, x.GetItems()[i])
	}
	return n
}

func (x *CheckInReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CheckInReq) sizeField1() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetActivityId())
	return n
}

func (x *CheckInReq) sizeField2() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPhone())
	return n
}

func (x *CheckInReq) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *GetRegistersReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetRegistersReq) sizeField1() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetActivityId())
	return n
}

func (x *GetRegisterResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetRegisterResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *GetRegisterResp) sizeField2() (n int) {
	if x.Checked == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetChecked())
	return n
}

func (x *GetRegisterResp) sizeField3() (n int) {
	if x.Registers == nil {
		return n
	}
	for i := range x.GetRegisters() {
		n += fastpb.SizeMessage(3, x.GetRegisters()[i])
	}
	return n
}

func (x *Education) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Education) sizeField1() (n int) {
	if x.Phase == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPhase())
	return n
}

func (x *Education) sizeField2() (n int) {
	if x.School == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSchool())
	return n
}

func (x *Education) sizeField3() (n int) {
	if x.Year == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetYear())
	return n
}

func (x *Employment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Employment) sizeField1() (n int) {
	if x.Organization == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOrganization())
	return n
}

func (x *Employment) sizeField2() (n int) {
	if x.Position == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPosition())
	return n
}

func (x *Employment) sizeField3() (n int) {
	if x.Industry == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetIndustry())
	return n
}

func (x *Employment) sizeField4() (n int) {
	if x.Entry == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetEntry())
	return n
}

func (x *Employment) sizeField5() (n int) {
	if x.Departure == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetDeparture())
	return n
}

func (x *Activity) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	return n
}

func (x *Activity) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Activity) sizeField2() (n int) {
	if x.Cover == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCover())
	return n
}

func (x *Activity) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *Activity) sizeField4() (n int) {
	if x.Location == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetLocation())
	return n
}

func (x *Activity) sizeField5() (n int) {
	if x.ExactLocation == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetExactLocation())
	return n
}

func (x *Activity) sizeField6() (n int) {
	if x.Sponsor == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetSponsor())
	return n
}

func (x *Activity) sizeField7() (n int) {
	if x.Start == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetStart())
	return n
}

func (x *Activity) sizeField8() (n int) {
	if x.RegisterStart == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetRegisterStart())
	return n
}

func (x *Activity) sizeField9() (n int) {
	if x.RegisterEnd == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetRegisterEnd())
	return n
}

func (x *Activity) sizeField10() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetDescription())
	return n
}

func (x *Activity) sizeField11() (n int) {
	if x.Contact == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetContact())
	return n
}

func (x *Activity) sizeField12() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetLimit())
	return n
}

func (x *Activity) sizeField13() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetStatus())
	return n
}

func (x *Register) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Register) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Register) sizeField2() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetActivityId())
	return n
}

func (x *Register) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *Register) sizeField4() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPhone())
	return n
}

func (x *Register) sizeField5() (n int) {
	if !x.CheckIn {
		return n
	}
	n += fastpb.SizeBool(5, x.GetCheckIn())
	return n
}

func (x *Register) sizeField6() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCreateTime())
	return n
}

func (x *Register) sizeField7() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetUpdateTime())
	return n
}

func (x *Response) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Response) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *Response) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *SendVerifyCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SendVerifyCodeReq) sizeField1() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthType())
	return n
}

func (x *SendVerifyCodeReq) sizeField2() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthId())
	return n
}

func (x *SendVerifyCodeReq) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetType())
	return n
}

func (x *ApplySignedUrlReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ApplySignedUrlReq) sizeField1() (n int) {
	if x.Prefix == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetPrefix())
	return n
}

func (x *ApplySignedUrlReq) sizeField2() (n int) {
	if x.Suffix == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetSuffix())
	return n
}

func (x *ApplySignedUrlResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ApplySignedUrlResp) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *ApplySignedUrlResp) sizeField2() (n int) {
	if x.SessionToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSessionToken())
	return n
}

func (x *RegisterActivityReq_RegisterItem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RegisterActivityReq_RegisterItem) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *RegisterActivityReq_RegisterItem) sizeField2() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPhone())
	return n
}

var fieldIDToName_SignUpReq = map[int32]string{
	1: "AuthId",
	2: "AuthType",
	3: "VerifyCode",
	4: "Password",
	5: "Name",
}

var fieldIDToName_SignUpResp = map[int32]string{
	1: "Id",
	2: "AccessToken",
	3: "AccessExpire",
}

var fieldIDToName_SignInReq = map[int32]string{
	1: "AuthId",
	2: "AuthType",
	3: "VerifyCode",
	4: "Password",
}

var fieldIDToName_SignInResp = map[int32]string{
	1: "Id",
	2: "AccessToken",
	3: "AccessExpire",
}

var fieldIDToName_UpdateUserInfoReq = map[int32]string{
	1: "Avatar",
	2: "Name",
	3: "Gender",
	4: "Birthday",
	5: "Phone",
	6: "WxId",
	7: "Hometown",
}

var fieldIDToName_UpdateEducationReq = map[int32]string{
	1: "Type",
	2: "Educations",
}

var fieldIDToName_UpdateEmploymentReq = map[int32]string{
	1: "Employments",
}

var fieldIDToName_GetUserInfoReq = map[int32]string{}

var fieldIDToName_GetUserInfoResp = map[int32]string{
	1:  "Avatar",
	2:  "Name",
	3:  "Gender",
	4:  "Birthday",
	5:  "Phone",
	6:  "WxId",
	7:  "Hometown",
	8:  "HometownEducations",
	9:  "ShanghaiEducations",
	10: "Employments",
}

var fieldIDToName_CreateActivityReq = map[int32]string{
	1:  "Cover",
	2:  "Name",
	3:  "Location",
	4:  "ExactLocation",
	5:  "Sponsor",
	6:  "Start",
	7:  "RegisterStart",
	8:  "RegisterEnd",
	9:  "Description",
	10: "Contact",
	11: "Limit",
}

var fieldIDToName_UpdateActivityReq = map[int32]string{
	1:  "Id",
	2:  "Cover",
	3:  "Name",
	4:  "Location",
	5:  "ExactLocation",
	6:  "Sponsor",
	7:  "Start",
	8:  "RegisterStart",
	9:  "RegisterEnd",
	10: "Description",
	11: "Contact",
	12: "Limit",
	13: "Status",
}

var fieldIDToName_GetActivitiesReq = map[int32]string{
	1: "PaginationOptions",
}

var fieldIDToName_GetActivitiesResp = map[int32]string{
	1: "Total",
	2: "Activities",
}

var fieldIDToName_GetActivityReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetActivityResp = map[int32]string{
	1: "Activity",
	2: "Numbers",
}

var fieldIDToName_RegisterActivityReq = map[int32]string{
	1: "ActivityId",
	2: "Items",
}

var fieldIDToName_CheckInReq = map[int32]string{
	1: "ActivityId",
	2: "Phone",
	3: "Name",
}

var fieldIDToName_GetRegistersReq = map[int32]string{
	1: "ActivityId",
}

var fieldIDToName_GetRegisterResp = map[int32]string{
	1: "Total",
	2: "Checked",
	3: "Registers",
}

var fieldIDToName_Education = map[int32]string{
	1: "Phase",
	2: "School",
	3: "Year",
}

var fieldIDToName_Employment = map[int32]string{
	1: "Organization",
	2: "Position",
	3: "Industry",
	4: "Entry",
	5: "Departure",
}

var fieldIDToName_Activity = map[int32]string{
	1:  "Id",
	2:  "Cover",
	3:  "Name",
	4:  "Location",
	5:  "ExactLocation",
	6:  "Sponsor",
	7:  "Start",
	8:  "RegisterStart",
	9:  "RegisterEnd",
	10: "Description",
	11: "Contact",
	12: "Limit",
	13: "Status",
}

var fieldIDToName_Register = map[int32]string{
	1: "Id",
	2: "ActivityId",
	3: "Name",
	4: "Phone",
	5: "CheckIn",
	6: "CreateTime",
	7: "UpdateTime",
}

var fieldIDToName_Response = map[int32]string{
	1: "Code",
	2: "Msg",
}

var fieldIDToName_SendVerifyCodeReq = map[int32]string{
	1: "AuthType",
	2: "AuthId",
	3: "Type",
}

var fieldIDToName_ApplySignedUrlReq = map[int32]string{
	1: "Prefix",
	2: "Suffix",
}

var fieldIDToName_ApplySignedUrlResp = map[int32]string{
	1: "Url",
	2: "SessionToken",
}

var fieldIDToName_RegisterActivityReq_RegisterItem = map[int32]string{
	1: "Name",
	2: "Phone",
}

var _ = basic.File_basic_pagination_proto
