// Code generated by Kitex v0.8.0. DO NOT EDIT.

package stsservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	sts "github.com/xh-polaris/service-idl-gen-go/kitex_gen/platform/sts"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return stsServiceServiceInfo
}

var stsServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "StsService"
	handlerType := (*sts.StsService)(nil)
	methods := map[string]kitex.MethodInfo{
		"genCosSts":      kitex.NewMethodInfo(genCosStsHandler, newGenCosStsArgs, newGenCosStsResult, false),
		"genSignedUrl":   kitex.NewMethodInfo(genSignedUrlHandler, newGenSignedUrlArgs, newGenSignedUrlResult, false),
		"deleteObject":   kitex.NewMethodInfo(deleteObjectHandler, newDeleteObjectArgs, newDeleteObjectResult, false),
		"textCheck":      kitex.NewMethodInfo(textCheckHandler, newTextCheckArgs, newTextCheckResult, false),
		"photoCheck":     kitex.NewMethodInfo(photoCheckHandler, newPhotoCheckArgs, newPhotoCheckResult, false),
		"signIn":         kitex.NewMethodInfo(signInHandler, newSignInArgs, newSignInResult, false),
		"setPassword":    kitex.NewMethodInfo(setPasswordHandler, newSetPasswordArgs, newSetPasswordResult, false),
		"sendVerifyCode": kitex.NewMethodInfo(sendVerifyCodeHandler, newSendVerifyCodeArgs, newSendVerifyCodeResult, false),
		"AddUserAuth":    kitex.NewMethodInfo(addUserAuthHandler, newAddUserAuthArgs, newAddUserAuthResult, false),
		"SendMessage":    kitex.NewMethodInfo(sendMessageHandler, newSendMessageArgs, newSendMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "platform.sts",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func genCosStsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.GenCosStsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).GenCosSts(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GenCosStsArgs:
		success, err := handler.(sts.StsService).GenCosSts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GenCosStsResult)
		realResult.Success = success
	}
	return nil
}
func newGenCosStsArgs() interface{} {
	return &GenCosStsArgs{}
}

func newGenCosStsResult() interface{} {
	return &GenCosStsResult{}
}

type GenCosStsArgs struct {
	Req *sts.GenCosStsReq
}

func (p *GenCosStsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.GenCosStsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GenCosStsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GenCosStsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GenCosStsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GenCosStsArgs) Unmarshal(in []byte) error {
	msg := new(sts.GenCosStsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GenCosStsArgs_Req_DEFAULT *sts.GenCosStsReq

func (p *GenCosStsArgs) GetReq() *sts.GenCosStsReq {
	if !p.IsSetReq() {
		return GenCosStsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GenCosStsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenCosStsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GenCosStsResult struct {
	Success *sts.GenCosStsResp
}

var GenCosStsResult_Success_DEFAULT *sts.GenCosStsResp

func (p *GenCosStsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.GenCosStsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GenCosStsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GenCosStsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GenCosStsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GenCosStsResult) Unmarshal(in []byte) error {
	msg := new(sts.GenCosStsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GenCosStsResult) GetSuccess() *sts.GenCosStsResp {
	if !p.IsSetSuccess() {
		return GenCosStsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GenCosStsResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.GenCosStsResp)
}

func (p *GenCosStsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenCosStsResult) GetResult() interface{} {
	return p.Success
}

func genSignedUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.GenSignedUrlReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).GenSignedUrl(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GenSignedUrlArgs:
		success, err := handler.(sts.StsService).GenSignedUrl(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GenSignedUrlResult)
		realResult.Success = success
	}
	return nil
}
func newGenSignedUrlArgs() interface{} {
	return &GenSignedUrlArgs{}
}

func newGenSignedUrlResult() interface{} {
	return &GenSignedUrlResult{}
}

type GenSignedUrlArgs struct {
	Req *sts.GenSignedUrlReq
}

func (p *GenSignedUrlArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.GenSignedUrlReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GenSignedUrlArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GenSignedUrlArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GenSignedUrlArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GenSignedUrlArgs) Unmarshal(in []byte) error {
	msg := new(sts.GenSignedUrlReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GenSignedUrlArgs_Req_DEFAULT *sts.GenSignedUrlReq

func (p *GenSignedUrlArgs) GetReq() *sts.GenSignedUrlReq {
	if !p.IsSetReq() {
		return GenSignedUrlArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GenSignedUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenSignedUrlArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GenSignedUrlResult struct {
	Success *sts.GenSignedUrlResp
}

var GenSignedUrlResult_Success_DEFAULT *sts.GenSignedUrlResp

func (p *GenSignedUrlResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.GenSignedUrlResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GenSignedUrlResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GenSignedUrlResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GenSignedUrlResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GenSignedUrlResult) Unmarshal(in []byte) error {
	msg := new(sts.GenSignedUrlResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GenSignedUrlResult) GetSuccess() *sts.GenSignedUrlResp {
	if !p.IsSetSuccess() {
		return GenSignedUrlResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GenSignedUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.GenSignedUrlResp)
}

func (p *GenSignedUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenSignedUrlResult) GetResult() interface{} {
	return p.Success
}

func deleteObjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.DeleteObjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).DeleteObject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteObjectArgs:
		success, err := handler.(sts.StsService).DeleteObject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteObjectResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteObjectArgs() interface{} {
	return &DeleteObjectArgs{}
}

func newDeleteObjectResult() interface{} {
	return &DeleteObjectResult{}
}

type DeleteObjectArgs struct {
	Req *sts.DeleteObjectReq
}

func (p *DeleteObjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.DeleteObjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteObjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteObjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteObjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteObjectArgs) Unmarshal(in []byte) error {
	msg := new(sts.DeleteObjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteObjectArgs_Req_DEFAULT *sts.DeleteObjectReq

func (p *DeleteObjectArgs) GetReq() *sts.DeleteObjectReq {
	if !p.IsSetReq() {
		return DeleteObjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteObjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteObjectResult struct {
	Success *sts.DeleteObjectResp
}

var DeleteObjectResult_Success_DEFAULT *sts.DeleteObjectResp

func (p *DeleteObjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.DeleteObjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteObjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteObjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteObjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteObjectResult) Unmarshal(in []byte) error {
	msg := new(sts.DeleteObjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteObjectResult) GetSuccess() *sts.DeleteObjectResp {
	if !p.IsSetSuccess() {
		return DeleteObjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.DeleteObjectResp)
}

func (p *DeleteObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteObjectResult) GetResult() interface{} {
	return p.Success
}

func textCheckHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.TextCheckReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).TextCheck(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *TextCheckArgs:
		success, err := handler.(sts.StsService).TextCheck(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*TextCheckResult)
		realResult.Success = success
	}
	return nil
}
func newTextCheckArgs() interface{} {
	return &TextCheckArgs{}
}

func newTextCheckResult() interface{} {
	return &TextCheckResult{}
}

type TextCheckArgs struct {
	Req *sts.TextCheckReq
}

func (p *TextCheckArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.TextCheckReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *TextCheckArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *TextCheckArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *TextCheckArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *TextCheckArgs) Unmarshal(in []byte) error {
	msg := new(sts.TextCheckReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var TextCheckArgs_Req_DEFAULT *sts.TextCheckReq

func (p *TextCheckArgs) GetReq() *sts.TextCheckReq {
	if !p.IsSetReq() {
		return TextCheckArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *TextCheckArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TextCheckArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TextCheckResult struct {
	Success *sts.TextCheckResp
}

var TextCheckResult_Success_DEFAULT *sts.TextCheckResp

func (p *TextCheckResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.TextCheckResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *TextCheckResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *TextCheckResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *TextCheckResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *TextCheckResult) Unmarshal(in []byte) error {
	msg := new(sts.TextCheckResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *TextCheckResult) GetSuccess() *sts.TextCheckResp {
	if !p.IsSetSuccess() {
		return TextCheckResult_Success_DEFAULT
	}
	return p.Success
}

func (p *TextCheckResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.TextCheckResp)
}

func (p *TextCheckResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TextCheckResult) GetResult() interface{} {
	return p.Success
}

func photoCheckHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.PhotoCheckReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).PhotoCheck(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PhotoCheckArgs:
		success, err := handler.(sts.StsService).PhotoCheck(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PhotoCheckResult)
		realResult.Success = success
	}
	return nil
}
func newPhotoCheckArgs() interface{} {
	return &PhotoCheckArgs{}
}

func newPhotoCheckResult() interface{} {
	return &PhotoCheckResult{}
}

type PhotoCheckArgs struct {
	Req *sts.PhotoCheckReq
}

func (p *PhotoCheckArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.PhotoCheckReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PhotoCheckArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PhotoCheckArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PhotoCheckArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PhotoCheckArgs) Unmarshal(in []byte) error {
	msg := new(sts.PhotoCheckReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PhotoCheckArgs_Req_DEFAULT *sts.PhotoCheckReq

func (p *PhotoCheckArgs) GetReq() *sts.PhotoCheckReq {
	if !p.IsSetReq() {
		return PhotoCheckArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PhotoCheckArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PhotoCheckArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PhotoCheckResult struct {
	Success *sts.PhotoCheckResp
}

var PhotoCheckResult_Success_DEFAULT *sts.PhotoCheckResp

func (p *PhotoCheckResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.PhotoCheckResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PhotoCheckResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PhotoCheckResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PhotoCheckResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PhotoCheckResult) Unmarshal(in []byte) error {
	msg := new(sts.PhotoCheckResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PhotoCheckResult) GetSuccess() *sts.PhotoCheckResp {
	if !p.IsSetSuccess() {
		return PhotoCheckResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PhotoCheckResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.PhotoCheckResp)
}

func (p *PhotoCheckResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PhotoCheckResult) GetResult() interface{} {
	return p.Success
}

func signInHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.SignInReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).SignIn(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SignInArgs:
		success, err := handler.(sts.StsService).SignIn(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SignInResult)
		realResult.Success = success
	}
	return nil
}
func newSignInArgs() interface{} {
	return &SignInArgs{}
}

func newSignInResult() interface{} {
	return &SignInResult{}
}

type SignInArgs struct {
	Req *sts.SignInReq
}

func (p *SignInArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.SignInReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SignInArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SignInArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SignInArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SignInArgs) Unmarshal(in []byte) error {
	msg := new(sts.SignInReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SignInArgs_Req_DEFAULT *sts.SignInReq

func (p *SignInArgs) GetReq() *sts.SignInReq {
	if !p.IsSetReq() {
		return SignInArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SignInArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SignInArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SignInResult struct {
	Success *sts.SignInResp
}

var SignInResult_Success_DEFAULT *sts.SignInResp

func (p *SignInResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.SignInResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SignInResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SignInResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SignInResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SignInResult) Unmarshal(in []byte) error {
	msg := new(sts.SignInResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SignInResult) GetSuccess() *sts.SignInResp {
	if !p.IsSetSuccess() {
		return SignInResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SignInResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.SignInResp)
}

func (p *SignInResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SignInResult) GetResult() interface{} {
	return p.Success
}

func setPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.SetPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).SetPassword(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SetPasswordArgs:
		success, err := handler.(sts.StsService).SetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetPasswordResult)
		realResult.Success = success
	}
	return nil
}
func newSetPasswordArgs() interface{} {
	return &SetPasswordArgs{}
}

func newSetPasswordResult() interface{} {
	return &SetPasswordResult{}
}

type SetPasswordArgs struct {
	Req *sts.SetPasswordReq
}

func (p *SetPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.SetPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(sts.SetPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetPasswordArgs_Req_DEFAULT *sts.SetPasswordReq

func (p *SetPasswordArgs) GetReq() *sts.SetPasswordReq {
	if !p.IsSetReq() {
		return SetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetPasswordResult struct {
	Success *sts.SetPasswordResp
}

var SetPasswordResult_Success_DEFAULT *sts.SetPasswordResp

func (p *SetPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.SetPasswordResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetPasswordResult) Unmarshal(in []byte) error {
	msg := new(sts.SetPasswordResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetPasswordResult) GetSuccess() *sts.SetPasswordResp {
	if !p.IsSetSuccess() {
		return SetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.SetPasswordResp)
}

func (p *SetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetPasswordResult) GetResult() interface{} {
	return p.Success
}

func sendVerifyCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.SendVerifyCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).SendVerifyCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendVerifyCodeArgs:
		success, err := handler.(sts.StsService).SendVerifyCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendVerifyCodeResult)
		realResult.Success = success
	}
	return nil
}
func newSendVerifyCodeArgs() interface{} {
	return &SendVerifyCodeArgs{}
}

func newSendVerifyCodeResult() interface{} {
	return &SendVerifyCodeResult{}
}

type SendVerifyCodeArgs struct {
	Req *sts.SendVerifyCodeReq
}

func (p *SendVerifyCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.SendVerifyCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendVerifyCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendVerifyCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendVerifyCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendVerifyCodeArgs) Unmarshal(in []byte) error {
	msg := new(sts.SendVerifyCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendVerifyCodeArgs_Req_DEFAULT *sts.SendVerifyCodeReq

func (p *SendVerifyCodeArgs) GetReq() *sts.SendVerifyCodeReq {
	if !p.IsSetReq() {
		return SendVerifyCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendVerifyCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendVerifyCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendVerifyCodeResult struct {
	Success *sts.SendVerifyCodeResp
}

var SendVerifyCodeResult_Success_DEFAULT *sts.SendVerifyCodeResp

func (p *SendVerifyCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.SendVerifyCodeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendVerifyCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendVerifyCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendVerifyCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendVerifyCodeResult) Unmarshal(in []byte) error {
	msg := new(sts.SendVerifyCodeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendVerifyCodeResult) GetSuccess() *sts.SendVerifyCodeResp {
	if !p.IsSetSuccess() {
		return SendVerifyCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendVerifyCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.SendVerifyCodeResp)
}

func (p *SendVerifyCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendVerifyCodeResult) GetResult() interface{} {
	return p.Success
}

func addUserAuthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.AddUserAuthReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).AddUserAuth(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddUserAuthArgs:
		success, err := handler.(sts.StsService).AddUserAuth(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddUserAuthResult)
		realResult.Success = success
	}
	return nil
}
func newAddUserAuthArgs() interface{} {
	return &AddUserAuthArgs{}
}

func newAddUserAuthResult() interface{} {
	return &AddUserAuthResult{}
}

type AddUserAuthArgs struct {
	Req *sts.AddUserAuthReq
}

func (p *AddUserAuthArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.AddUserAuthReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddUserAuthArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddUserAuthArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddUserAuthArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddUserAuthArgs) Unmarshal(in []byte) error {
	msg := new(sts.AddUserAuthReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddUserAuthArgs_Req_DEFAULT *sts.AddUserAuthReq

func (p *AddUserAuthArgs) GetReq() *sts.AddUserAuthReq {
	if !p.IsSetReq() {
		return AddUserAuthArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddUserAuthArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddUserAuthArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddUserAuthResult struct {
	Success *sts.AddUserAuthResp
}

var AddUserAuthResult_Success_DEFAULT *sts.AddUserAuthResp

func (p *AddUserAuthResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.AddUserAuthResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddUserAuthResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddUserAuthResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddUserAuthResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddUserAuthResult) Unmarshal(in []byte) error {
	msg := new(sts.AddUserAuthResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddUserAuthResult) GetSuccess() *sts.AddUserAuthResp {
	if !p.IsSetSuccess() {
		return AddUserAuthResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddUserAuthResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.AddUserAuthResp)
}

func (p *AddUserAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddUserAuthResult) GetResult() interface{} {
	return p.Success
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.SendMessageReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).SendMessage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendMessageArgs:
		success, err := handler.(sts.StsService).SendMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendMessageResult)
		realResult.Success = success
	}
	return nil
}
func newSendMessageArgs() interface{} {
	return &SendMessageArgs{}
}

func newSendMessageResult() interface{} {
	return &SendMessageResult{}
}

type SendMessageArgs struct {
	Req *sts.SendMessageReq
}

func (p *SendMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.SendMessageReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendMessageArgs) Unmarshal(in []byte) error {
	msg := new(sts.SendMessageReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendMessageArgs_Req_DEFAULT *sts.SendMessageReq

func (p *SendMessageArgs) GetReq() *sts.SendMessageReq {
	if !p.IsSetReq() {
		return SendMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendMessageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendMessageResult struct {
	Success *sts.SendMessageResp
}

var SendMessageResult_Success_DEFAULT *sts.SendMessageResp

func (p *SendMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.SendMessageResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendMessageResult) Unmarshal(in []byte) error {
	msg := new(sts.SendMessageResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendMessageResult) GetSuccess() *sts.SendMessageResp {
	if !p.IsSetSuccess() {
		return SendMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.SendMessageResp)
}

func (p *SendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendMessageResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GenCosSts(ctx context.Context, Req *sts.GenCosStsReq) (r *sts.GenCosStsResp, err error) {
	var _args GenCosStsArgs
	_args.Req = Req
	var _result GenCosStsResult
	if err = p.c.Call(ctx, "genCosSts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GenSignedUrl(ctx context.Context, Req *sts.GenSignedUrlReq) (r *sts.GenSignedUrlResp, err error) {
	var _args GenSignedUrlArgs
	_args.Req = Req
	var _result GenSignedUrlResult
	if err = p.c.Call(ctx, "genSignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteObject(ctx context.Context, Req *sts.DeleteObjectReq) (r *sts.DeleteObjectResp, err error) {
	var _args DeleteObjectArgs
	_args.Req = Req
	var _result DeleteObjectResult
	if err = p.c.Call(ctx, "deleteObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TextCheck(ctx context.Context, Req *sts.TextCheckReq) (r *sts.TextCheckResp, err error) {
	var _args TextCheckArgs
	_args.Req = Req
	var _result TextCheckResult
	if err = p.c.Call(ctx, "textCheck", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PhotoCheck(ctx context.Context, Req *sts.PhotoCheckReq) (r *sts.PhotoCheckResp, err error) {
	var _args PhotoCheckArgs
	_args.Req = Req
	var _result PhotoCheckResult
	if err = p.c.Call(ctx, "photoCheck", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignIn(ctx context.Context, Req *sts.SignInReq) (r *sts.SignInResp, err error) {
	var _args SignInArgs
	_args.Req = Req
	var _result SignInResult
	if err = p.c.Call(ctx, "signIn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetPassword(ctx context.Context, Req *sts.SetPasswordReq) (r *sts.SetPasswordResp, err error) {
	var _args SetPasswordArgs
	_args.Req = Req
	var _result SetPasswordResult
	if err = p.c.Call(ctx, "setPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendVerifyCode(ctx context.Context, Req *sts.SendVerifyCodeReq) (r *sts.SendVerifyCodeResp, err error) {
	var _args SendVerifyCodeArgs
	_args.Req = Req
	var _result SendVerifyCodeResult
	if err = p.c.Call(ctx, "sendVerifyCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddUserAuth(ctx context.Context, Req *sts.AddUserAuthReq) (r *sts.AddUserAuthResp, err error) {
	var _args AddUserAuthArgs
	_args.Req = Req
	var _result AddUserAuthResult
	if err = p.c.Call(ctx, "AddUserAuth", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendMessage(ctx context.Context, Req *sts.SendMessageReq) (r *sts.SendMessageResp, err error) {
	var _args SendMessageArgs
	_args.Req = Req
	var _result SendMessageResult
	if err = p.c.Call(ctx, "SendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
