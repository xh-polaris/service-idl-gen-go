// Code generated by Kitex v0.6.2. DO NOT EDIT.

package stsservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	sts "github.com/xh-polaris/service-idl-gen-go/kitex_gen/platform/sts"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return stsServiceServiceInfo
}

var stsServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "StsService"
	handlerType := (*sts.StsService)(nil)
	methods := map[string]kitex.MethodInfo{
		"genCosSts":      kitex.NewMethodInfo(genCosStsHandler, newGenCosStsArgs, newGenCosStsResult, false),
		"genSignedUrl":   kitex.NewMethodInfo(genSignedUrlHandler, newGenSignedUrlArgs, newGenSignedUrlResult, false),
		"deleteObject":   kitex.NewMethodInfo(deleteObjectHandler, newDeleteObjectArgs, newDeleteObjectResult, false),
		"GetAccessToken": kitex.NewMethodInfo(getAccessTokenHandler, newGetAccessTokenArgs, newGetAccessTokenResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "platform.sts",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func genCosStsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.GenCosStsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).GenCosSts(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GenCosStsArgs:
		success, err := handler.(sts.StsService).GenCosSts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GenCosStsResult)
		realResult.Success = success
	}
	return nil
}
func newGenCosStsArgs() interface{} {
	return &GenCosStsArgs{}
}

func newGenCosStsResult() interface{} {
	return &GenCosStsResult{}
}

type GenCosStsArgs struct {
	Req *sts.GenCosStsReq
}

func (p *GenCosStsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.GenCosStsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GenCosStsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GenCosStsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GenCosStsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GenCosStsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GenCosStsArgs) Unmarshal(in []byte) error {
	msg := new(sts.GenCosStsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GenCosStsArgs_Req_DEFAULT *sts.GenCosStsReq

func (p *GenCosStsArgs) GetReq() *sts.GenCosStsReq {
	if !p.IsSetReq() {
		return GenCosStsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GenCosStsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenCosStsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GenCosStsResult struct {
	Success *sts.GenCosStsResp
}

var GenCosStsResult_Success_DEFAULT *sts.GenCosStsResp

func (p *GenCosStsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.GenCosStsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GenCosStsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GenCosStsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GenCosStsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GenCosStsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GenCosStsResult) Unmarshal(in []byte) error {
	msg := new(sts.GenCosStsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GenCosStsResult) GetSuccess() *sts.GenCosStsResp {
	if !p.IsSetSuccess() {
		return GenCosStsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GenCosStsResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.GenCosStsResp)
}

func (p *GenCosStsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenCosStsResult) GetResult() interface{} {
	return p.Success
}

func genSignedUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.GenSignedUrlReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).GenSignedUrl(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GenSignedUrlArgs:
		success, err := handler.(sts.StsService).GenSignedUrl(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GenSignedUrlResult)
		realResult.Success = success
	}
	return nil
}
func newGenSignedUrlArgs() interface{} {
	return &GenSignedUrlArgs{}
}

func newGenSignedUrlResult() interface{} {
	return &GenSignedUrlResult{}
}

type GenSignedUrlArgs struct {
	Req *sts.GenSignedUrlReq
}

func (p *GenSignedUrlArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.GenSignedUrlReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GenSignedUrlArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GenSignedUrlArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GenSignedUrlArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GenSignedUrlArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GenSignedUrlArgs) Unmarshal(in []byte) error {
	msg := new(sts.GenSignedUrlReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GenSignedUrlArgs_Req_DEFAULT *sts.GenSignedUrlReq

func (p *GenSignedUrlArgs) GetReq() *sts.GenSignedUrlReq {
	if !p.IsSetReq() {
		return GenSignedUrlArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GenSignedUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenSignedUrlArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GenSignedUrlResult struct {
	Success *sts.GenSignedUrlResp
}

var GenSignedUrlResult_Success_DEFAULT *sts.GenSignedUrlResp

func (p *GenSignedUrlResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.GenSignedUrlResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GenSignedUrlResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GenSignedUrlResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GenSignedUrlResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GenSignedUrlResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GenSignedUrlResult) Unmarshal(in []byte) error {
	msg := new(sts.GenSignedUrlResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GenSignedUrlResult) GetSuccess() *sts.GenSignedUrlResp {
	if !p.IsSetSuccess() {
		return GenSignedUrlResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GenSignedUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.GenSignedUrlResp)
}

func (p *GenSignedUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenSignedUrlResult) GetResult() interface{} {
	return p.Success
}

func deleteObjectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.DeleteObjectReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).DeleteObject(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteObjectArgs:
		success, err := handler.(sts.StsService).DeleteObject(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteObjectResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteObjectArgs() interface{} {
	return &DeleteObjectArgs{}
}

func newDeleteObjectResult() interface{} {
	return &DeleteObjectResult{}
}

type DeleteObjectArgs struct {
	Req *sts.DeleteObjectReq
}

func (p *DeleteObjectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.DeleteObjectReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteObjectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteObjectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteObjectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteObjectArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteObjectArgs) Unmarshal(in []byte) error {
	msg := new(sts.DeleteObjectReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteObjectArgs_Req_DEFAULT *sts.DeleteObjectReq

func (p *DeleteObjectArgs) GetReq() *sts.DeleteObjectReq {
	if !p.IsSetReq() {
		return DeleteObjectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteObjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteObjectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteObjectResult struct {
	Success *sts.DeleteObjectResp
}

var DeleteObjectResult_Success_DEFAULT *sts.DeleteObjectResp

func (p *DeleteObjectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.DeleteObjectResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteObjectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteObjectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteObjectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteObjectResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteObjectResult) Unmarshal(in []byte) error {
	msg := new(sts.DeleteObjectResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteObjectResult) GetSuccess() *sts.DeleteObjectResp {
	if !p.IsSetSuccess() {
		return DeleteObjectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteObjectResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.DeleteObjectResp)
}

func (p *DeleteObjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteObjectResult) GetResult() interface{} {
	return p.Success
}

func getAccessTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sts.GetAccessTokenReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sts.StsService).GetAccessToken(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetAccessTokenArgs:
		success, err := handler.(sts.StsService).GetAccessToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAccessTokenResult)
		realResult.Success = success
	}
	return nil
}
func newGetAccessTokenArgs() interface{} {
	return &GetAccessTokenArgs{}
}

func newGetAccessTokenResult() interface{} {
	return &GetAccessTokenResult{}
}

type GetAccessTokenArgs struct {
	Req *sts.GetAccessTokenReq
}

func (p *GetAccessTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(sts.GetAccessTokenReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAccessTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAccessTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAccessTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAccessTokenArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAccessTokenArgs) Unmarshal(in []byte) error {
	msg := new(sts.GetAccessTokenReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAccessTokenArgs_Req_DEFAULT *sts.GetAccessTokenReq

func (p *GetAccessTokenArgs) GetReq() *sts.GetAccessTokenReq {
	if !p.IsSetReq() {
		return GetAccessTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAccessTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAccessTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAccessTokenResult struct {
	Success *sts.GetAccessTokenResp
}

var GetAccessTokenResult_Success_DEFAULT *sts.GetAccessTokenResp

func (p *GetAccessTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(sts.GetAccessTokenResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAccessTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAccessTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAccessTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAccessTokenResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAccessTokenResult) Unmarshal(in []byte) error {
	msg := new(sts.GetAccessTokenResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAccessTokenResult) GetSuccess() *sts.GetAccessTokenResp {
	if !p.IsSetSuccess() {
		return GetAccessTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAccessTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*sts.GetAccessTokenResp)
}

func (p *GetAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAccessTokenResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GenCosSts(ctx context.Context, Req *sts.GenCosStsReq) (r *sts.GenCosStsResp, err error) {
	var _args GenCosStsArgs
	_args.Req = Req
	var _result GenCosStsResult
	if err = p.c.Call(ctx, "genCosSts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GenSignedUrl(ctx context.Context, Req *sts.GenSignedUrlReq) (r *sts.GenSignedUrlResp, err error) {
	var _args GenSignedUrlArgs
	_args.Req = Req
	var _result GenSignedUrlResult
	if err = p.c.Call(ctx, "genSignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteObject(ctx context.Context, Req *sts.DeleteObjectReq) (r *sts.DeleteObjectResp, err error) {
	var _args DeleteObjectArgs
	_args.Req = Req
	var _result DeleteObjectResult
	if err = p.c.Call(ctx, "deleteObject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAccessToken(ctx context.Context, Req *sts.GetAccessTokenReq) (r *sts.GetAccessTokenResp, err error) {
	var _args GetAccessTokenArgs
	_args.Req = Req
	var _result GetAccessTokenResult
	if err = p.c.Call(ctx, "GetAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
