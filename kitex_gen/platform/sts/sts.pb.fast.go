// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package sts

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *GenCosStsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenCosStsReq[number], err)
}

func (x *GenCosStsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenCosStsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenCosStsResp[number], err)
}

func (x *GenCosStsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SecretId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenCosStsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SecretKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenCosStsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SessionToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenCosStsResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ExpiredTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GenCosStsResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GenSignedUrlReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenSignedUrlReq[number], err)
}

func (x *GenSignedUrlReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SecretId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenSignedUrlReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SecretKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenSignedUrlReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Method, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenSignedUrlReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenSignedUrlResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenSignedUrlResp[number], err)
}

func (x *GenSignedUrlResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SignedUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteObjectReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteObjectReq[number], err)
}

func (x *DeleteObjectReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteObjectResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetAccessTokenReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAccessTokenReq[number], err)
}

func (x *GetAccessTokenReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.App, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAccessTokenResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAccessTokenResp[number], err)
}

func (x *GetAccessTokenResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAccessTokenResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ExpiresIn, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GenCosStsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GenCosStsReq) fastWriteField1(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPath())
	return offset
}

func (x *GenCosStsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GenCosStsResp) fastWriteField1(buf []byte) (offset int) {
	if x.SecretId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSecretId())
	return offset
}

func (x *GenCosStsResp) fastWriteField2(buf []byte) (offset int) {
	if x.SecretKey == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSecretKey())
	return offset
}

func (x *GenCosStsResp) fastWriteField3(buf []byte) (offset int) {
	if x.SessionToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSessionToken())
	return offset
}

func (x *GenCosStsResp) fastWriteField4(buf []byte) (offset int) {
	if x.ExpiredTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetExpiredTime())
	return offset
}

func (x *GenCosStsResp) fastWriteField5(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetStartTime())
	return offset
}

func (x *GenSignedUrlReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GenSignedUrlReq) fastWriteField1(buf []byte) (offset int) {
	if x.SecretId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSecretId())
	return offset
}

func (x *GenSignedUrlReq) fastWriteField2(buf []byte) (offset int) {
	if x.SecretKey == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSecretKey())
	return offset
}

func (x *GenSignedUrlReq) fastWriteField3(buf []byte) (offset int) {
	if x.Method == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMethod())
	return offset
}

func (x *GenSignedUrlReq) fastWriteField4(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPath())
	return offset
}

func (x *GenSignedUrlResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GenSignedUrlResp) fastWriteField1(buf []byte) (offset int) {
	if x.SignedUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSignedUrl())
	return offset
}

func (x *DeleteObjectReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteObjectReq) fastWriteField1(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPath())
	return offset
}

func (x *DeleteObjectResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetAccessTokenReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAccessTokenReq) fastWriteField1(buf []byte) (offset int) {
	if x.App == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetApp())
	return offset
}

func (x *GetAccessTokenResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAccessTokenResp) fastWriteField1(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken())
	return offset
}

func (x *GetAccessTokenResp) fastWriteField2(buf []byte) (offset int) {
	if x.ExpiresIn == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetExpiresIn())
	return offset
}

func (x *GenCosStsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GenCosStsReq) sizeField1() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPath())
	return n
}

func (x *GenCosStsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GenCosStsResp) sizeField1() (n int) {
	if x.SecretId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSecretId())
	return n
}

func (x *GenCosStsResp) sizeField2() (n int) {
	if x.SecretKey == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSecretKey())
	return n
}

func (x *GenCosStsResp) sizeField3() (n int) {
	if x.SessionToken == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSessionToken())
	return n
}

func (x *GenCosStsResp) sizeField4() (n int) {
	if x.ExpiredTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetExpiredTime())
	return n
}

func (x *GenCosStsResp) sizeField5() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetStartTime())
	return n
}

func (x *GenSignedUrlReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GenSignedUrlReq) sizeField1() (n int) {
	if x.SecretId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSecretId())
	return n
}

func (x *GenSignedUrlReq) sizeField2() (n int) {
	if x.SecretKey == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSecretKey())
	return n
}

func (x *GenSignedUrlReq) sizeField3() (n int) {
	if x.Method == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMethod())
	return n
}

func (x *GenSignedUrlReq) sizeField4() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPath())
	return n
}

func (x *GenSignedUrlResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GenSignedUrlResp) sizeField1() (n int) {
	if x.SignedUrl == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSignedUrl())
	return n
}

func (x *DeleteObjectReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteObjectReq) sizeField1() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPath())
	return n
}

func (x *DeleteObjectResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetAccessTokenReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAccessTokenReq) sizeField1() (n int) {
	if x.App == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetApp())
	return n
}

func (x *GetAccessTokenResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAccessTokenResp) sizeField1() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAccessToken())
	return n
}

func (x *GetAccessTokenResp) sizeField2() (n int) {
	if x.ExpiresIn == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetExpiresIn())
	return n
}

var fieldIDToName_GenCosStsReq = map[int32]string{
	1: "Path",
}

var fieldIDToName_GenCosStsResp = map[int32]string{
	1: "SecretId",
	2: "SecretKey",
	3: "SessionToken",
	4: "ExpiredTime",
	5: "StartTime",
}

var fieldIDToName_GenSignedUrlReq = map[int32]string{
	1: "SecretId",
	2: "SecretKey",
	3: "Method",
	4: "Path",
}

var fieldIDToName_GenSignedUrlResp = map[int32]string{
	1: "SignedUrl",
}

var fieldIDToName_DeleteObjectReq = map[int32]string{
	1: "Path",
}

var fieldIDToName_DeleteObjectResp = map[int32]string{}

var fieldIDToName_GetAccessTokenReq = map[int32]string{
	1: "App",
}

var fieldIDToName_GetAccessTokenResp = map[int32]string{
	1: "AccessToken",
	2: "ExpiresIn",
}
