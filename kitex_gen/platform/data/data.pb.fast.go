// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package data

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *InsertReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_InsertReq[number], err)
}

func (x *InsertReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.EventName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *InsertReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.Tags == nil {
		x.Tags = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Tags[key] = value
	return offset, nil
}

func (x *InsertResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_InsertResp[number], err)
}

func (x *InsertResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *InsertReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *InsertReq) fastWriteField1(buf []byte) (offset int) {
	if x.EventName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEventName())
	return offset
}

func (x *InsertReq) fastWriteField2(buf []byte) (offset int) {
	if x.Tags == nil {
		return offset
	}
	for k, v := range x.GetTags() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *InsertResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *InsertResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *InsertReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *InsertReq) sizeField1() (n int) {
	if x.EventName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEventName())
	return n
}

func (x *InsertReq) sizeField2() (n int) {
	if x.Tags == nil {
		return n
	}
	for k, v := range x.GetTags() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *InsertResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *InsertResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

var fieldIDToName_InsertReq = map[int32]string{
	1: "EventName",
	2: "Tags",
}

var fieldIDToName_InsertResp = map[int32]string{
	1: "Done",
}
