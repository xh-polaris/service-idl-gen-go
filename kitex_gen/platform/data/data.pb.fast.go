// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package data

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Document) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Document[number], err)
}

func (x *Document) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.EventName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Document) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Tags, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *InsertReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_InsertReq[number], err)
}

func (x *InsertReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Document
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Documents = append(x.Documents, &v)
	return offset, nil
}

func (x *InsertResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_InsertResp[number], err)
}

func (x *InsertResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Document) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Document) fastWriteField1(buf []byte) (offset int) {
	if x.EventName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEventName())
	return offset
}

func (x *Document) fastWriteField2(buf []byte) (offset int) {
	if x.Tags == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTags())
	return offset
}

func (x *InsertReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *InsertReq) fastWriteField1(buf []byte) (offset int) {
	if x.Documents == nil {
		return offset
	}
	for i := range x.GetDocuments() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetDocuments()[i])
	}
	return offset
}

func (x *InsertResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *InsertResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *Document) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Document) sizeField1() (n int) {
	if x.EventName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEventName())
	return n
}

func (x *Document) sizeField2() (n int) {
	if x.Tags == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTags())
	return n
}

func (x *InsertReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *InsertReq) sizeField1() (n int) {
	if x.Documents == nil {
		return n
	}
	for i := range x.GetDocuments() {
		n += fastpb.SizeMessage(1, x.GetDocuments()[i])
	}
	return n
}

func (x *InsertResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *InsertResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

var fieldIDToName_Document = map[int32]string{
	1: "EventName",
	2: "Tags",
}

var fieldIDToName_InsertReq = map[int32]string{
	1: "Documents",
}

var fieldIDToName_InsertResp = map[int32]string{
	1: "Done",
}
