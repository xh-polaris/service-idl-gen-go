// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	http "github.com/xh-polaris/service-idl-gen-go/kitex_gen/http"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *InsertItem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_InsertItem[number], err)
}

func (x *InsertItem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.EventName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *InsertItem) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.Tags == nil {
		x.Tags = make(map[string]*anypb.Any)
	}
	var key string
	var value *anypb.Any
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v anypb.Any
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.Tags[key] = value
	return offset, nil
}

func (x *InsertRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_InsertRequest[number], err)
}

func (x *InsertRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v InsertItem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = append(x.Data, &v)
	return offset, nil
}

func (x *InsertResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_InsertResponse[number], err)
}

func (x *InsertResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *InsertItem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *InsertItem) fastWriteField1(buf []byte) (offset int) {
	if x.EventName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEventName())
	return offset
}

func (x *InsertItem) fastWriteField2(buf []byte) (offset int) {
	if x.Tags == nil {
		return offset
	}
	for k, v := range x.GetTags() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *InsertRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *InsertRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	for i := range x.GetData() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetData()[i])
	}
	return offset
}

func (x *InsertResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *InsertResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *InsertItem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *InsertItem) sizeField1() (n int) {
	if x.EventName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEventName())
	return n
}

func (x *InsertItem) sizeField2() (n int) {
	if x.Tags == nil {
		return n
	}
	for k, v := range x.GetTags() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *InsertRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *InsertRequest) sizeField1() (n int) {
	if x.Data == nil {
		return n
	}
	for i := range x.GetData() {
		n += fastpb.SizeMessage(1, x.GetData()[i])
	}
	return n
}

func (x *InsertResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *InsertResponse) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

var fieldIDToName_InsertItem = map[int32]string{
	1: "EventName",
	2: "Tags",
}

var fieldIDToName_InsertRequest = map[int32]string{
	1: "Data",
}

var fieldIDToName_InsertResponse = map[int32]string{
	1: "Done",
}

var _ = anypb.File_google_protobuf_any_proto
var _ = http.File_http_http_proto
