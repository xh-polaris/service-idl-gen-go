// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	http "github.com/xh-polaris/service-idl-gen-go/kitex_gen/http"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *ReportEventItem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReportEventItem[number], err)
}

func (x *ReportEventItem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.EventName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ReportEventItem) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Tags, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ReportEventRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReportEventRequest[number], err)
}

func (x *ReportEventRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ReportEventItem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Data = append(x.Data, &v)
	return offset, nil
}

func (x *ReportEventResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReportEventResponse[number], err)
}

func (x *ReportEventResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ReportEventItem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ReportEventItem) fastWriteField1(buf []byte) (offset int) {
	if x.EventName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEventName())
	return offset
}

func (x *ReportEventItem) fastWriteField2(buf []byte) (offset int) {
	if x.Tags == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTags())
	return offset
}

func (x *ReportEventRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ReportEventRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Data == nil {
		return offset
	}
	for i := range x.GetData() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetData()[i])
	}
	return offset
}

func (x *ReportEventResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ReportEventResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *ReportEventItem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ReportEventItem) sizeField1() (n int) {
	if x.EventName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEventName())
	return n
}

func (x *ReportEventItem) sizeField2() (n int) {
	if x.Tags == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTags())
	return n
}

func (x *ReportEventRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ReportEventRequest) sizeField1() (n int) {
	if x.Data == nil {
		return n
	}
	for i := range x.GetData() {
		n += fastpb.SizeMessage(1, x.GetData()[i])
	}
	return n
}

func (x *ReportEventResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ReportEventResponse) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

var fieldIDToName_ReportEventItem = map[int32]string{
	1: "EventName",
	2: "Tags",
}

var fieldIDToName_ReportEventRequest = map[int32]string{
	1: "Data",
}

var fieldIDToName_ReportEventResponse = map[int32]string{
	1: "Done",
}

var _ = http.File_http_http_proto
