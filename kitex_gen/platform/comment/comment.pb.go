// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: platform/comment/comment.proto

package comment

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string      `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	FirstLevelId string      `protobuf:"bytes,2,opt,name=firstLevelId,proto3" json:"firstLevelId,omitempty"`
	AuthorId     string      `protobuf:"bytes,3,opt,name=authorId,proto3" json:"authorId,omitempty"`
	ReplyTo      string      `protobuf:"bytes,4,opt,name=replyTo,proto3" json:"replyTo,omitempty"`
	Type         CommentType `protobuf:"varint,5,opt,name=type,proto3,enum=platform.comment.CommentType" json:"type,omitempty"`
	ParentId     string      `protobuf:"bytes,6,opt,name=parentId,proto3" json:"parentId,omitempty"`
}

func (x *CreateCommentReq) Reset() {
	*x = CreateCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentReq) ProtoMessage() {}

func (x *CreateCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentReq.ProtoReflect.Descriptor instead.
func (*CreateCommentReq) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCommentReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CreateCommentReq) GetFirstLevelId() string {
	if x != nil {
		return x.FirstLevelId
	}
	return ""
}

func (x *CreateCommentReq) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *CreateCommentReq) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *CreateCommentReq) GetType() CommentType {
	if x != nil {
		return x.Type
	}
	return CommentType_CommentType_Unknown
}

func (x *CreateCommentReq) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type CreateCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GetFish      bool   `protobuf:"varint,2,opt,name=getFish,proto3" json:"getFish,omitempty"`
	GetFishTimes int64  `protobuf:"varint,3,opt,name=getFishTimes,proto3" json:"getFishTimes,omitempty"`
}

func (x *CreateCommentResp) Reset() {
	*x = CreateCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentResp) ProtoMessage() {}

func (x *CreateCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentResp.ProtoReflect.Descriptor instead.
func (*CreateCommentResp) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCommentResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateCommentResp) GetGetFish() bool {
	if x != nil {
		return x.GetFish
	}
	return false
}

func (x *CreateCommentResp) GetGetFishTimes() int64 {
	if x != nil {
		return x.GetFishTimes
	}
	return 0
}

type UpdateCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *UpdateCommentReq) Reset() {
	*x = UpdateCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentReq) ProtoMessage() {}

func (x *UpdateCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentReq.ProtoReflect.Descriptor instead.
func (*UpdateCommentReq) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateCommentReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCommentReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type UpdateCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCommentResp) Reset() {
	*x = UpdateCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentResp) ProtoMessage() {}

func (x *UpdateCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentResp.ProtoReflect.Descriptor instead.
func (*UpdateCommentResp) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{3}
}

// 根据 Id 删除评论
type DeleteCommentByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCommentByIdReq) Reset() {
	*x = DeleteCommentByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentByIdReq) ProtoMessage() {}

func (x *DeleteCommentByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentByIdReq.ProtoReflect.Descriptor instead.
func (*DeleteCommentByIdReq) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteCommentByIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCommentByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCommentByIdResp) Reset() {
	*x = DeleteCommentByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentByIdResp) ProtoMessage() {}

func (x *DeleteCommentByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentByIdResp.ProtoReflect.Descriptor instead.
func (*DeleteCommentByIdResp) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{5}
}

type ListCommentByParentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           CommentType `protobuf:"varint,1,opt,name=type,proto3,enum=platform.comment.CommentType" json:"type,omitempty"`
	Id             string      `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Skip           int64       `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit          int64       `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	OnlyFirstLevel *bool       `protobuf:"varint,5,opt,name=onlyFirstLevel,proto3,oneof" json:"onlyFirstLevel,omitempty"` // 只加载一级评论
}

func (x *ListCommentByParentReq) Reset() {
	*x = ListCommentByParentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentByParentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentByParentReq) ProtoMessage() {}

func (x *ListCommentByParentReq) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentByParentReq.ProtoReflect.Descriptor instead.
func (*ListCommentByParentReq) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{6}
}

func (x *ListCommentByParentReq) GetType() CommentType {
	if x != nil {
		return x.Type
	}
	return CommentType_CommentType_Unknown
}

func (x *ListCommentByParentReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListCommentByParentReq) GetSkip() int64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ListCommentByParentReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListCommentByParentReq) GetOnlyFirstLevel() bool {
	if x != nil && x.OnlyFirstLevel != nil {
		return *x.OnlyFirstLevel
	}
	return false
}

type ListCommentByParentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	Total    int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListCommentByParentResp) Reset() {
	*x = ListCommentByParentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentByParentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentByParentResp) ProtoMessage() {}

func (x *ListCommentByParentResp) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentByParentResp.ProtoReflect.Descriptor instead.
func (*ListCommentByParentResp) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{7}
}

func (x *ListCommentByParentResp) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ListCommentByParentResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CountCommentByParentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           CommentType `protobuf:"varint,1,opt,name=type,proto3,enum=platform.comment.CommentType" json:"type,omitempty"`
	ParentId       string      `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	OnlyFirstLevel *bool       `protobuf:"varint,3,opt,name=onlyFirstLevel,proto3,oneof" json:"onlyFirstLevel,omitempty"`
}

func (x *CountCommentByParentReq) Reset() {
	*x = CountCommentByParentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCommentByParentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCommentByParentReq) ProtoMessage() {}

func (x *CountCommentByParentReq) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCommentByParentReq.ProtoReflect.Descriptor instead.
func (*CountCommentByParentReq) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{8}
}

func (x *CountCommentByParentReq) GetType() CommentType {
	if x != nil {
		return x.Type
	}
	return CommentType_CommentType_Unknown
}

func (x *CountCommentByParentReq) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CountCommentByParentReq) GetOnlyFirstLevel() bool {
	if x != nil && x.OnlyFirstLevel != nil {
		return *x.OnlyFirstLevel
	}
	return false
}

type CountCommentByParentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CountCommentByParentResp) Reset() {
	*x = CountCommentByParentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCommentByParentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCommentByParentResp) ProtoMessage() {}

func (x *CountCommentByParentResp) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCommentByParentResp.ProtoReflect.Descriptor instead.
func (*CountCommentByParentResp) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{9}
}

func (x *CountCommentByParentResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RetrieveCommentByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RetrieveCommentByIdReq) Reset() {
	*x = RetrieveCommentByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveCommentByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveCommentByIdReq) ProtoMessage() {}

func (x *RetrieveCommentByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveCommentByIdReq.ProtoReflect.Descriptor instead.
func (*RetrieveCommentByIdReq) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{10}
}

func (x *RetrieveCommentByIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RetrieveCommentByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RetrieveCommentByIdResp) Reset() {
	*x = RetrieveCommentByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveCommentByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveCommentByIdResp) ProtoMessage() {}

func (x *RetrieveCommentByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveCommentByIdResp.ProtoReflect.Descriptor instead.
func (*RetrieveCommentByIdResp) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{11}
}

func (x *RetrieveCommentByIdResp) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type ListCommentByAuthorIdAndTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorId string      `protobuf:"bytes,1,opt,name=authorId,proto3" json:"authorId,omitempty"`
	Type     CommentType `protobuf:"varint,2,opt,name=type,proto3,enum=platform.comment.CommentType" json:"type,omitempty"`
	Skip     int64       `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit    int64       `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListCommentByAuthorIdAndTypeReq) Reset() {
	*x = ListCommentByAuthorIdAndTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentByAuthorIdAndTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentByAuthorIdAndTypeReq) ProtoMessage() {}

func (x *ListCommentByAuthorIdAndTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentByAuthorIdAndTypeReq.ProtoReflect.Descriptor instead.
func (*ListCommentByAuthorIdAndTypeReq) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{12}
}

func (x *ListCommentByAuthorIdAndTypeReq) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *ListCommentByAuthorIdAndTypeReq) GetType() CommentType {
	if x != nil {
		return x.Type
	}
	return CommentType_CommentType_Unknown
}

func (x *ListCommentByAuthorIdAndTypeReq) GetSkip() int64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ListCommentByAuthorIdAndTypeReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListCommentByAuthorIdAndTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	Total    int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListCommentByAuthorIdAndTypeResp) Reset() {
	*x = ListCommentByAuthorIdAndTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentByAuthorIdAndTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentByAuthorIdAndTypeResp) ProtoMessage() {}

func (x *ListCommentByAuthorIdAndTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentByAuthorIdAndTypeResp.ProtoReflect.Descriptor instead.
func (*ListCommentByAuthorIdAndTypeResp) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{13}
}

func (x *ListCommentByAuthorIdAndTypeResp) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ListCommentByAuthorIdAndTypeResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListCommentByReplyToAndTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyTo string      `protobuf:"bytes,1,opt,name=replyTo,proto3" json:"replyTo,omitempty"`
	Type    CommentType `protobuf:"varint,2,opt,name=type,proto3,enum=platform.comment.CommentType" json:"type,omitempty"`
	Skip    int64       `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit   int64       `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListCommentByReplyToAndTypeReq) Reset() {
	*x = ListCommentByReplyToAndTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentByReplyToAndTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentByReplyToAndTypeReq) ProtoMessage() {}

func (x *ListCommentByReplyToAndTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentByReplyToAndTypeReq.ProtoReflect.Descriptor instead.
func (*ListCommentByReplyToAndTypeReq) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{14}
}

func (x *ListCommentByReplyToAndTypeReq) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *ListCommentByReplyToAndTypeReq) GetType() CommentType {
	if x != nil {
		return x.Type
	}
	return CommentType_CommentType_Unknown
}

func (x *ListCommentByReplyToAndTypeReq) GetSkip() int64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ListCommentByReplyToAndTypeReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListCommentByReplyToAndTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	Total    int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListCommentByReplyToAndTypeResp) Reset() {
	*x = ListCommentByReplyToAndTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_comment_comment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentByReplyToAndTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentByReplyToAndTypeResp) ProtoMessage() {}

func (x *ListCommentByReplyToAndTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_platform_comment_comment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentByReplyToAndTypeResp.ProtoReflect.Descriptor instead.
func (*ListCommentByReplyToAndTypeResp) Descriptor() ([]byte, []int) {
	return file_platform_comment_comment_proto_rawDescGZIP(), []int{15}
}

func (x *ListCommentByReplyToAndTypeResp) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ListCommentByReplyToAndTypeResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_platform_comment_comment_proto protoreflect.FileDescriptor

var file_platform_comment_comment_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x1d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xcf, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x46,
	0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x65, 0x74, 0x46, 0x69,
	0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x46, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x46, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x13,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xc5, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x0e,
	0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x66, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x30, 0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x28, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x17, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x1f,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6f, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x6e, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x32, 0xfa, 0x06, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x58, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x13,
	0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x28,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x82, 0x01, 0x0a, 0x1b,
	0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x42, 0x7c, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x68, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x73, 0x2e, 0x69, 0x64, 0x6c, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x68, 0x2d, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x6c, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x67, 0x6f, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_platform_comment_comment_proto_rawDescOnce sync.Once
	file_platform_comment_comment_proto_rawDescData = file_platform_comment_comment_proto_rawDesc
)

func file_platform_comment_comment_proto_rawDescGZIP() []byte {
	file_platform_comment_comment_proto_rawDescOnce.Do(func() {
		file_platform_comment_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_comment_comment_proto_rawDescData)
	})
	return file_platform_comment_comment_proto_rawDescData
}

var file_platform_comment_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_platform_comment_comment_proto_goTypes = []interface{}{
	(*CreateCommentReq)(nil),                 // 0: platform.comment.CreateCommentReq
	(*CreateCommentResp)(nil),                // 1: platform.comment.CreateCommentResp
	(*UpdateCommentReq)(nil),                 // 2: platform.comment.UpdateCommentReq
	(*UpdateCommentResp)(nil),                // 3: platform.comment.UpdateCommentResp
	(*DeleteCommentByIdReq)(nil),             // 4: platform.comment.DeleteCommentByIdReq
	(*DeleteCommentByIdResp)(nil),            // 5: platform.comment.DeleteCommentByIdResp
	(*ListCommentByParentReq)(nil),           // 6: platform.comment.ListCommentByParentReq
	(*ListCommentByParentResp)(nil),          // 7: platform.comment.ListCommentByParentResp
	(*CountCommentByParentReq)(nil),          // 8: platform.comment.CountCommentByParentReq
	(*CountCommentByParentResp)(nil),         // 9: platform.comment.CountCommentByParentResp
	(*RetrieveCommentByIdReq)(nil),           // 10: platform.comment.RetrieveCommentByIdReq
	(*RetrieveCommentByIdResp)(nil),          // 11: platform.comment.RetrieveCommentByIdResp
	(*ListCommentByAuthorIdAndTypeReq)(nil),  // 12: platform.comment.ListCommentByAuthorIdAndTypeReq
	(*ListCommentByAuthorIdAndTypeResp)(nil), // 13: platform.comment.ListCommentByAuthorIdAndTypeResp
	(*ListCommentByReplyToAndTypeReq)(nil),   // 14: platform.comment.ListCommentByReplyToAndTypeReq
	(*ListCommentByReplyToAndTypeResp)(nil),  // 15: platform.comment.ListCommentByReplyToAndTypeResp
	(CommentType)(0),                         // 16: platform.comment.CommentType
	(*Comment)(nil),                          // 17: platform.comment.Comment
}
var file_platform_comment_comment_proto_depIdxs = []int32{
	16, // 0: platform.comment.CreateCommentReq.type:type_name -> platform.comment.CommentType
	16, // 1: platform.comment.ListCommentByParentReq.type:type_name -> platform.comment.CommentType
	17, // 2: platform.comment.ListCommentByParentResp.comments:type_name -> platform.comment.Comment
	16, // 3: platform.comment.CountCommentByParentReq.type:type_name -> platform.comment.CommentType
	17, // 4: platform.comment.RetrieveCommentByIdResp.comment:type_name -> platform.comment.Comment
	16, // 5: platform.comment.ListCommentByAuthorIdAndTypeReq.type:type_name -> platform.comment.CommentType
	17, // 6: platform.comment.ListCommentByAuthorIdAndTypeResp.comments:type_name -> platform.comment.Comment
	16, // 7: platform.comment.ListCommentByReplyToAndTypeReq.type:type_name -> platform.comment.CommentType
	17, // 8: platform.comment.ListCommentByReplyToAndTypeResp.comments:type_name -> platform.comment.Comment
	0,  // 9: platform.comment.CommentService.createComment:input_type -> platform.comment.CreateCommentReq
	2,  // 10: platform.comment.CommentService.updateComment:input_type -> platform.comment.UpdateCommentReq
	4,  // 11: platform.comment.CommentService.deleteComment:input_type -> platform.comment.DeleteCommentByIdReq
	6,  // 12: platform.comment.CommentService.listCommentByParent:input_type -> platform.comment.ListCommentByParentReq
	8,  // 13: platform.comment.CommentService.countCommentByParent:input_type -> platform.comment.CountCommentByParentReq
	10, // 14: platform.comment.CommentService.retrieveCommentById:input_type -> platform.comment.RetrieveCommentByIdReq
	12, // 15: platform.comment.CommentService.listCommentByAuthorIdAndType:input_type -> platform.comment.ListCommentByAuthorIdAndTypeReq
	14, // 16: platform.comment.CommentService.listCommentByReplyToAndType:input_type -> platform.comment.ListCommentByReplyToAndTypeReq
	1,  // 17: platform.comment.CommentService.createComment:output_type -> platform.comment.CreateCommentResp
	3,  // 18: platform.comment.CommentService.updateComment:output_type -> platform.comment.UpdateCommentResp
	5,  // 19: platform.comment.CommentService.deleteComment:output_type -> platform.comment.DeleteCommentByIdResp
	7,  // 20: platform.comment.CommentService.listCommentByParent:output_type -> platform.comment.ListCommentByParentResp
	9,  // 21: platform.comment.CommentService.countCommentByParent:output_type -> platform.comment.CountCommentByParentResp
	11, // 22: platform.comment.CommentService.retrieveCommentById:output_type -> platform.comment.RetrieveCommentByIdResp
	13, // 23: platform.comment.CommentService.listCommentByAuthorIdAndType:output_type -> platform.comment.ListCommentByAuthorIdAndTypeResp
	15, // 24: platform.comment.CommentService.listCommentByReplyToAndType:output_type -> platform.comment.ListCommentByReplyToAndTypeResp
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_platform_comment_comment_proto_init() }
func file_platform_comment_comment_proto_init() {
	if File_platform_comment_comment_proto != nil {
		return
	}
	file_platform_comment_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_platform_comment_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentByParentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentByParentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCommentByParentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCommentByParentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveCommentByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveCommentByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentByAuthorIdAndTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentByAuthorIdAndTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentByReplyToAndTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_comment_comment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentByReplyToAndTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_platform_comment_comment_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_platform_comment_comment_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_comment_comment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_comment_comment_proto_goTypes,
		DependencyIndexes: file_platform_comment_comment_proto_depIdxs,
		MessageInfos:      file_platform_comment_comment_proto_msgTypes,
	}.Build()
	File_platform_comment_comment_proto = out.File
	file_platform_comment_comment_proto_rawDesc = nil
	file_platform_comment_comment_proto_goTypes = nil
	file_platform_comment_comment_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.12.0. DO NOT EDIT.

type CommentService interface {
	CreateComment(ctx context.Context, req *CreateCommentReq) (res *CreateCommentResp, err error)
	UpdateComment(ctx context.Context, req *UpdateCommentReq) (res *UpdateCommentResp, err error)
	DeleteComment(ctx context.Context, req *DeleteCommentByIdReq) (res *DeleteCommentByIdResp, err error)
	ListCommentByParent(ctx context.Context, req *ListCommentByParentReq) (res *ListCommentByParentResp, err error)
	CountCommentByParent(ctx context.Context, req *CountCommentByParentReq) (res *CountCommentByParentResp, err error)
	RetrieveCommentById(ctx context.Context, req *RetrieveCommentByIdReq) (res *RetrieveCommentByIdResp, err error)
	ListCommentByAuthorIdAndType(ctx context.Context, req *ListCommentByAuthorIdAndTypeReq) (res *ListCommentByAuthorIdAndTypeResp, err error)
	ListCommentByReplyToAndType(ctx context.Context, req *ListCommentByReplyToAndTypeReq) (res *ListCommentByReplyToAndTypeResp, err error)
}
