// Code generated by Kitex v0.12.0. DO NOT EDIT.

package charge

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	charge "github.com/xh-polaris/service-idl-gen-go/kitex_gen/openapi/charge"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateBaseInterface": kitex.NewMethodInfo(
		createBaseInterfaceHandler,
		newCreateBaseInterfaceArgs,
		newCreateBaseInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateBaseInterface": kitex.NewMethodInfo(
		updateBaseInterfaceHandler,
		newUpdateBaseInterfaceArgs,
		newUpdateBaseInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteBaseInterface": kitex.NewMethodInfo(
		deleteBaseInterfaceHandler,
		newDeleteBaseInterfaceArgs,
		newDeleteBaseInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetBaseInterface": kitex.NewMethodInfo(
		getBaseInterfaceHandler,
		newGetBaseInterfaceArgs,
		newGetBaseInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateFullInterface": kitex.NewMethodInfo(
		createFullInterfaceHandler,
		newCreateFullInterfaceArgs,
		newCreateFullInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateFullInterface": kitex.NewMethodInfo(
		updateFullInterfaceHandler,
		newUpdateFullInterfaceArgs,
		newUpdateFullInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteFullInterface": kitex.NewMethodInfo(
		deleteFullInterfaceHandler,
		newDeleteFullInterfaceArgs,
		newDeleteFullInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFullInterface": kitex.NewMethodInfo(
		getFullInterfaceHandler,
		newGetFullInterfaceArgs,
		newGetFullInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetOneFullInterface": kitex.NewMethodInfo(
		getOneFullInterfaceHandler,
		newGetOneFullInterfaceArgs,
		newGetOneFullInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateMargin": kitex.NewMethodInfo(
		createMarginHandler,
		newCreateMarginArgs,
		newCreateMarginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateMargin": kitex.NewMethodInfo(
		updateMarginHandler,
		newUpdateMarginArgs,
		newUpdateMarginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMargin": kitex.NewMethodInfo(
		getMarginHandler,
		newGetMarginArgs,
		newGetMarginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteMargin": kitex.NewMethodInfo(
		deleteMarginHandler,
		newDeleteMarginArgs,
		newDeleteMarginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFullAndBaseInterfaceForCheck": kitex.NewMethodInfo(
		getFullAndBaseInterfaceForCheckHandler,
		newGetFullAndBaseInterfaceForCheckArgs,
		newGetFullAndBaseInterfaceForCheckResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateGradient": kitex.NewMethodInfo(
		createGradientHandler,
		newCreateGradientArgs,
		newCreateGradientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateGradient": kitex.NewMethodInfo(
		updateGradientHandler,
		newUpdateGradientArgs,
		newUpdateGradientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetGradient": kitex.NewMethodInfo(
		getGradientHandler,
		newGetGradientArgs,
		newGetGradientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateLog": kitex.NewMethodInfo(
		createLogHandler,
		newCreateLogArgs,
		newCreateLogResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetLog": kitex.NewMethodInfo(
		getLogHandler,
		newGetLogArgs,
		newGetLogResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetAccountByTxId": kitex.NewMethodInfo(
		getAccountByTxIdHandler,
		newGetAccountByTxIdArgs,
		newGetAccountByTxIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	chargeServiceInfo                = NewServiceInfo()
	chargeServiceInfoForClient       = NewServiceInfoForClient()
	chargeServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return chargeServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return chargeServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return chargeServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "charge"
	handlerType := (*charge.Charge)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "openapi.charge",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.0",
		Extra:           extra,
	}
	return svcInfo
}

func createBaseInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.CreateBaseInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).CreateBaseInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateBaseInterfaceArgs:
		success, err := handler.(charge.Charge).CreateBaseInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateBaseInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateBaseInterfaceArgs() interface{} {
	return &CreateBaseInterfaceArgs{}
}

func newCreateBaseInterfaceResult() interface{} {
	return &CreateBaseInterfaceResult{}
}

type CreateBaseInterfaceArgs struct {
	Req *charge.CreateBaseInterfaceReq
}

func (p *CreateBaseInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.CreateBaseInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateBaseInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateBaseInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateBaseInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateBaseInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(charge.CreateBaseInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateBaseInterfaceArgs_Req_DEFAULT *charge.CreateBaseInterfaceReq

func (p *CreateBaseInterfaceArgs) GetReq() *charge.CreateBaseInterfaceReq {
	if !p.IsSetReq() {
		return CreateBaseInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateBaseInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateBaseInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateBaseInterfaceResult struct {
	Success *charge.CreateBaseInterfaceResp
}

var CreateBaseInterfaceResult_Success_DEFAULT *charge.CreateBaseInterfaceResp

func (p *CreateBaseInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.CreateBaseInterfaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateBaseInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateBaseInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateBaseInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateBaseInterfaceResult) Unmarshal(in []byte) error {
	msg := new(charge.CreateBaseInterfaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateBaseInterfaceResult) GetSuccess() *charge.CreateBaseInterfaceResp {
	if !p.IsSetSuccess() {
		return CreateBaseInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateBaseInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.CreateBaseInterfaceResp)
}

func (p *CreateBaseInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateBaseInterfaceResult) GetResult() interface{} {
	return p.Success
}

func updateBaseInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.UpdateBaseInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).UpdateBaseInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateBaseInterfaceArgs:
		success, err := handler.(charge.Charge).UpdateBaseInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateBaseInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateBaseInterfaceArgs() interface{} {
	return &UpdateBaseInterfaceArgs{}
}

func newUpdateBaseInterfaceResult() interface{} {
	return &UpdateBaseInterfaceResult{}
}

type UpdateBaseInterfaceArgs struct {
	Req *charge.UpdateBaseInterfaceReq
}

func (p *UpdateBaseInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.UpdateBaseInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateBaseInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateBaseInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateBaseInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateBaseInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(charge.UpdateBaseInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateBaseInterfaceArgs_Req_DEFAULT *charge.UpdateBaseInterfaceReq

func (p *UpdateBaseInterfaceArgs) GetReq() *charge.UpdateBaseInterfaceReq {
	if !p.IsSetReq() {
		return UpdateBaseInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateBaseInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateBaseInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateBaseInterfaceResult struct {
	Success *charge.UpdateBaseInterfaceResp
}

var UpdateBaseInterfaceResult_Success_DEFAULT *charge.UpdateBaseInterfaceResp

func (p *UpdateBaseInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.UpdateBaseInterfaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateBaseInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateBaseInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateBaseInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateBaseInterfaceResult) Unmarshal(in []byte) error {
	msg := new(charge.UpdateBaseInterfaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateBaseInterfaceResult) GetSuccess() *charge.UpdateBaseInterfaceResp {
	if !p.IsSetSuccess() {
		return UpdateBaseInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateBaseInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.UpdateBaseInterfaceResp)
}

func (p *UpdateBaseInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateBaseInterfaceResult) GetResult() interface{} {
	return p.Success
}

func deleteBaseInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.DeleteBaseInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).DeleteBaseInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteBaseInterfaceArgs:
		success, err := handler.(charge.Charge).DeleteBaseInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteBaseInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteBaseInterfaceArgs() interface{} {
	return &DeleteBaseInterfaceArgs{}
}

func newDeleteBaseInterfaceResult() interface{} {
	return &DeleteBaseInterfaceResult{}
}

type DeleteBaseInterfaceArgs struct {
	Req *charge.DeleteBaseInterfaceReq
}

func (p *DeleteBaseInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.DeleteBaseInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteBaseInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteBaseInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteBaseInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteBaseInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(charge.DeleteBaseInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteBaseInterfaceArgs_Req_DEFAULT *charge.DeleteBaseInterfaceReq

func (p *DeleteBaseInterfaceArgs) GetReq() *charge.DeleteBaseInterfaceReq {
	if !p.IsSetReq() {
		return DeleteBaseInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteBaseInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteBaseInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteBaseInterfaceResult struct {
	Success *charge.DeleteBaseInterfaceResp
}

var DeleteBaseInterfaceResult_Success_DEFAULT *charge.DeleteBaseInterfaceResp

func (p *DeleteBaseInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.DeleteBaseInterfaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteBaseInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteBaseInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteBaseInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteBaseInterfaceResult) Unmarshal(in []byte) error {
	msg := new(charge.DeleteBaseInterfaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteBaseInterfaceResult) GetSuccess() *charge.DeleteBaseInterfaceResp {
	if !p.IsSetSuccess() {
		return DeleteBaseInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteBaseInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.DeleteBaseInterfaceResp)
}

func (p *DeleteBaseInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteBaseInterfaceResult) GetResult() interface{} {
	return p.Success
}

func getBaseInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.GetBaseInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).GetBaseInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetBaseInterfaceArgs:
		success, err := handler.(charge.Charge).GetBaseInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetBaseInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetBaseInterfaceArgs() interface{} {
	return &GetBaseInterfaceArgs{}
}

func newGetBaseInterfaceResult() interface{} {
	return &GetBaseInterfaceResult{}
}

type GetBaseInterfaceArgs struct {
	Req *charge.GetBaseInterfaceReq
}

func (p *GetBaseInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.GetBaseInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetBaseInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetBaseInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetBaseInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetBaseInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(charge.GetBaseInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetBaseInterfaceArgs_Req_DEFAULT *charge.GetBaseInterfaceReq

func (p *GetBaseInterfaceArgs) GetReq() *charge.GetBaseInterfaceReq {
	if !p.IsSetReq() {
		return GetBaseInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetBaseInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetBaseInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetBaseInterfaceResult struct {
	Success *charge.GetBaseInterfaceResp
}

var GetBaseInterfaceResult_Success_DEFAULT *charge.GetBaseInterfaceResp

func (p *GetBaseInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.GetBaseInterfaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetBaseInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetBaseInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetBaseInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetBaseInterfaceResult) Unmarshal(in []byte) error {
	msg := new(charge.GetBaseInterfaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetBaseInterfaceResult) GetSuccess() *charge.GetBaseInterfaceResp {
	if !p.IsSetSuccess() {
		return GetBaseInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetBaseInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.GetBaseInterfaceResp)
}

func (p *GetBaseInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBaseInterfaceResult) GetResult() interface{} {
	return p.Success
}

func createFullInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.CreateFullInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).CreateFullInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateFullInterfaceArgs:
		success, err := handler.(charge.Charge).CreateFullInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateFullInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateFullInterfaceArgs() interface{} {
	return &CreateFullInterfaceArgs{}
}

func newCreateFullInterfaceResult() interface{} {
	return &CreateFullInterfaceResult{}
}

type CreateFullInterfaceArgs struct {
	Req *charge.CreateFullInterfaceReq
}

func (p *CreateFullInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.CreateFullInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateFullInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateFullInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateFullInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateFullInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(charge.CreateFullInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateFullInterfaceArgs_Req_DEFAULT *charge.CreateFullInterfaceReq

func (p *CreateFullInterfaceArgs) GetReq() *charge.CreateFullInterfaceReq {
	if !p.IsSetReq() {
		return CreateFullInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateFullInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateFullInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateFullInterfaceResult struct {
	Success *charge.CreateFullInterfaceResp
}

var CreateFullInterfaceResult_Success_DEFAULT *charge.CreateFullInterfaceResp

func (p *CreateFullInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.CreateFullInterfaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateFullInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateFullInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateFullInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateFullInterfaceResult) Unmarshal(in []byte) error {
	msg := new(charge.CreateFullInterfaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateFullInterfaceResult) GetSuccess() *charge.CreateFullInterfaceResp {
	if !p.IsSetSuccess() {
		return CreateFullInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateFullInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.CreateFullInterfaceResp)
}

func (p *CreateFullInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateFullInterfaceResult) GetResult() interface{} {
	return p.Success
}

func updateFullInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.UpdateFullInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).UpdateFullInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateFullInterfaceArgs:
		success, err := handler.(charge.Charge).UpdateFullInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateFullInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateFullInterfaceArgs() interface{} {
	return &UpdateFullInterfaceArgs{}
}

func newUpdateFullInterfaceResult() interface{} {
	return &UpdateFullInterfaceResult{}
}

type UpdateFullInterfaceArgs struct {
	Req *charge.UpdateFullInterfaceReq
}

func (p *UpdateFullInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.UpdateFullInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateFullInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateFullInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateFullInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateFullInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(charge.UpdateFullInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateFullInterfaceArgs_Req_DEFAULT *charge.UpdateFullInterfaceReq

func (p *UpdateFullInterfaceArgs) GetReq() *charge.UpdateFullInterfaceReq {
	if !p.IsSetReq() {
		return UpdateFullInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateFullInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateFullInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateFullInterfaceResult struct {
	Success *charge.UpdateFullInterfaceResp
}

var UpdateFullInterfaceResult_Success_DEFAULT *charge.UpdateFullInterfaceResp

func (p *UpdateFullInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.UpdateFullInterfaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateFullInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateFullInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateFullInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateFullInterfaceResult) Unmarshal(in []byte) error {
	msg := new(charge.UpdateFullInterfaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateFullInterfaceResult) GetSuccess() *charge.UpdateFullInterfaceResp {
	if !p.IsSetSuccess() {
		return UpdateFullInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateFullInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.UpdateFullInterfaceResp)
}

func (p *UpdateFullInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateFullInterfaceResult) GetResult() interface{} {
	return p.Success
}

func deleteFullInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.DeleteFullInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).DeleteFullInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteFullInterfaceArgs:
		success, err := handler.(charge.Charge).DeleteFullInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteFullInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteFullInterfaceArgs() interface{} {
	return &DeleteFullInterfaceArgs{}
}

func newDeleteFullInterfaceResult() interface{} {
	return &DeleteFullInterfaceResult{}
}

type DeleteFullInterfaceArgs struct {
	Req *charge.DeleteFullInterfaceReq
}

func (p *DeleteFullInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.DeleteFullInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteFullInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteFullInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteFullInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteFullInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(charge.DeleteFullInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteFullInterfaceArgs_Req_DEFAULT *charge.DeleteFullInterfaceReq

func (p *DeleteFullInterfaceArgs) GetReq() *charge.DeleteFullInterfaceReq {
	if !p.IsSetReq() {
		return DeleteFullInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteFullInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteFullInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteFullInterfaceResult struct {
	Success *charge.DeleteFullInterfaceResp
}

var DeleteFullInterfaceResult_Success_DEFAULT *charge.DeleteFullInterfaceResp

func (p *DeleteFullInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.DeleteFullInterfaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteFullInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteFullInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteFullInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteFullInterfaceResult) Unmarshal(in []byte) error {
	msg := new(charge.DeleteFullInterfaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteFullInterfaceResult) GetSuccess() *charge.DeleteFullInterfaceResp {
	if !p.IsSetSuccess() {
		return DeleteFullInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteFullInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.DeleteFullInterfaceResp)
}

func (p *DeleteFullInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteFullInterfaceResult) GetResult() interface{} {
	return p.Success
}

func getFullInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.GetFullInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).GetFullInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFullInterfaceArgs:
		success, err := handler.(charge.Charge).GetFullInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFullInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFullInterfaceArgs() interface{} {
	return &GetFullInterfaceArgs{}
}

func newGetFullInterfaceResult() interface{} {
	return &GetFullInterfaceResult{}
}

type GetFullInterfaceArgs struct {
	Req *charge.GetFullInterfaceReq
}

func (p *GetFullInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.GetFullInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFullInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFullInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFullInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFullInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(charge.GetFullInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFullInterfaceArgs_Req_DEFAULT *charge.GetFullInterfaceReq

func (p *GetFullInterfaceArgs) GetReq() *charge.GetFullInterfaceReq {
	if !p.IsSetReq() {
		return GetFullInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFullInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFullInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFullInterfaceResult struct {
	Success *charge.GetFullInterfaceResp
}

var GetFullInterfaceResult_Success_DEFAULT *charge.GetFullInterfaceResp

func (p *GetFullInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.GetFullInterfaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFullInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFullInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFullInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFullInterfaceResult) Unmarshal(in []byte) error {
	msg := new(charge.GetFullInterfaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFullInterfaceResult) GetSuccess() *charge.GetFullInterfaceResp {
	if !p.IsSetSuccess() {
		return GetFullInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFullInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.GetFullInterfaceResp)
}

func (p *GetFullInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFullInterfaceResult) GetResult() interface{} {
	return p.Success
}

func getOneFullInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.GetOneFullInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).GetOneFullInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetOneFullInterfaceArgs:
		success, err := handler.(charge.Charge).GetOneFullInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetOneFullInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetOneFullInterfaceArgs() interface{} {
	return &GetOneFullInterfaceArgs{}
}

func newGetOneFullInterfaceResult() interface{} {
	return &GetOneFullInterfaceResult{}
}

type GetOneFullInterfaceArgs struct {
	Req *charge.GetOneFullInterfaceReq
}

func (p *GetOneFullInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.GetOneFullInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetOneFullInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetOneFullInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetOneFullInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetOneFullInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(charge.GetOneFullInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetOneFullInterfaceArgs_Req_DEFAULT *charge.GetOneFullInterfaceReq

func (p *GetOneFullInterfaceArgs) GetReq() *charge.GetOneFullInterfaceReq {
	if !p.IsSetReq() {
		return GetOneFullInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetOneFullInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetOneFullInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetOneFullInterfaceResult struct {
	Success *charge.GetOneFullInterfaceResp
}

var GetOneFullInterfaceResult_Success_DEFAULT *charge.GetOneFullInterfaceResp

func (p *GetOneFullInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.GetOneFullInterfaceResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetOneFullInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetOneFullInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetOneFullInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetOneFullInterfaceResult) Unmarshal(in []byte) error {
	msg := new(charge.GetOneFullInterfaceResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetOneFullInterfaceResult) GetSuccess() *charge.GetOneFullInterfaceResp {
	if !p.IsSetSuccess() {
		return GetOneFullInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetOneFullInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.GetOneFullInterfaceResp)
}

func (p *GetOneFullInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetOneFullInterfaceResult) GetResult() interface{} {
	return p.Success
}

func createMarginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.CreateMarginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).CreateMargin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateMarginArgs:
		success, err := handler.(charge.Charge).CreateMargin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateMarginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateMarginArgs() interface{} {
	return &CreateMarginArgs{}
}

func newCreateMarginResult() interface{} {
	return &CreateMarginResult{}
}

type CreateMarginArgs struct {
	Req *charge.CreateMarginReq
}

func (p *CreateMarginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.CreateMarginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateMarginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateMarginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateMarginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateMarginArgs) Unmarshal(in []byte) error {
	msg := new(charge.CreateMarginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateMarginArgs_Req_DEFAULT *charge.CreateMarginReq

func (p *CreateMarginArgs) GetReq() *charge.CreateMarginReq {
	if !p.IsSetReq() {
		return CreateMarginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateMarginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateMarginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateMarginResult struct {
	Success *charge.CreateMarginResp
}

var CreateMarginResult_Success_DEFAULT *charge.CreateMarginResp

func (p *CreateMarginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.CreateMarginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateMarginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateMarginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateMarginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateMarginResult) Unmarshal(in []byte) error {
	msg := new(charge.CreateMarginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateMarginResult) GetSuccess() *charge.CreateMarginResp {
	if !p.IsSetSuccess() {
		return CreateMarginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateMarginResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.CreateMarginResp)
}

func (p *CreateMarginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateMarginResult) GetResult() interface{} {
	return p.Success
}

func updateMarginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.UpdateMarginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).UpdateMargin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateMarginArgs:
		success, err := handler.(charge.Charge).UpdateMargin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateMarginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateMarginArgs() interface{} {
	return &UpdateMarginArgs{}
}

func newUpdateMarginResult() interface{} {
	return &UpdateMarginResult{}
}

type UpdateMarginArgs struct {
	Req *charge.UpdateMarginReq
}

func (p *UpdateMarginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.UpdateMarginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateMarginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateMarginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateMarginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateMarginArgs) Unmarshal(in []byte) error {
	msg := new(charge.UpdateMarginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateMarginArgs_Req_DEFAULT *charge.UpdateMarginReq

func (p *UpdateMarginArgs) GetReq() *charge.UpdateMarginReq {
	if !p.IsSetReq() {
		return UpdateMarginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateMarginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateMarginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateMarginResult struct {
	Success *charge.UpdateMarginResp
}

var UpdateMarginResult_Success_DEFAULT *charge.UpdateMarginResp

func (p *UpdateMarginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.UpdateMarginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateMarginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateMarginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateMarginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateMarginResult) Unmarshal(in []byte) error {
	msg := new(charge.UpdateMarginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateMarginResult) GetSuccess() *charge.UpdateMarginResp {
	if !p.IsSetSuccess() {
		return UpdateMarginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateMarginResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.UpdateMarginResp)
}

func (p *UpdateMarginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateMarginResult) GetResult() interface{} {
	return p.Success
}

func getMarginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.GetMarginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).GetMargin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMarginArgs:
		success, err := handler.(charge.Charge).GetMargin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMarginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMarginArgs() interface{} {
	return &GetMarginArgs{}
}

func newGetMarginResult() interface{} {
	return &GetMarginResult{}
}

type GetMarginArgs struct {
	Req *charge.GetMarginReq
}

func (p *GetMarginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.GetMarginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMarginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMarginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMarginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMarginArgs) Unmarshal(in []byte) error {
	msg := new(charge.GetMarginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMarginArgs_Req_DEFAULT *charge.GetMarginReq

func (p *GetMarginArgs) GetReq() *charge.GetMarginReq {
	if !p.IsSetReq() {
		return GetMarginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMarginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMarginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMarginResult struct {
	Success *charge.GetMarginResp
}

var GetMarginResult_Success_DEFAULT *charge.GetMarginResp

func (p *GetMarginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.GetMarginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMarginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMarginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMarginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMarginResult) Unmarshal(in []byte) error {
	msg := new(charge.GetMarginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMarginResult) GetSuccess() *charge.GetMarginResp {
	if !p.IsSetSuccess() {
		return GetMarginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMarginResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.GetMarginResp)
}

func (p *GetMarginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMarginResult) GetResult() interface{} {
	return p.Success
}

func deleteMarginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.DeleteMarginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).DeleteMargin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteMarginArgs:
		success, err := handler.(charge.Charge).DeleteMargin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteMarginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteMarginArgs() interface{} {
	return &DeleteMarginArgs{}
}

func newDeleteMarginResult() interface{} {
	return &DeleteMarginResult{}
}

type DeleteMarginArgs struct {
	Req *charge.DeleteMarginReq
}

func (p *DeleteMarginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.DeleteMarginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteMarginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteMarginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteMarginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteMarginArgs) Unmarshal(in []byte) error {
	msg := new(charge.DeleteMarginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteMarginArgs_Req_DEFAULT *charge.DeleteMarginReq

func (p *DeleteMarginArgs) GetReq() *charge.DeleteMarginReq {
	if !p.IsSetReq() {
		return DeleteMarginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteMarginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteMarginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteMarginResult struct {
	Success *charge.DeleteMarginResp
}

var DeleteMarginResult_Success_DEFAULT *charge.DeleteMarginResp

func (p *DeleteMarginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.DeleteMarginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteMarginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteMarginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteMarginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteMarginResult) Unmarshal(in []byte) error {
	msg := new(charge.DeleteMarginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteMarginResult) GetSuccess() *charge.DeleteMarginResp {
	if !p.IsSetSuccess() {
		return DeleteMarginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteMarginResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.DeleteMarginResp)
}

func (p *DeleteMarginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteMarginResult) GetResult() interface{} {
	return p.Success
}

func getFullAndBaseInterfaceForCheckHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.GetFullAndBaseInterfaceForCheckReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).GetFullAndBaseInterfaceForCheck(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFullAndBaseInterfaceForCheckArgs:
		success, err := handler.(charge.Charge).GetFullAndBaseInterfaceForCheck(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFullAndBaseInterfaceForCheckResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFullAndBaseInterfaceForCheckArgs() interface{} {
	return &GetFullAndBaseInterfaceForCheckArgs{}
}

func newGetFullAndBaseInterfaceForCheckResult() interface{} {
	return &GetFullAndBaseInterfaceForCheckResult{}
}

type GetFullAndBaseInterfaceForCheckArgs struct {
	Req *charge.GetFullAndBaseInterfaceForCheckReq
}

func (p *GetFullAndBaseInterfaceForCheckArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.GetFullAndBaseInterfaceForCheckReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFullAndBaseInterfaceForCheckArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFullAndBaseInterfaceForCheckArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFullAndBaseInterfaceForCheckArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFullAndBaseInterfaceForCheckArgs) Unmarshal(in []byte) error {
	msg := new(charge.GetFullAndBaseInterfaceForCheckReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFullAndBaseInterfaceForCheckArgs_Req_DEFAULT *charge.GetFullAndBaseInterfaceForCheckReq

func (p *GetFullAndBaseInterfaceForCheckArgs) GetReq() *charge.GetFullAndBaseInterfaceForCheckReq {
	if !p.IsSetReq() {
		return GetFullAndBaseInterfaceForCheckArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFullAndBaseInterfaceForCheckArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFullAndBaseInterfaceForCheckArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFullAndBaseInterfaceForCheckResult struct {
	Success *charge.GetFullAndBaseInterfaceForCheckResp
}

var GetFullAndBaseInterfaceForCheckResult_Success_DEFAULT *charge.GetFullAndBaseInterfaceForCheckResp

func (p *GetFullAndBaseInterfaceForCheckResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.GetFullAndBaseInterfaceForCheckResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFullAndBaseInterfaceForCheckResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFullAndBaseInterfaceForCheckResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFullAndBaseInterfaceForCheckResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFullAndBaseInterfaceForCheckResult) Unmarshal(in []byte) error {
	msg := new(charge.GetFullAndBaseInterfaceForCheckResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFullAndBaseInterfaceForCheckResult) GetSuccess() *charge.GetFullAndBaseInterfaceForCheckResp {
	if !p.IsSetSuccess() {
		return GetFullAndBaseInterfaceForCheckResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFullAndBaseInterfaceForCheckResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.GetFullAndBaseInterfaceForCheckResp)
}

func (p *GetFullAndBaseInterfaceForCheckResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFullAndBaseInterfaceForCheckResult) GetResult() interface{} {
	return p.Success
}

func createGradientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.CreateGradientReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).CreateGradient(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateGradientArgs:
		success, err := handler.(charge.Charge).CreateGradient(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateGradientResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateGradientArgs() interface{} {
	return &CreateGradientArgs{}
}

func newCreateGradientResult() interface{} {
	return &CreateGradientResult{}
}

type CreateGradientArgs struct {
	Req *charge.CreateGradientReq
}

func (p *CreateGradientArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.CreateGradientReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateGradientArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateGradientArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateGradientArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateGradientArgs) Unmarshal(in []byte) error {
	msg := new(charge.CreateGradientReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateGradientArgs_Req_DEFAULT *charge.CreateGradientReq

func (p *CreateGradientArgs) GetReq() *charge.CreateGradientReq {
	if !p.IsSetReq() {
		return CreateGradientArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateGradientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateGradientArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateGradientResult struct {
	Success *charge.CreateGradientResp
}

var CreateGradientResult_Success_DEFAULT *charge.CreateGradientResp

func (p *CreateGradientResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.CreateGradientResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateGradientResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateGradientResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateGradientResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateGradientResult) Unmarshal(in []byte) error {
	msg := new(charge.CreateGradientResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateGradientResult) GetSuccess() *charge.CreateGradientResp {
	if !p.IsSetSuccess() {
		return CreateGradientResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateGradientResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.CreateGradientResp)
}

func (p *CreateGradientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateGradientResult) GetResult() interface{} {
	return p.Success
}

func updateGradientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.UpdateGradientReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).UpdateGradient(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateGradientArgs:
		success, err := handler.(charge.Charge).UpdateGradient(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateGradientResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateGradientArgs() interface{} {
	return &UpdateGradientArgs{}
}

func newUpdateGradientResult() interface{} {
	return &UpdateGradientResult{}
}

type UpdateGradientArgs struct {
	Req *charge.UpdateGradientReq
}

func (p *UpdateGradientArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.UpdateGradientReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateGradientArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateGradientArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateGradientArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateGradientArgs) Unmarshal(in []byte) error {
	msg := new(charge.UpdateGradientReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateGradientArgs_Req_DEFAULT *charge.UpdateGradientReq

func (p *UpdateGradientArgs) GetReq() *charge.UpdateGradientReq {
	if !p.IsSetReq() {
		return UpdateGradientArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateGradientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateGradientArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateGradientResult struct {
	Success *charge.UpdateGradientResp
}

var UpdateGradientResult_Success_DEFAULT *charge.UpdateGradientResp

func (p *UpdateGradientResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.UpdateGradientResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateGradientResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateGradientResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateGradientResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateGradientResult) Unmarshal(in []byte) error {
	msg := new(charge.UpdateGradientResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateGradientResult) GetSuccess() *charge.UpdateGradientResp {
	if !p.IsSetSuccess() {
		return UpdateGradientResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateGradientResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.UpdateGradientResp)
}

func (p *UpdateGradientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateGradientResult) GetResult() interface{} {
	return p.Success
}

func getGradientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.GetGradientReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).GetGradient(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetGradientArgs:
		success, err := handler.(charge.Charge).GetGradient(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetGradientResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetGradientArgs() interface{} {
	return &GetGradientArgs{}
}

func newGetGradientResult() interface{} {
	return &GetGradientResult{}
}

type GetGradientArgs struct {
	Req *charge.GetGradientReq
}

func (p *GetGradientArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.GetGradientReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetGradientArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetGradientArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetGradientArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetGradientArgs) Unmarshal(in []byte) error {
	msg := new(charge.GetGradientReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetGradientArgs_Req_DEFAULT *charge.GetGradientReq

func (p *GetGradientArgs) GetReq() *charge.GetGradientReq {
	if !p.IsSetReq() {
		return GetGradientArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetGradientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetGradientArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetGradientResult struct {
	Success *charge.GetGradientResp
}

var GetGradientResult_Success_DEFAULT *charge.GetGradientResp

func (p *GetGradientResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.GetGradientResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetGradientResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetGradientResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetGradientResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetGradientResult) Unmarshal(in []byte) error {
	msg := new(charge.GetGradientResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetGradientResult) GetSuccess() *charge.GetGradientResp {
	if !p.IsSetSuccess() {
		return GetGradientResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetGradientResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.GetGradientResp)
}

func (p *GetGradientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetGradientResult) GetResult() interface{} {
	return p.Success
}

func createLogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.CreateLogReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).CreateLog(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateLogArgs:
		success, err := handler.(charge.Charge).CreateLog(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateLogResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateLogArgs() interface{} {
	return &CreateLogArgs{}
}

func newCreateLogResult() interface{} {
	return &CreateLogResult{}
}

type CreateLogArgs struct {
	Req *charge.CreateLogReq
}

func (p *CreateLogArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.CreateLogReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateLogArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateLogArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateLogArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateLogArgs) Unmarshal(in []byte) error {
	msg := new(charge.CreateLogReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateLogArgs_Req_DEFAULT *charge.CreateLogReq

func (p *CreateLogArgs) GetReq() *charge.CreateLogReq {
	if !p.IsSetReq() {
		return CreateLogArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateLogArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateLogArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateLogResult struct {
	Success *charge.CreateLogResp
}

var CreateLogResult_Success_DEFAULT *charge.CreateLogResp

func (p *CreateLogResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.CreateLogResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateLogResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateLogResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateLogResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateLogResult) Unmarshal(in []byte) error {
	msg := new(charge.CreateLogResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateLogResult) GetSuccess() *charge.CreateLogResp {
	if !p.IsSetSuccess() {
		return CreateLogResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateLogResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.CreateLogResp)
}

func (p *CreateLogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateLogResult) GetResult() interface{} {
	return p.Success
}

func getLogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.GetLogReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).GetLog(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetLogArgs:
		success, err := handler.(charge.Charge).GetLog(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLogResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetLogArgs() interface{} {
	return &GetLogArgs{}
}

func newGetLogResult() interface{} {
	return &GetLogResult{}
}

type GetLogArgs struct {
	Req *charge.GetLogReq
}

func (p *GetLogArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.GetLogReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLogArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLogArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLogArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLogArgs) Unmarshal(in []byte) error {
	msg := new(charge.GetLogReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLogArgs_Req_DEFAULT *charge.GetLogReq

func (p *GetLogArgs) GetReq() *charge.GetLogReq {
	if !p.IsSetReq() {
		return GetLogArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLogArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLogArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLogResult struct {
	Success *charge.GetLogResp
}

var GetLogResult_Success_DEFAULT *charge.GetLogResp

func (p *GetLogResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.GetLogResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLogResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLogResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLogResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLogResult) Unmarshal(in []byte) error {
	msg := new(charge.GetLogResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLogResult) GetSuccess() *charge.GetLogResp {
	if !p.IsSetSuccess() {
		return GetLogResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLogResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.GetLogResp)
}

func (p *GetLogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLogResult) GetResult() interface{} {
	return p.Success
}

func getAccountByTxIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(charge.GetAccountByTxIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(charge.Charge).GetAccountByTxId(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAccountByTxIdArgs:
		success, err := handler.(charge.Charge).GetAccountByTxId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAccountByTxIdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAccountByTxIdArgs() interface{} {
	return &GetAccountByTxIdArgs{}
}

func newGetAccountByTxIdResult() interface{} {
	return &GetAccountByTxIdResult{}
}

type GetAccountByTxIdArgs struct {
	Req *charge.GetAccountByTxIdReq
}

func (p *GetAccountByTxIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(charge.GetAccountByTxIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAccountByTxIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAccountByTxIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAccountByTxIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAccountByTxIdArgs) Unmarshal(in []byte) error {
	msg := new(charge.GetAccountByTxIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAccountByTxIdArgs_Req_DEFAULT *charge.GetAccountByTxIdReq

func (p *GetAccountByTxIdArgs) GetReq() *charge.GetAccountByTxIdReq {
	if !p.IsSetReq() {
		return GetAccountByTxIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAccountByTxIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAccountByTxIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAccountByTxIdResult struct {
	Success *charge.GetAccountByTxIdResp
}

var GetAccountByTxIdResult_Success_DEFAULT *charge.GetAccountByTxIdResp

func (p *GetAccountByTxIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(charge.GetAccountByTxIdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAccountByTxIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAccountByTxIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAccountByTxIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAccountByTxIdResult) Unmarshal(in []byte) error {
	msg := new(charge.GetAccountByTxIdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAccountByTxIdResult) GetSuccess() *charge.GetAccountByTxIdResp {
	if !p.IsSetSuccess() {
		return GetAccountByTxIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAccountByTxIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*charge.GetAccountByTxIdResp)
}

func (p *GetAccountByTxIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAccountByTxIdResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateBaseInterface(ctx context.Context, Req *charge.CreateBaseInterfaceReq) (r *charge.CreateBaseInterfaceResp, err error) {
	var _args CreateBaseInterfaceArgs
	_args.Req = Req
	var _result CreateBaseInterfaceResult
	if err = p.c.Call(ctx, "CreateBaseInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBaseInterface(ctx context.Context, Req *charge.UpdateBaseInterfaceReq) (r *charge.UpdateBaseInterfaceResp, err error) {
	var _args UpdateBaseInterfaceArgs
	_args.Req = Req
	var _result UpdateBaseInterfaceResult
	if err = p.c.Call(ctx, "UpdateBaseInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBaseInterface(ctx context.Context, Req *charge.DeleteBaseInterfaceReq) (r *charge.DeleteBaseInterfaceResp, err error) {
	var _args DeleteBaseInterfaceArgs
	_args.Req = Req
	var _result DeleteBaseInterfaceResult
	if err = p.c.Call(ctx, "DeleteBaseInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBaseInterface(ctx context.Context, Req *charge.GetBaseInterfaceReq) (r *charge.GetBaseInterfaceResp, err error) {
	var _args GetBaseInterfaceArgs
	_args.Req = Req
	var _result GetBaseInterfaceResult
	if err = p.c.Call(ctx, "GetBaseInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFullInterface(ctx context.Context, Req *charge.CreateFullInterfaceReq) (r *charge.CreateFullInterfaceResp, err error) {
	var _args CreateFullInterfaceArgs
	_args.Req = Req
	var _result CreateFullInterfaceResult
	if err = p.c.Call(ctx, "CreateFullInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateFullInterface(ctx context.Context, Req *charge.UpdateFullInterfaceReq) (r *charge.UpdateFullInterfaceResp, err error) {
	var _args UpdateFullInterfaceArgs
	_args.Req = Req
	var _result UpdateFullInterfaceResult
	if err = p.c.Call(ctx, "UpdateFullInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFullInterface(ctx context.Context, Req *charge.DeleteFullInterfaceReq) (r *charge.DeleteFullInterfaceResp, err error) {
	var _args DeleteFullInterfaceArgs
	_args.Req = Req
	var _result DeleteFullInterfaceResult
	if err = p.c.Call(ctx, "DeleteFullInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFullInterface(ctx context.Context, Req *charge.GetFullInterfaceReq) (r *charge.GetFullInterfaceResp, err error) {
	var _args GetFullInterfaceArgs
	_args.Req = Req
	var _result GetFullInterfaceResult
	if err = p.c.Call(ctx, "GetFullInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOneFullInterface(ctx context.Context, Req *charge.GetOneFullInterfaceReq) (r *charge.GetOneFullInterfaceResp, err error) {
	var _args GetOneFullInterfaceArgs
	_args.Req = Req
	var _result GetOneFullInterfaceResult
	if err = p.c.Call(ctx, "GetOneFullInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMargin(ctx context.Context, Req *charge.CreateMarginReq) (r *charge.CreateMarginResp, err error) {
	var _args CreateMarginArgs
	_args.Req = Req
	var _result CreateMarginResult
	if err = p.c.Call(ctx, "CreateMargin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMargin(ctx context.Context, Req *charge.UpdateMarginReq) (r *charge.UpdateMarginResp, err error) {
	var _args UpdateMarginArgs
	_args.Req = Req
	var _result UpdateMarginResult
	if err = p.c.Call(ctx, "UpdateMargin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMargin(ctx context.Context, Req *charge.GetMarginReq) (r *charge.GetMarginResp, err error) {
	var _args GetMarginArgs
	_args.Req = Req
	var _result GetMarginResult
	if err = p.c.Call(ctx, "GetMargin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMargin(ctx context.Context, Req *charge.DeleteMarginReq) (r *charge.DeleteMarginResp, err error) {
	var _args DeleteMarginArgs
	_args.Req = Req
	var _result DeleteMarginResult
	if err = p.c.Call(ctx, "DeleteMargin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFullAndBaseInterfaceForCheck(ctx context.Context, Req *charge.GetFullAndBaseInterfaceForCheckReq) (r *charge.GetFullAndBaseInterfaceForCheckResp, err error) {
	var _args GetFullAndBaseInterfaceForCheckArgs
	_args.Req = Req
	var _result GetFullAndBaseInterfaceForCheckResult
	if err = p.c.Call(ctx, "GetFullAndBaseInterfaceForCheck", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateGradient(ctx context.Context, Req *charge.CreateGradientReq) (r *charge.CreateGradientResp, err error) {
	var _args CreateGradientArgs
	_args.Req = Req
	var _result CreateGradientResult
	if err = p.c.Call(ctx, "CreateGradient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateGradient(ctx context.Context, Req *charge.UpdateGradientReq) (r *charge.UpdateGradientResp, err error) {
	var _args UpdateGradientArgs
	_args.Req = Req
	var _result UpdateGradientResult
	if err = p.c.Call(ctx, "UpdateGradient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGradient(ctx context.Context, Req *charge.GetGradientReq) (r *charge.GetGradientResp, err error) {
	var _args GetGradientArgs
	_args.Req = Req
	var _result GetGradientResult
	if err = p.c.Call(ctx, "GetGradient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateLog(ctx context.Context, Req *charge.CreateLogReq) (r *charge.CreateLogResp, err error) {
	var _args CreateLogArgs
	_args.Req = Req
	var _result CreateLogResult
	if err = p.c.Call(ctx, "CreateLog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLog(ctx context.Context, Req *charge.GetLogReq) (r *charge.GetLogResp, err error) {
	var _args GetLogArgs
	_args.Req = Req
	var _result GetLogResult
	if err = p.c.Call(ctx, "GetLog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAccountByTxId(ctx context.Context, Req *charge.GetAccountByTxIdReq) (r *charge.GetAccountByTxIdResp, err error) {
	var _args GetAccountByTxIdArgs
	_args.Req = Req
	var _result GetAccountByTxIdResult
	if err = p.c.Call(ctx, "GetAccountByTxId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
