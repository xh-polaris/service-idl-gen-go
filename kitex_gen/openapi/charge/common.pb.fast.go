// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package charge

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Parameter) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Parameter[number], err)
}

func (x *Parameter) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Parameter) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseInterface) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseInterface[number], err)
}

func (x *BaseInterface) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseInterface) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseInterface) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Host, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseInterface) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseInterface) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Method = MethodType(v)
	return offset, nil
}

func (x *BaseInterface) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PassWay = PassWayType(v)
	return offset, nil
}

func (x *BaseInterface) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v Parameter
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Params = append(x.Params, &v)
	return offset, nil
}

func (x *BaseInterface) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseInterface) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = InterfaceStatus(v)
	return offset, nil
}

func (x *BaseInterface) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseInterface) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FullInterface) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FullInterface[number], err)
}

func (x *FullInterface) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FullInterface) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BaseInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FullInterface) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FullInterface) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ChargeType = ChargeType(v)
	return offset, nil
}

func (x *FullInterface) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FullInterface) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = InterfaceStatus(v)
	return offset, nil
}

func (x *FullInterface) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FullInterface) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Margin) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Margin[number], err)
}

func (x *Margin) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Margin) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Margin) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FullInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Margin) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Margin, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Margin) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Margin) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Discount) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Discount[number], err)
}

func (x *Discount) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Num, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Discount) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Rate, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Discount) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Low, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Gradient) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Gradient[number], err)
}

func (x *Gradient) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Gradient) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BaseInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Gradient) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Discount
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Discounts = append(x.Discounts, &v)
	return offset, nil
}

func (x *Gradient) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = InterfaceStatus(v)
	return offset, nil
}

func (x *Gradient) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Gradient) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Log) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Log[number], err)
}

func (x *Log) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Log) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FullInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Log) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Log) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.KeyId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Log) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = LogStatus(v)
	return offset, nil
}

func (x *Log) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Info, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Log) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Log) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Log) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Timestamp, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Log) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Account) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Account[number], err)
}

func (x *Account) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Account) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TxId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Account) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Increment, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Account) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.MarginId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Account) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Parameter) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Parameter) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *Parameter) fastWriteField2(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetType())
	return offset
}

func (x *BaseInterface) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *BaseInterface) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BaseInterface) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *BaseInterface) fastWriteField3(buf []byte) (offset int) {
	if x.Host == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetHost())
	return offset
}

func (x *BaseInterface) fastWriteField4(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPath())
	return offset
}

func (x *BaseInterface) fastWriteField5(buf []byte) (offset int) {
	if x.Method == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetMethod()))
	return offset
}

func (x *BaseInterface) fastWriteField6(buf []byte) (offset int) {
	if x.PassWay == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetPassWay()))
	return offset
}

func (x *BaseInterface) fastWriteField7(buf []byte) (offset int) {
	if x.Params == nil {
		return offset
	}
	for i := range x.GetParams() {
		offset += fastpb.WriteMessage(buf[offset:], 7, x.GetParams()[i])
	}
	return offset
}

func (x *BaseInterface) fastWriteField8(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetContent())
	return offset
}

func (x *BaseInterface) fastWriteField9(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, int32(x.GetStatus()))
	return offset
}

func (x *BaseInterface) fastWriteField10(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetCreateTime())
	return offset
}

func (x *BaseInterface) fastWriteField11(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetUpdateTime())
	return offset
}

func (x *FullInterface) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *FullInterface) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *FullInterface) fastWriteField2(buf []byte) (offset int) {
	if x.BaseInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetBaseInterfaceId())
	return offset
}

func (x *FullInterface) fastWriteField3(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUserId())
	return offset
}

func (x *FullInterface) fastWriteField4(buf []byte) (offset int) {
	if x.ChargeType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetChargeType()))
	return offset
}

func (x *FullInterface) fastWriteField5(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetPrice())
	return offset
}

func (x *FullInterface) fastWriteField7(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, int32(x.GetStatus()))
	return offset
}

func (x *FullInterface) fastWriteField8(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetCreateTime())
	return offset
}

func (x *FullInterface) fastWriteField9(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetUpdateTime())
	return offset
}

func (x *Margin) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Margin) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Margin) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Margin) fastWriteField3(buf []byte) (offset int) {
	if x.FullInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFullInterfaceId())
	return offset
}

func (x *Margin) fastWriteField4(buf []byte) (offset int) {
	if x.Margin == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetMargin())
	return offset
}

func (x *Margin) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *Margin) fastWriteField6(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetUpdateTime())
	return offset
}

func (x *Discount) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Discount) fastWriteField1(buf []byte) (offset int) {
	if x.Num == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetNum())
	return offset
}

func (x *Discount) fastWriteField2(buf []byte) (offset int) {
	if x.Rate == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetRate())
	return offset
}

func (x *Discount) fastWriteField3(buf []byte) (offset int) {
	if x.Low == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetLow())
	return offset
}

func (x *Gradient) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Gradient) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Gradient) fastWriteField2(buf []byte) (offset int) {
	if x.BaseInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetBaseInterfaceId())
	return offset
}

func (x *Gradient) fastWriteField3(buf []byte) (offset int) {
	if x.Discounts == nil {
		return offset
	}
	for i := range x.GetDiscounts() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetDiscounts()[i])
	}
	return offset
}

func (x *Gradient) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetStatus()))
	return offset
}

func (x *Gradient) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *Gradient) fastWriteField6(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetUpdateTime())
	return offset
}

func (x *Log) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *Log) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Log) fastWriteField2(buf []byte) (offset int) {
	if x.FullInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFullInterfaceId())
	return offset
}

func (x *Log) fastWriteField3(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUserId())
	return offset
}

func (x *Log) fastWriteField4(buf []byte) (offset int) {
	if x.KeyId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetKeyId())
	return offset
}

func (x *Log) fastWriteField5(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetStatus()))
	return offset
}

func (x *Log) fastWriteField6(buf []byte) (offset int) {
	if x.Info == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetInfo())
	return offset
}

func (x *Log) fastWriteField7(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCount())
	return offset
}

func (x *Log) fastWriteField8(buf []byte) (offset int) {
	if x.Value == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetValue())
	return offset
}

func (x *Log) fastWriteField9(buf []byte) (offset int) {
	if x.Timestamp == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetTimestamp())
	return offset
}

func (x *Log) fastWriteField10(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetCreateTime())
	return offset
}

func (x *Account) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Account) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Account) fastWriteField2(buf []byte) (offset int) {
	if x.TxId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTxId())
	return offset
}

func (x *Account) fastWriteField3(buf []byte) (offset int) {
	if x.Increment == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetIncrement())
	return offset
}

func (x *Account) fastWriteField4(buf []byte) (offset int) {
	if x.MarginId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetMarginId())
	return offset
}

func (x *Account) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *Parameter) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Parameter) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *Parameter) sizeField2() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetType())
	return n
}

func (x *BaseInterface) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *BaseInterface) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *BaseInterface) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *BaseInterface) sizeField3() (n int) {
	if x.Host == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetHost())
	return n
}

func (x *BaseInterface) sizeField4() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPath())
	return n
}

func (x *BaseInterface) sizeField5() (n int) {
	if x.Method == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetMethod()))
	return n
}

func (x *BaseInterface) sizeField6() (n int) {
	if x.PassWay == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetPassWay()))
	return n
}

func (x *BaseInterface) sizeField7() (n int) {
	if x.Params == nil {
		return n
	}
	for i := range x.GetParams() {
		n += fastpb.SizeMessage(7, x.GetParams()[i])
	}
	return n
}

func (x *BaseInterface) sizeField8() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetContent())
	return n
}

func (x *BaseInterface) sizeField9() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, int32(x.GetStatus()))
	return n
}

func (x *BaseInterface) sizeField10() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetCreateTime())
	return n
}

func (x *BaseInterface) sizeField11() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetUpdateTime())
	return n
}

func (x *FullInterface) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *FullInterface) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *FullInterface) sizeField2() (n int) {
	if x.BaseInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetBaseInterfaceId())
	return n
}

func (x *FullInterface) sizeField3() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUserId())
	return n
}

func (x *FullInterface) sizeField4() (n int) {
	if x.ChargeType == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetChargeType()))
	return n
}

func (x *FullInterface) sizeField5() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetPrice())
	return n
}

func (x *FullInterface) sizeField7() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, int32(x.GetStatus()))
	return n
}

func (x *FullInterface) sizeField8() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetCreateTime())
	return n
}

func (x *FullInterface) sizeField9() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetUpdateTime())
	return n
}

func (x *Margin) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Margin) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Margin) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *Margin) sizeField3() (n int) {
	if x.FullInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFullInterfaceId())
	return n
}

func (x *Margin) sizeField4() (n int) {
	if x.Margin == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetMargin())
	return n
}

func (x *Margin) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *Margin) sizeField6() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetUpdateTime())
	return n
}

func (x *Discount) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Discount) sizeField1() (n int) {
	if x.Num == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetNum())
	return n
}

func (x *Discount) sizeField2() (n int) {
	if x.Rate == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetRate())
	return n
}

func (x *Discount) sizeField3() (n int) {
	if x.Low == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetLow())
	return n
}

func (x *Gradient) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Gradient) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Gradient) sizeField2() (n int) {
	if x.BaseInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetBaseInterfaceId())
	return n
}

func (x *Gradient) sizeField3() (n int) {
	if x.Discounts == nil {
		return n
	}
	for i := range x.GetDiscounts() {
		n += fastpb.SizeMessage(3, x.GetDiscounts()[i])
	}
	return n
}

func (x *Gradient) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetStatus()))
	return n
}

func (x *Gradient) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *Gradient) sizeField6() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetUpdateTime())
	return n
}

func (x *Log) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *Log) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Log) sizeField2() (n int) {
	if x.FullInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFullInterfaceId())
	return n
}

func (x *Log) sizeField3() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUserId())
	return n
}

func (x *Log) sizeField4() (n int) {
	if x.KeyId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetKeyId())
	return n
}

func (x *Log) sizeField5() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetStatus()))
	return n
}

func (x *Log) sizeField6() (n int) {
	if x.Info == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetInfo())
	return n
}

func (x *Log) sizeField7() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCount())
	return n
}

func (x *Log) sizeField8() (n int) {
	if x.Value == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetValue())
	return n
}

func (x *Log) sizeField9() (n int) {
	if x.Timestamp == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetTimestamp())
	return n
}

func (x *Log) sizeField10() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetCreateTime())
	return n
}

func (x *Account) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Account) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Account) sizeField2() (n int) {
	if x.TxId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTxId())
	return n
}

func (x *Account) sizeField3() (n int) {
	if x.Increment == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetIncrement())
	return n
}

func (x *Account) sizeField4() (n int) {
	if x.MarginId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetMarginId())
	return n
}

func (x *Account) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

var fieldIDToName_Parameter = map[int32]string{
	1: "Name",
	2: "Type",
}

var fieldIDToName_BaseInterface = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "Host",
	4:  "Path",
	5:  "Method",
	6:  "PassWay",
	7:  "Params",
	8:  "Content",
	9:  "Status",
	10: "CreateTime",
	11: "UpdateTime",
}

var fieldIDToName_FullInterface = map[int32]string{
	1: "Id",
	2: "BaseInterfaceId",
	3: "UserId",
	4: "ChargeType",
	5: "Price",
	7: "Status",
	8: "CreateTime",
	9: "UpdateTime",
}

var fieldIDToName_Margin = map[int32]string{
	1: "Id",
	2: "UserId",
	3: "FullInterfaceId",
	4: "Margin",
	5: "CreateTime",
	6: "UpdateTime",
}

var fieldIDToName_Discount = map[int32]string{
	1: "Num",
	2: "Rate",
	3: "Low",
}

var fieldIDToName_Gradient = map[int32]string{
	1: "Id",
	2: "BaseInterfaceId",
	3: "Discounts",
	4: "Status",
	5: "CreateTime",
	6: "UpdateTime",
}

var fieldIDToName_Log = map[int32]string{
	1:  "Id",
	2:  "FullInterfaceId",
	3:  "UserId",
	4:  "KeyId",
	5:  "Status",
	6:  "Info",
	7:  "Count",
	8:  "Value",
	9:  "Timestamp",
	10: "CreateTime",
}

var fieldIDToName_Account = map[int32]string{
	1: "Id",
	2: "TxId",
	3: "Increment",
	4: "MarginId",
	5: "CreateTime",
}
