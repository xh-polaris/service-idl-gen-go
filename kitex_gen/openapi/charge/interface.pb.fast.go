// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package charge

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateBaseInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateBaseInterfaceReq[number], err)
}

func (x *CreateBaseInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBaseInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Host, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBaseInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBaseInterfaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Method = MethodType(v)
	return offset, nil
}

func (x *CreateBaseInterfaceReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PassWay = PassWayType(v)
	return offset, nil
}

func (x *CreateBaseInterfaceReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v Parameter
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Params = append(x.Params, &v)
	return offset, nil
}

func (x *CreateBaseInterfaceReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBaseInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateBaseInterfaceResp[number], err)
}

func (x *CreateBaseInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateBaseInterfaceResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateBaseInterfaceReq[number], err)
}

func (x *UpdateBaseInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Host, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Method = MethodType(v)
	return offset, nil
}

func (x *UpdateBaseInterfaceReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PassWay = PassWayType(v)
	return offset, nil
}

func (x *UpdateBaseInterfaceReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v Parameter
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Params = append(x.Params, &v)
	return offset, nil
}

func (x *UpdateBaseInterfaceReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = InterfaceStatus(v)
	return offset, nil
}

func (x *UpdateBaseInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateBaseInterfaceResp[number], err)
}

func (x *UpdateBaseInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteBaseInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteBaseInterfaceReq[number], err)
}

func (x *DeleteBaseInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteBaseInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteBaseInterfaceResp[number], err)
}

func (x *DeleteBaseInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *DeleteBaseInterfaceResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetBaseInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetBaseInterfaceReq[number], err)
}

func (x *GetBaseInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetBaseInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetBaseInterfaceResp[number], err)
}

func (x *GetBaseInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseInterface
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseInterfaces = append(x.BaseInterfaces, &v)
	return offset, nil
}

func (x *GetBaseInterfaceResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateFullInterfaceReq[number], err)
}

func (x *CreateFullInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BaseInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ChargeType = ChargeType(v)
	return offset, nil
}

func (x *CreateFullInterfaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Margin, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateFullInterfaceResp[number], err)
}

func (x *CreateFullInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FullInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFullInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateFullInterfaceReq[number], err)
}

func (x *UpdateFullInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFullInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ChargeType = ChargeType(v)
	return offset, nil
}

func (x *UpdateFullInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateFullInterfaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = InterfaceStatus(v)
	return offset, nil
}

func (x *UpdateFullInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateFullInterfaceResp[number], err)
}

func (x *UpdateFullInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateFullInterfaceResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMarginReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateMarginReq[number], err)
}

func (x *UpdateMarginReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMarginReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Increment, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateMarginResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateMarginResp[number], err)
}

func (x *UpdateMarginResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateMarginResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteFullInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteFullInterfaceReq[number], err)
}

func (x *DeleteFullInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteFullInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteFullInterfaceResp[number], err)
}

func (x *DeleteFullInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *DeleteFullInterfaceResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFullInterfaceReq[number], err)
}

func (x *GetFullInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetFullInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFullInterfaceResp[number], err)
}

func (x *GetFullInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FullInterface
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FullInterfaces = append(x.FullInterfaces, &v)
	return offset, nil
}

func (x *GetFullInterfaceResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFullAndBaseInterfaceForCheckReq[number], err)
}

func (x *GetFullAndBaseInterfaceForCheckReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Method, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFullAndBaseInterfaceForCheckResp[number], err)
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BaseInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.BaseInterfaceStatus, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ChargeType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Margin, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetOneFullInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetOneFullInterfaceReq[number], err)
}

func (x *GetOneFullInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetOneFullInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetOneFullInterfaceResp[number], err)
}

func (x *GetOneFullInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FullInterface
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Inf = &v
	return offset, nil
}

func (x *CreateGradientReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateGradientReq[number], err)
}

func (x *CreateGradientReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FullInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateGradientReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Discount
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Discounts = append(x.Discounts, &v)
	return offset, nil
}

func (x *CreateGradientResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateGradientResp[number], err)
}

func (x *CreateGradientResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateGradientResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateGradientReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateGradientReq[number], err)
}

func (x *UpdateGradientReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateGradientReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Discount
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Discounts = append(x.Discounts, &v)
	return offset, nil
}

func (x *UpdateGradientReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = InterfaceStatus(v)
	return offset, nil
}

func (x *UpdateGradientResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateGradientResp[number], err)
}

func (x *UpdateGradientResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateGradientResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetGradientReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGradientReq[number], err)
}

func (x *GetGradientReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FullInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetGradientResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGradientResp[number], err)
}

func (x *GetGradientResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Gradient
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Gradient = &v
	return offset, nil
}

func (x *CreateBaseInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.Host == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetHost())
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPath())
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Method == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetMethod()))
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField5(buf []byte) (offset int) {
	if x.PassWay == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetPassWay()))
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField6(buf []byte) (offset int) {
	if x.Params == nil {
		return offset
	}
	for i := range x.GetParams() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetParams()[i])
	}
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField7(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetContent())
	return offset
}

func (x *CreateBaseInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateBaseInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *CreateBaseInterfaceResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *UpdateBaseInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.Host == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetHost())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPath())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField5(buf []byte) (offset int) {
	if x.Method == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetMethod()))
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField6(buf []byte) (offset int) {
	if x.PassWay == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetPassWay()))
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField7(buf []byte) (offset int) {
	if x.Params == nil {
		return offset
	}
	for i := range x.GetParams() {
		offset += fastpb.WriteMessage(buf[offset:], 7, x.GetParams()[i])
	}
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField8(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetContent())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField9(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, int32(x.GetStatus()))
	return offset
}

func (x *UpdateBaseInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateBaseInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *UpdateBaseInterfaceResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *DeleteBaseInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteBaseInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteBaseInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteBaseInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *DeleteBaseInterfaceResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetBaseInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetBaseInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *GetBaseInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetBaseInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseInterfaces == nil {
		return offset
	}
	for i := range x.GetBaseInterfaces() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseInterfaces()[i])
	}
	return offset
}

func (x *GetBaseInterfaceResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *CreateFullInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *CreateFullInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.BaseInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetBaseInterfaceId())
	return offset
}

func (x *CreateFullInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *CreateFullInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.ChargeType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetChargeType()))
	return offset
}

func (x *CreateFullInterfaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetPrice())
	return offset
}

func (x *CreateFullInterfaceReq) fastWriteField5(buf []byte) (offset int) {
	if x.Margin == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetMargin())
	return offset
}

func (x *CreateFullInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateFullInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *CreateFullInterfaceResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *CreateFullInterfaceResp) fastWriteField3(buf []byte) (offset int) {
	if x.FullInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetFullInterfaceId())
	return offset
}

func (x *UpdateFullInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *UpdateFullInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateFullInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.ChargeType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetChargeType()))
	return offset
}

func (x *UpdateFullInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetPrice())
	return offset
}

func (x *UpdateFullInterfaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetStatus()))
	return offset
}

func (x *UpdateFullInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateFullInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *UpdateFullInterfaceResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *UpdateMarginReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateMarginReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateMarginReq) fastWriteField2(buf []byte) (offset int) {
	if x.Increment == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetIncrement())
	return offset
}

func (x *UpdateMarginResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateMarginResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *UpdateMarginResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *DeleteFullInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteFullInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteFullInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteFullInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *DeleteFullInterfaceResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetFullInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFullInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetFullInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaginationOptions())
	return offset
}

func (x *GetFullInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFullInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if x.FullInterfaces == nil {
		return offset
	}
	for i := range x.GetFullInterfaces() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFullInterfaces()[i])
	}
	return offset
}

func (x *GetFullInterfaceResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckReq) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckReq) fastWriteField2(buf []byte) (offset int) {
	if x.Method == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMethod())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckReq) fastWriteField3(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUserId())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastWriteField2(buf []byte) (offset int) {
	if x.BaseInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetBaseInterfaceId())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastWriteField3(buf []byte) (offset int) {
	if x.BaseInterfaceStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetBaseInterfaceStatus())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastWriteField4(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetUserId())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastWriteField5(buf []byte) (offset int) {
	if x.ChargeType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetChargeType())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastWriteField6(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetPrice())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastWriteField7(buf []byte) (offset int) {
	if x.Margin == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetMargin())
	return offset
}

func (x *GetFullAndBaseInterfaceForCheckResp) fastWriteField8(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetStatus())
	return offset
}

func (x *GetOneFullInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetOneFullInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetOneFullInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetOneFullInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if x.Inf == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetInf())
	return offset
}

func (x *CreateGradientReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateGradientReq) fastWriteField1(buf []byte) (offset int) {
	if x.FullInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFullInterfaceId())
	return offset
}

func (x *CreateGradientReq) fastWriteField2(buf []byte) (offset int) {
	if x.Discounts == nil {
		return offset
	}
	for i := range x.GetDiscounts() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetDiscounts()[i])
	}
	return offset
}

func (x *CreateGradientResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateGradientResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *CreateGradientResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *UpdateGradientReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UpdateGradientReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateGradientReq) fastWriteField2(buf []byte) (offset int) {
	if x.Discounts == nil {
		return offset
	}
	for i := range x.GetDiscounts() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetDiscounts()[i])
	}
	return offset
}

func (x *UpdateGradientReq) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetStatus()))
	return offset
}

func (x *UpdateGradientResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateGradientResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *UpdateGradientResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetGradientReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetGradientReq) fastWriteField1(buf []byte) (offset int) {
	if x.FullInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFullInterfaceId())
	return offset
}

func (x *GetGradientResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetGradientResp) fastWriteField1(buf []byte) (offset int) {
	if x.Gradient == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetGradient())
	return offset
}

func (x *CreateBaseInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *CreateBaseInterfaceReq) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *CreateBaseInterfaceReq) sizeField2() (n int) {
	if x.Host == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetHost())
	return n
}

func (x *CreateBaseInterfaceReq) sizeField3() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPath())
	return n
}

func (x *CreateBaseInterfaceReq) sizeField4() (n int) {
	if x.Method == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetMethod()))
	return n
}

func (x *CreateBaseInterfaceReq) sizeField5() (n int) {
	if x.PassWay == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetPassWay()))
	return n
}

func (x *CreateBaseInterfaceReq) sizeField6() (n int) {
	if x.Params == nil {
		return n
	}
	for i := range x.GetParams() {
		n += fastpb.SizeMessage(6, x.GetParams()[i])
	}
	return n
}

func (x *CreateBaseInterfaceReq) sizeField7() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetContent())
	return n
}

func (x *CreateBaseInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateBaseInterfaceResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *CreateBaseInterfaceResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *UpdateBaseInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField3() (n int) {
	if x.Host == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetHost())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField4() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPath())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField5() (n int) {
	if x.Method == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetMethod()))
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField6() (n int) {
	if x.PassWay == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetPassWay()))
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField7() (n int) {
	if x.Params == nil {
		return n
	}
	for i := range x.GetParams() {
		n += fastpb.SizeMessage(7, x.GetParams()[i])
	}
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField8() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetContent())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField9() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, int32(x.GetStatus()))
	return n
}

func (x *UpdateBaseInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateBaseInterfaceResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *UpdateBaseInterfaceResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *DeleteBaseInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteBaseInterfaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteBaseInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteBaseInterfaceResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *DeleteBaseInterfaceResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetBaseInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetBaseInterfaceReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *GetBaseInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetBaseInterfaceResp) sizeField1() (n int) {
	if x.BaseInterfaces == nil {
		return n
	}
	for i := range x.GetBaseInterfaces() {
		n += fastpb.SizeMessage(1, x.GetBaseInterfaces()[i])
	}
	return n
}

func (x *GetBaseInterfaceResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *CreateFullInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *CreateFullInterfaceReq) sizeField1() (n int) {
	if x.BaseInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetBaseInterfaceId())
	return n
}

func (x *CreateFullInterfaceReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *CreateFullInterfaceReq) sizeField3() (n int) {
	if x.ChargeType == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetChargeType()))
	return n
}

func (x *CreateFullInterfaceReq) sizeField4() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetPrice())
	return n
}

func (x *CreateFullInterfaceReq) sizeField5() (n int) {
	if x.Margin == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetMargin())
	return n
}

func (x *CreateFullInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateFullInterfaceResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *CreateFullInterfaceResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *CreateFullInterfaceResp) sizeField3() (n int) {
	if x.FullInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetFullInterfaceId())
	return n
}

func (x *UpdateFullInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *UpdateFullInterfaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateFullInterfaceReq) sizeField2() (n int) {
	if x.ChargeType == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetChargeType()))
	return n
}

func (x *UpdateFullInterfaceReq) sizeField3() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetPrice())
	return n
}

func (x *UpdateFullInterfaceReq) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetStatus()))
	return n
}

func (x *UpdateFullInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateFullInterfaceResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *UpdateFullInterfaceResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *UpdateMarginReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateMarginReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateMarginReq) sizeField2() (n int) {
	if x.Increment == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetIncrement())
	return n
}

func (x *UpdateMarginResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateMarginResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *UpdateMarginResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *DeleteFullInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteFullInterfaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteFullInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteFullInterfaceResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *DeleteFullInterfaceResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetFullInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFullInterfaceReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetFullInterfaceReq) sizeField2() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaginationOptions())
	return n
}

func (x *GetFullInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFullInterfaceResp) sizeField1() (n int) {
	if x.FullInterfaces == nil {
		return n
	}
	for i := range x.GetFullInterfaces() {
		n += fastpb.SizeMessage(1, x.GetFullInterfaces()[i])
	}
	return n
}

func (x *GetFullInterfaceResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetFullAndBaseInterfaceForCheckReq) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckReq) sizeField2() (n int) {
	if x.Method == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMethod())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckReq) sizeField3() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUserId())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *GetFullAndBaseInterfaceForCheckResp) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckResp) sizeField2() (n int) {
	if x.BaseInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetBaseInterfaceId())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckResp) sizeField3() (n int) {
	if x.BaseInterfaceStatus == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetBaseInterfaceStatus())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckResp) sizeField4() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetUserId())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckResp) sizeField5() (n int) {
	if x.ChargeType == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetChargeType())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckResp) sizeField6() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetPrice())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckResp) sizeField7() (n int) {
	if x.Margin == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetMargin())
	return n
}

func (x *GetFullAndBaseInterfaceForCheckResp) sizeField8() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetStatus())
	return n
}

func (x *GetOneFullInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetOneFullInterfaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetOneFullInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetOneFullInterfaceResp) sizeField1() (n int) {
	if x.Inf == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetInf())
	return n
}

func (x *CreateGradientReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateGradientReq) sizeField1() (n int) {
	if x.FullInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFullInterfaceId())
	return n
}

func (x *CreateGradientReq) sizeField2() (n int) {
	if x.Discounts == nil {
		return n
	}
	for i := range x.GetDiscounts() {
		n += fastpb.SizeMessage(2, x.GetDiscounts()[i])
	}
	return n
}

func (x *CreateGradientResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateGradientResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *CreateGradientResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *UpdateGradientReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UpdateGradientReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateGradientReq) sizeField2() (n int) {
	if x.Discounts == nil {
		return n
	}
	for i := range x.GetDiscounts() {
		n += fastpb.SizeMessage(2, x.GetDiscounts()[i])
	}
	return n
}

func (x *UpdateGradientReq) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetStatus()))
	return n
}

func (x *UpdateGradientResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateGradientResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *UpdateGradientResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetGradientReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetGradientReq) sizeField1() (n int) {
	if x.FullInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFullInterfaceId())
	return n
}

func (x *GetGradientResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetGradientResp) sizeField1() (n int) {
	if x.Gradient == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetGradient())
	return n
}

var fieldIDToName_CreateBaseInterfaceReq = map[int32]string{
	1: "Name",
	2: "Host",
	3: "Path",
	4: "Method",
	5: "PassWay",
	6: "Params",
	7: "Content",
}

var fieldIDToName_CreateBaseInterfaceResp = map[int32]string{
	1: "Done",
	2: "Msg",
}

var fieldIDToName_UpdateBaseInterfaceReq = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Host",
	4: "Path",
	5: "Method",
	6: "PassWay",
	7: "Params",
	8: "Content",
	9: "Status",
}

var fieldIDToName_UpdateBaseInterfaceResp = map[int32]string{
	1: "Done",
	2: "Msg",
}

var fieldIDToName_DeleteBaseInterfaceReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteBaseInterfaceResp = map[int32]string{
	1: "Done",
	2: "Msg",
}

var fieldIDToName_GetBaseInterfaceReq = map[int32]string{
	1: "PaginationOptions",
}

var fieldIDToName_GetBaseInterfaceResp = map[int32]string{
	1: "BaseInterfaces",
	2: "Total",
}

var fieldIDToName_CreateFullInterfaceReq = map[int32]string{
	1: "BaseInterfaceId",
	2: "UserId",
	3: "ChargeType",
	4: "Price",
	5: "Margin",
}

var fieldIDToName_CreateFullInterfaceResp = map[int32]string{
	1: "Done",
	2: "Msg",
	3: "FullInterfaceId",
}

var fieldIDToName_UpdateFullInterfaceReq = map[int32]string{
	1: "Id",
	2: "ChargeType",
	3: "Price",
	4: "Status",
}

var fieldIDToName_UpdateFullInterfaceResp = map[int32]string{
	1: "Done",
	2: "Msg",
}

var fieldIDToName_UpdateMarginReq = map[int32]string{
	1: "Id",
	2: "Increment",
}

var fieldIDToName_UpdateMarginResp = map[int32]string{
	1: "Done",
	2: "Msg",
}

var fieldIDToName_DeleteFullInterfaceReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteFullInterfaceResp = map[int32]string{
	1: "Done",
	2: "Msg",
}

var fieldIDToName_GetFullInterfaceReq = map[int32]string{
	1: "UserId",
	2: "PaginationOptions",
}

var fieldIDToName_GetFullInterfaceResp = map[int32]string{
	1: "FullInterfaces",
	2: "Total",
}

var fieldIDToName_GetFullAndBaseInterfaceForCheckReq = map[int32]string{
	1: "Url",
	2: "Method",
	3: "UserId",
}

var fieldIDToName_GetFullAndBaseInterfaceForCheckResp = map[int32]string{
	1: "Id",
	2: "BaseInterfaceId",
	3: "BaseInterfaceStatus",
	4: "UserId",
	5: "ChargeType",
	6: "Price",
	7: "Margin",
	8: "Status",
}

var fieldIDToName_GetOneFullInterfaceReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetOneFullInterfaceResp = map[int32]string{
	1: "Inf",
}

var fieldIDToName_CreateGradientReq = map[int32]string{
	1: "FullInterfaceId",
	2: "Discounts",
}

var fieldIDToName_CreateGradientResp = map[int32]string{
	1: "Done",
	2: "Msg",
}

var fieldIDToName_UpdateGradientReq = map[int32]string{
	1: "Id",
	2: "Discounts",
	3: "Status",
}

var fieldIDToName_UpdateGradientResp = map[int32]string{
	1: "Done",
	2: "Msg",
}

var fieldIDToName_GetGradientReq = map[int32]string{
	1: "FullInterfaceId",
}

var fieldIDToName_GetGradientResp = map[int32]string{
	1: "Gradient",
}

var _ = basic.File_basic_pagination_proto
var _ = basic.File_basic_user_proto
