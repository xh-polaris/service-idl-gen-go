// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
	charge "github.com/xh-polaris/service-idl-gen-go/kitex_gen/openapi/charge"
	user "github.com/xh-polaris/service-idl-gen-go/kitex_gen/openapi/user"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SignUpReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignUpReq[number], err)
}

func (x *SignUpReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Password = &tmp
	return offset, err
}

func (x *SignUpReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.VerifyCode = &tmp
	return offset, err
}

func (x *SignUpReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Role = user.Role(v)
	return offset, nil
}

func (x *SignUpResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignUpResp[number], err)
}

func (x *SignUpResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccessExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SignInReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignInReq[number], err)
}

func (x *SignInReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Password = &tmp
	return offset, err
}

func (x *SignInReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.VerifyCode = &tmp
	return offset, err
}

func (x *SignInResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SignInResp[number], err)
}

func (x *SignInResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignInResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AccessExpire, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetUserInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserInfoResp[number], err)
}

func (x *GetUserInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Role = user.Role(v)
	return offset, nil
}

func (x *GetUserInfoResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Auth, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = user.UserStatus(v)
	return offset, nil
}

func (x *SetUserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SetUserInfoReq[number], err)
}

func (x *SetUserInfoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Username = &tmp
	return offset, err
}

func (x *SetUserInfoReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = user.UserStatus(v).Enum()
	return offset, nil
}

func (x *GenerateKeyReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenerateKeyReq[number], err)
}

func (x *GenerateKeyReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenerateKeyReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Hosts = append(x.Hosts, v)
	return offset, err
}

func (x *GetKeysReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetKeysReq[number], err)
}

func (x *GetKeysReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetKeysResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetKeysResp[number], err)
}

func (x *GetKeysResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v user.Key
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Keys = append(x.Keys, &v)
	return offset, nil
}

func (x *GetKeysResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateKeyReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateKeyReq[number], err)
}

func (x *UpdateKeyReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateKeyReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Name = &tmp
	return offset, err
}

func (x *UpdateKeyReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = user.KeyStatus(v).Enum()
	return offset, nil
}

func (x *UpdateKeyReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Timestamp = &tmp
	return offset, err
}

func (x *UpdateKeyReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.ExpireTime = &tmp
	return offset, err
}

func (x *RefreshKeyReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefreshKeyReq[number], err)
}

func (x *RefreshKeyReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateHostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateHostReq[number], err)
}

func (x *UpdateHostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateHostReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Hosts = append(x.Hosts, v)
	return offset, err
}

func (x *DeleteKeyReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteKeyReq[number], err)
}

func (x *DeleteKeyReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBaseInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateBaseInterfaceReq[number], err)
}

func (x *CreateBaseInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBaseInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Host, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBaseInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBaseInterfaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Method = charge.MethodType(v)
	return offset, nil
}

func (x *CreateBaseInterfaceReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PassWay = charge.PassWayType(v)
	return offset, nil
}

func (x *CreateBaseInterfaceReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v charge.Parameter
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Params = append(x.Params, &v)
	return offset, nil
}

func (x *CreateBaseInterfaceReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateBaseInterfaceReq[number], err)
}

func (x *UpdateBaseInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Host, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Method = charge.MethodType(v)
	return offset, nil
}

func (x *UpdateBaseInterfaceReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PassWay = charge.PassWayType(v)
	return offset, nil
}

func (x *UpdateBaseInterfaceReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v charge.Parameter
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Params = append(x.Params, &v)
	return offset, nil
}

func (x *UpdateBaseInterfaceReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateBaseInterfaceReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = charge.InterfaceStatus(v)
	return offset, nil
}

func (x *DeleteBaseInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteBaseInterfaceReq[number], err)
}

func (x *DeleteBaseInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetBaseInterfacesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetBaseInterfacesReq[number], err)
}

func (x *GetBaseInterfacesReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetBaseInterfacesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetBaseInterfacesResp[number], err)
}

func (x *GetBaseInterfacesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v charge.BaseInterface
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseInterfaces = append(x.BaseInterfaces, &v)
	return offset, nil
}

func (x *GetBaseInterfacesResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateFullInterfaceReq[number], err)
}

func (x *CreateFullInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BaseInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateFullInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ChargeType = charge.ChargeType(v)
	return offset, nil
}

func (x *CreateFullInterfaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateFullInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateFullInterfaceReq[number], err)
}

func (x *UpdateFullInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateFullInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ChargeType = charge.ChargeType(v)
	return offset, nil
}

func (x *UpdateFullInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateFullInterfaceReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = charge.InterfaceStatus(v)
	return offset, nil
}

func (x *UpdateMarginReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateMarginReq[number], err)
}

func (x *UpdateMarginReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMarginReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Increment, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteFullInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteFullInterfaceReq[number], err)
}

func (x *DeleteFullInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullInterfacesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFullInterfacesReq[number], err)
}

func (x *GetFullInterfacesReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFullInterfacesReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetFullInterfacesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFullInterfacesResp[number], err)
}

func (x *GetFullInterfacesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v charge.FullInterface
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FullInterfaces = append(x.FullInterfaces, &v)
	return offset, nil
}

func (x *GetFullInterfacesResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BuyFullInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BuyFullInterfaceReq[number], err)
}

func (x *BuyFullInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FullInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BuyFullInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Increment, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BuyFullInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Discount, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateGradientReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateGradientReq[number], err)
}

func (x *CreateGradientReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BaseInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateGradientReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v charge.Discount
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Discounts = append(x.Discounts, &v)
	return offset, nil
}

func (x *UpdateGradientReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateGradientReq[number], err)
}

func (x *UpdateGradientReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateGradientReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v charge.Discount
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Discounts = append(x.Discounts, &v)
	return offset, nil
}

func (x *UpdateGradientReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = charge.InterfaceStatus(v)
	return offset, nil
}

func (x *GetGradientReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGradientReq[number], err)
}

func (x *GetGradientReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BaseInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetGradientResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetGradientResp[number], err)
}

func (x *GetGradientResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v charge.Gradient
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Gradient = &v
	return offset, nil
}

func (x *GetLogReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLogReq[number], err)
}

func (x *GetLogReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FullInterfaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLogReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *GetLogResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLogResp[number], err)
}

func (x *GetLogResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v charge.Log
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Logs = append(x.Logs, &v)
	return offset, nil
}

func (x *GetLogResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CallInterfaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CallInterfaceReq[number], err)
}

func (x *CallInterfaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CallInterfaceReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Method, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CallInterfaceReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Action, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CallInterfaceReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Timestamp, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CallInterfaceReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Params, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CallInterfaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CallInterfaceResp[number], err)
}

func (x *CallInterfaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CallInterfaceResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CallInterfaceResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Result, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Response) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Response[number], err)
}

func (x *Response) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Response) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SignUpReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SignUpReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthType())
	return offset
}

func (x *SignUpReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthId())
	return offset
}

func (x *SignUpReq) fastWriteField3(buf []byte) (offset int) {
	if x.Password == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPassword())
	return offset
}

func (x *SignUpReq) fastWriteField4(buf []byte) (offset int) {
	if x.VerifyCode == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetVerifyCode())
	return offset
}

func (x *SignUpReq) fastWriteField5(buf []byte) (offset int) {
	if x.Role == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetRole()))
	return offset
}

func (x *SignUpResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SignUpResp) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *SignUpResp) fastWriteField2(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAccessToken())
	return offset
}

func (x *SignUpResp) fastWriteField3(buf []byte) (offset int) {
	if x.AccessExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetAccessExpire())
	return offset
}

func (x *SignInReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SignInReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthType())
	return offset
}

func (x *SignInReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthId())
	return offset
}

func (x *SignInReq) fastWriteField3(buf []byte) (offset int) {
	if x.Password == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPassword())
	return offset
}

func (x *SignInReq) fastWriteField4(buf []byte) (offset int) {
	if x.VerifyCode == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetVerifyCode())
	return offset
}

func (x *SignInResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SignInResp) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *SignInResp) fastWriteField2(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAccessToken())
	return offset
}

func (x *SignInResp) fastWriteField3(buf []byte) (offset int) {
	if x.AccessExpire == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetAccessExpire())
	return offset
}

func (x *GetUserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetUserInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GetUserInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *GetUserInfoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Role == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetRole()))
	return offset
}

func (x *GetUserInfoResp) fastWriteField3(buf []byte) (offset int) {
	if !x.Auth {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetAuth())
	return offset
}

func (x *GetUserInfoResp) fastWriteField4(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetAuthId())
	return offset
}

func (x *GetUserInfoResp) fastWriteField5(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetStatus()))
	return offset
}

func (x *SetUserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SetUserInfoReq) fastWriteField2(buf []byte) (offset int) {
	if x.Username == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUsername())
	return offset
}

func (x *SetUserInfoReq) fastWriteField3(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetStatus()))
	return offset
}

func (x *GenerateKeyReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GenerateKeyReq) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *GenerateKeyReq) fastWriteField2(buf []byte) (offset int) {
	if len(x.Hosts) == 0 {
		return offset
	}
	for i := range x.GetHosts() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetHosts()[i])
	}
	return offset
}

func (x *GetKeysReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetKeysReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *GetKeysResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetKeysResp) fastWriteField1(buf []byte) (offset int) {
	if x.Keys == nil {
		return offset
	}
	for i := range x.GetKeys() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetKeys()[i])
	}
	return offset
}

func (x *GetKeysResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *UpdateKeyReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *UpdateKeyReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateKeyReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdateKeyReq) fastWriteField3(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetStatus()))
	return offset
}

func (x *UpdateKeyReq) fastWriteField4(buf []byte) (offset int) {
	if x.Timestamp == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTimestamp())
	return offset
}

func (x *UpdateKeyReq) fastWriteField5(buf []byte) (offset int) {
	if x.ExpireTime == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetExpireTime())
	return offset
}

func (x *RefreshKeyReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RefreshKeyReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateHostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateHostReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateHostReq) fastWriteField2(buf []byte) (offset int) {
	if len(x.Hosts) == 0 {
		return offset
	}
	for i := range x.GetHosts() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetHosts()[i])
	}
	return offset
}

func (x *DeleteKeyReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteKeyReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *CreateBaseInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.Host == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetHost())
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPath())
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Method == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetMethod()))
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField5(buf []byte) (offset int) {
	if x.PassWay == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetPassWay()))
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField6(buf []byte) (offset int) {
	if x.Params == nil {
		return offset
	}
	for i := range x.GetParams() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetParams()[i])
	}
	return offset
}

func (x *CreateBaseInterfaceReq) fastWriteField7(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetContent())
	return offset
}

func (x *UpdateBaseInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.Host == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetHost())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPath())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField5(buf []byte) (offset int) {
	if x.Method == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetMethod()))
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField6(buf []byte) (offset int) {
	if x.PassWay == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetPassWay()))
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField7(buf []byte) (offset int) {
	if x.Params == nil {
		return offset
	}
	for i := range x.GetParams() {
		offset += fastpb.WriteMessage(buf[offset:], 7, x.GetParams()[i])
	}
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField8(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetContent())
	return offset
}

func (x *UpdateBaseInterfaceReq) fastWriteField9(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, int32(x.GetStatus()))
	return offset
}

func (x *DeleteBaseInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteBaseInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetBaseInterfacesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetBaseInterfacesReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *GetBaseInterfacesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetBaseInterfacesResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseInterfaces == nil {
		return offset
	}
	for i := range x.GetBaseInterfaces() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBaseInterfaces()[i])
	}
	return offset
}

func (x *GetBaseInterfacesResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *CreateFullInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CreateFullInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.BaseInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetBaseInterfaceId())
	return offset
}

func (x *CreateFullInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *CreateFullInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.ChargeType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetChargeType()))
	return offset
}

func (x *CreateFullInterfaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetPrice())
	return offset
}

func (x *UpdateFullInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *UpdateFullInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateFullInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.ChargeType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetChargeType()))
	return offset
}

func (x *UpdateFullInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetPrice())
	return offset
}

func (x *UpdateFullInterfaceReq) fastWriteField4(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetStatus()))
	return offset
}

func (x *UpdateMarginReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateMarginReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateMarginReq) fastWriteField2(buf []byte) (offset int) {
	if x.Increment == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetIncrement())
	return offset
}

func (x *DeleteFullInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteFullInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetFullInterfacesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFullInterfacesReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetFullInterfacesReq) fastWriteField2(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaginationOptions())
	return offset
}

func (x *GetFullInterfacesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFullInterfacesResp) fastWriteField1(buf []byte) (offset int) {
	if x.FullInterfaces == nil {
		return offset
	}
	for i := range x.GetFullInterfaces() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFullInterfaces()[i])
	}
	return offset
}

func (x *GetFullInterfacesResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *BuyFullInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *BuyFullInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.FullInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFullInterfaceId())
	return offset
}

func (x *BuyFullInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.Increment == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetIncrement())
	return offset
}

func (x *BuyFullInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if !x.Discount {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetDiscount())
	return offset
}

func (x *CreateGradientReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateGradientReq) fastWriteField1(buf []byte) (offset int) {
	if x.BaseInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetBaseInterfaceId())
	return offset
}

func (x *CreateGradientReq) fastWriteField2(buf []byte) (offset int) {
	if x.Discounts == nil {
		return offset
	}
	for i := range x.GetDiscounts() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetDiscounts()[i])
	}
	return offset
}

func (x *UpdateGradientReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UpdateGradientReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateGradientReq) fastWriteField2(buf []byte) (offset int) {
	if x.Discounts == nil {
		return offset
	}
	for i := range x.GetDiscounts() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetDiscounts()[i])
	}
	return offset
}

func (x *UpdateGradientReq) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetStatus()))
	return offset
}

func (x *GetGradientReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetGradientReq) fastWriteField1(buf []byte) (offset int) {
	if x.BaseInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetBaseInterfaceId())
	return offset
}

func (x *GetGradientResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetGradientResp) fastWriteField1(buf []byte) (offset int) {
	if x.Gradient == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetGradient())
	return offset
}

func (x *GetLogReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetLogReq) fastWriteField1(buf []byte) (offset int) {
	if x.FullInterfaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFullInterfaceId())
	return offset
}

func (x *GetLogReq) fastWriteField2(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaginationOptions())
	return offset
}

func (x *GetLogResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetLogResp) fastWriteField1(buf []byte) (offset int) {
	if x.Logs == nil {
		return offset
	}
	for i := range x.GetLogs() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLogs()[i])
	}
	return offset
}

func (x *GetLogResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *CallInterfaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *CallInterfaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKey())
	return offset
}

func (x *CallInterfaceReq) fastWriteField2(buf []byte) (offset int) {
	if x.Method == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMethod())
	return offset
}

func (x *CallInterfaceReq) fastWriteField3(buf []byte) (offset int) {
	if x.Action == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAction())
	return offset
}

func (x *CallInterfaceReq) fastWriteField5(buf []byte) (offset int) {
	if x.Timestamp == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetTimestamp())
	return offset
}

func (x *CallInterfaceReq) fastWriteField6(buf []byte) (offset int) {
	if x.Params == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetParams())
	return offset
}

func (x *CallInterfaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CallInterfaceResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *CallInterfaceResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *CallInterfaceResp) fastWriteField3(buf []byte) (offset int) {
	if x.Result == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetResult())
	return offset
}

func (x *Response) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Response) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *Response) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *SignUpReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SignUpReq) sizeField1() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthType())
	return n
}

func (x *SignUpReq) sizeField2() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthId())
	return n
}

func (x *SignUpReq) sizeField3() (n int) {
	if x.Password == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetPassword())
	return n
}

func (x *SignUpReq) sizeField4() (n int) {
	if x.VerifyCode == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetVerifyCode())
	return n
}

func (x *SignUpReq) sizeField5() (n int) {
	if x.Role == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetRole()))
	return n
}

func (x *SignUpResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SignUpResp) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *SignUpResp) sizeField2() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAccessToken())
	return n
}

func (x *SignUpResp) sizeField3() (n int) {
	if x.AccessExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetAccessExpire())
	return n
}

func (x *SignInReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SignInReq) sizeField1() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthType())
	return n
}

func (x *SignInReq) sizeField2() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthId())
	return n
}

func (x *SignInReq) sizeField3() (n int) {
	if x.Password == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetPassword())
	return n
}

func (x *SignInReq) sizeField4() (n int) {
	if x.VerifyCode == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetVerifyCode())
	return n
}

func (x *SignInResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SignInResp) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *SignInResp) sizeField2() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAccessToken())
	return n
}

func (x *SignInResp) sizeField3() (n int) {
	if x.AccessExpire == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetAccessExpire())
	return n
}

func (x *GetUserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetUserInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GetUserInfoResp) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *GetUserInfoResp) sizeField2() (n int) {
	if x.Role == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetRole()))
	return n
}

func (x *GetUserInfoResp) sizeField3() (n int) {
	if !x.Auth {
		return n
	}
	n += fastpb.SizeBool(3, x.GetAuth())
	return n
}

func (x *GetUserInfoResp) sizeField4() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetAuthId())
	return n
}

func (x *GetUserInfoResp) sizeField5() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetStatus()))
	return n
}

func (x *SetUserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SetUserInfoReq) sizeField2() (n int) {
	if x.Username == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetUsername())
	return n
}

func (x *SetUserInfoReq) sizeField3() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetStatus()))
	return n
}

func (x *GenerateKeyReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GenerateKeyReq) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *GenerateKeyReq) sizeField2() (n int) {
	if len(x.Hosts) == 0 {
		return n
	}
	for i := range x.GetHosts() {
		n += fastpb.SizeString(2, x.GetHosts()[i])
	}
	return n
}

func (x *GetKeysReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetKeysReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *GetKeysResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetKeysResp) sizeField1() (n int) {
	if x.Keys == nil {
		return n
	}
	for i := range x.GetKeys() {
		n += fastpb.SizeMessage(1, x.GetKeys()[i])
	}
	return n
}

func (x *GetKeysResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *UpdateKeyReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *UpdateKeyReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateKeyReq) sizeField2() (n int) {
	if x.Name == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdateKeyReq) sizeField3() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetStatus()))
	return n
}

func (x *UpdateKeyReq) sizeField4() (n int) {
	if x.Timestamp == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTimestamp())
	return n
}

func (x *UpdateKeyReq) sizeField5() (n int) {
	if x.ExpireTime == nil {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetExpireTime())
	return n
}

func (x *RefreshKeyReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RefreshKeyReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateHostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateHostReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateHostReq) sizeField2() (n int) {
	if len(x.Hosts) == 0 {
		return n
	}
	for i := range x.GetHosts() {
		n += fastpb.SizeString(2, x.GetHosts()[i])
	}
	return n
}

func (x *DeleteKeyReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteKeyReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *CreateBaseInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *CreateBaseInterfaceReq) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *CreateBaseInterfaceReq) sizeField2() (n int) {
	if x.Host == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetHost())
	return n
}

func (x *CreateBaseInterfaceReq) sizeField3() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPath())
	return n
}

func (x *CreateBaseInterfaceReq) sizeField4() (n int) {
	if x.Method == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetMethod()))
	return n
}

func (x *CreateBaseInterfaceReq) sizeField5() (n int) {
	if x.PassWay == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetPassWay()))
	return n
}

func (x *CreateBaseInterfaceReq) sizeField6() (n int) {
	if x.Params == nil {
		return n
	}
	for i := range x.GetParams() {
		n += fastpb.SizeMessage(6, x.GetParams()[i])
	}
	return n
}

func (x *CreateBaseInterfaceReq) sizeField7() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetContent())
	return n
}

func (x *UpdateBaseInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField3() (n int) {
	if x.Host == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetHost())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField4() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPath())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField5() (n int) {
	if x.Method == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetMethod()))
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField6() (n int) {
	if x.PassWay == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetPassWay()))
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField7() (n int) {
	if x.Params == nil {
		return n
	}
	for i := range x.GetParams() {
		n += fastpb.SizeMessage(7, x.GetParams()[i])
	}
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField8() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetContent())
	return n
}

func (x *UpdateBaseInterfaceReq) sizeField9() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, int32(x.GetStatus()))
	return n
}

func (x *DeleteBaseInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteBaseInterfaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetBaseInterfacesReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetBaseInterfacesReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *GetBaseInterfacesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetBaseInterfacesResp) sizeField1() (n int) {
	if x.BaseInterfaces == nil {
		return n
	}
	for i := range x.GetBaseInterfaces() {
		n += fastpb.SizeMessage(1, x.GetBaseInterfaces()[i])
	}
	return n
}

func (x *GetBaseInterfacesResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *CreateFullInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CreateFullInterfaceReq) sizeField1() (n int) {
	if x.BaseInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetBaseInterfaceId())
	return n
}

func (x *CreateFullInterfaceReq) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *CreateFullInterfaceReq) sizeField3() (n int) {
	if x.ChargeType == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetChargeType()))
	return n
}

func (x *CreateFullInterfaceReq) sizeField4() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetPrice())
	return n
}

func (x *UpdateFullInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *UpdateFullInterfaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateFullInterfaceReq) sizeField2() (n int) {
	if x.ChargeType == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetChargeType()))
	return n
}

func (x *UpdateFullInterfaceReq) sizeField3() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetPrice())
	return n
}

func (x *UpdateFullInterfaceReq) sizeField4() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetStatus()))
	return n
}

func (x *UpdateMarginReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateMarginReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateMarginReq) sizeField2() (n int) {
	if x.Increment == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetIncrement())
	return n
}

func (x *DeleteFullInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteFullInterfaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetFullInterfacesReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFullInterfacesReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetFullInterfacesReq) sizeField2() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaginationOptions())
	return n
}

func (x *GetFullInterfacesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFullInterfacesResp) sizeField1() (n int) {
	if x.FullInterfaces == nil {
		return n
	}
	for i := range x.GetFullInterfaces() {
		n += fastpb.SizeMessage(1, x.GetFullInterfaces()[i])
	}
	return n
}

func (x *GetFullInterfacesResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *BuyFullInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *BuyFullInterfaceReq) sizeField1() (n int) {
	if x.FullInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFullInterfaceId())
	return n
}

func (x *BuyFullInterfaceReq) sizeField2() (n int) {
	if x.Increment == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetIncrement())
	return n
}

func (x *BuyFullInterfaceReq) sizeField3() (n int) {
	if !x.Discount {
		return n
	}
	n += fastpb.SizeBool(3, x.GetDiscount())
	return n
}

func (x *CreateGradientReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateGradientReq) sizeField1() (n int) {
	if x.BaseInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetBaseInterfaceId())
	return n
}

func (x *CreateGradientReq) sizeField2() (n int) {
	if x.Discounts == nil {
		return n
	}
	for i := range x.GetDiscounts() {
		n += fastpb.SizeMessage(2, x.GetDiscounts()[i])
	}
	return n
}

func (x *UpdateGradientReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UpdateGradientReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateGradientReq) sizeField2() (n int) {
	if x.Discounts == nil {
		return n
	}
	for i := range x.GetDiscounts() {
		n += fastpb.SizeMessage(2, x.GetDiscounts()[i])
	}
	return n
}

func (x *UpdateGradientReq) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetStatus()))
	return n
}

func (x *GetGradientReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetGradientReq) sizeField1() (n int) {
	if x.BaseInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetBaseInterfaceId())
	return n
}

func (x *GetGradientResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetGradientResp) sizeField1() (n int) {
	if x.Gradient == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetGradient())
	return n
}

func (x *GetLogReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetLogReq) sizeField1() (n int) {
	if x.FullInterfaceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFullInterfaceId())
	return n
}

func (x *GetLogReq) sizeField2() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaginationOptions())
	return n
}

func (x *GetLogResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetLogResp) sizeField1() (n int) {
	if x.Logs == nil {
		return n
	}
	for i := range x.GetLogs() {
		n += fastpb.SizeMessage(1, x.GetLogs()[i])
	}
	return n
}

func (x *GetLogResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *CallInterfaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *CallInterfaceReq) sizeField1() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKey())
	return n
}

func (x *CallInterfaceReq) sizeField2() (n int) {
	if x.Method == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMethod())
	return n
}

func (x *CallInterfaceReq) sizeField3() (n int) {
	if x.Action == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAction())
	return n
}

func (x *CallInterfaceReq) sizeField5() (n int) {
	if x.Timestamp == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetTimestamp())
	return n
}

func (x *CallInterfaceReq) sizeField6() (n int) {
	if x.Params == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetParams())
	return n
}

func (x *CallInterfaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CallInterfaceResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *CallInterfaceResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *CallInterfaceResp) sizeField3() (n int) {
	if x.Result == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetResult())
	return n
}

func (x *Response) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Response) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *Response) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

var fieldIDToName_SignUpReq = map[int32]string{
	1: "AuthType",
	2: "AuthId",
	3: "Password",
	4: "VerifyCode",
	5: "Role",
}

var fieldIDToName_SignUpResp = map[int32]string{
	1: "UserId",
	2: "AccessToken",
	3: "AccessExpire",
}

var fieldIDToName_SignInReq = map[int32]string{
	1: "AuthType",
	2: "AuthId",
	3: "Password",
	4: "VerifyCode",
}

var fieldIDToName_SignInResp = map[int32]string{
	1: "UserId",
	2: "AccessToken",
	3: "AccessExpire",
}

var fieldIDToName_GetUserInfoReq = map[int32]string{}

var fieldIDToName_GetUserInfoResp = map[int32]string{
	1: "Username",
	2: "Role",
	3: "Auth",
	4: "AuthId",
	5: "Status",
}

var fieldIDToName_SetUserInfoReq = map[int32]string{
	2: "Username",
	3: "Status",
}

var fieldIDToName_GenerateKeyReq = map[int32]string{
	1: "Name",
	2: "Hosts",
}

var fieldIDToName_GetKeysReq = map[int32]string{
	1: "PaginationOptions",
}

var fieldIDToName_GetKeysResp = map[int32]string{
	1: "Keys",
	2: "Total",
}

var fieldIDToName_UpdateKeyReq = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Status",
	4: "Timestamp",
	5: "ExpireTime",
}

var fieldIDToName_RefreshKeyReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_UpdateHostReq = map[int32]string{
	1: "Id",
	2: "Hosts",
}

var fieldIDToName_DeleteKeyReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_CreateBaseInterfaceReq = map[int32]string{
	1: "Name",
	2: "Host",
	3: "Path",
	4: "Method",
	5: "PassWay",
	6: "Params",
	7: "Content",
}

var fieldIDToName_UpdateBaseInterfaceReq = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Host",
	4: "Path",
	5: "Method",
	6: "PassWay",
	7: "Params",
	8: "Content",
	9: "Status",
}

var fieldIDToName_DeleteBaseInterfaceReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetBaseInterfacesReq = map[int32]string{
	1: "PaginationOptions",
}

var fieldIDToName_GetBaseInterfacesResp = map[int32]string{
	1: "BaseInterfaces",
	2: "Total",
}

var fieldIDToName_CreateFullInterfaceReq = map[int32]string{
	1: "BaseInterfaceId",
	2: "UserId",
	3: "ChargeType",
	4: "Price",
}

var fieldIDToName_UpdateFullInterfaceReq = map[int32]string{
	1: "Id",
	2: "ChargeType",
	3: "Price",
	4: "Status",
}

var fieldIDToName_UpdateMarginReq = map[int32]string{
	1: "Id",
	2: "Increment",
}

var fieldIDToName_DeleteFullInterfaceReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetFullInterfacesReq = map[int32]string{
	1: "UserId",
	2: "PaginationOptions",
}

var fieldIDToName_GetFullInterfacesResp = map[int32]string{
	1: "FullInterfaces",
	2: "Total",
}

var fieldIDToName_BuyFullInterfaceReq = map[int32]string{
	1: "FullInterfaceId",
	2: "Increment",
	3: "Discount",
}

var fieldIDToName_CreateGradientReq = map[int32]string{
	1: "BaseInterfaceId",
	2: "Discounts",
}

var fieldIDToName_UpdateGradientReq = map[int32]string{
	1: "Id",
	2: "Discounts",
	3: "Status",
}

var fieldIDToName_GetGradientReq = map[int32]string{
	1: "BaseInterfaceId",
}

var fieldIDToName_GetGradientResp = map[int32]string{
	1: "Gradient",
}

var fieldIDToName_GetLogReq = map[int32]string{
	1: "FullInterfaceId",
	2: "PaginationOptions",
}

var fieldIDToName_GetLogResp = map[int32]string{
	1: "Logs",
	2: "Total",
}

var fieldIDToName_CallInterfaceReq = map[int32]string{
	1: "Key",
	2: "Method",
	3: "Action",
	5: "Timestamp",
	6: "Params",
}

var fieldIDToName_CallInterfaceResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Result",
}

var fieldIDToName_Response = map[int32]string{
	1: "Done",
	2: "Msg",
}

var _ = basic.File_basic_pagination_proto
var _ = user.File_openapi_user_common_proto
var _ = user.File_openapi_user_auth_proto
var _ = charge.File_openapi_charge_common_proto
