// Code generated by Kitex v0.11.3. DO NOT EDIT.

package charge

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/service-idl-gen-go/kitex_gen/openapi/core_api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateBaseInterface": kitex.NewMethodInfo(
		createBaseInterfaceHandler,
		newCreateBaseInterfaceArgs,
		newCreateBaseInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateBaseInterface": kitex.NewMethodInfo(
		updateBaseInterfaceHandler,
		newUpdateBaseInterfaceArgs,
		newUpdateBaseInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteBaseInterface": kitex.NewMethodInfo(
		deleteBaseInterfaceHandler,
		newDeleteBaseInterfaceArgs,
		newDeleteBaseInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetBaseInterfaces": kitex.NewMethodInfo(
		getBaseInterfacesHandler,
		newGetBaseInterfacesArgs,
		newGetBaseInterfacesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateFullInterface": kitex.NewMethodInfo(
		createFullInterfaceHandler,
		newCreateFullInterfaceArgs,
		newCreateFullInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateFullInterface": kitex.NewMethodInfo(
		updateFullInterfaceHandler,
		newUpdateFullInterfaceArgs,
		newUpdateFullInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateMargin": kitex.NewMethodInfo(
		updateMarginHandler,
		newUpdateMarginArgs,
		newUpdateMarginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteFullInterface": kitex.NewMethodInfo(
		deleteFullInterfaceHandler,
		newDeleteFullInterfaceArgs,
		newDeleteFullInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFullInterfaces": kitex.NewMethodInfo(
		getFullInterfacesHandler,
		newGetFullInterfacesArgs,
		newGetFullInterfacesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BuyFullInterface": kitex.NewMethodInfo(
		buyFullInterfaceHandler,
		newBuyFullInterfaceArgs,
		newBuyFullInterfaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateGradient": kitex.NewMethodInfo(
		createGradientHandler,
		newCreateGradientArgs,
		newCreateGradientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateGradient": kitex.NewMethodInfo(
		updateGradientHandler,
		newUpdateGradientArgs,
		newUpdateGradientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetGradient": kitex.NewMethodInfo(
		getGradientHandler,
		newGetGradientArgs,
		newGetGradientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	chargeServiceInfo                = NewServiceInfo()
	chargeServiceInfoForClient       = NewServiceInfoForClient()
	chargeServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return chargeServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return chargeServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return chargeServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "charge"
	handlerType := (*core_api.Charge)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "openapi.core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createBaseInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateBaseInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).CreateBaseInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateBaseInterfaceArgs:
		success, err := handler.(core_api.Charge).CreateBaseInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateBaseInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateBaseInterfaceArgs() interface{} {
	return &CreateBaseInterfaceArgs{}
}

func newCreateBaseInterfaceResult() interface{} {
	return &CreateBaseInterfaceResult{}
}

type CreateBaseInterfaceArgs struct {
	Req *core_api.CreateBaseInterfaceReq
}

func (p *CreateBaseInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateBaseInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateBaseInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateBaseInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateBaseInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateBaseInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateBaseInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateBaseInterfaceArgs_Req_DEFAULT *core_api.CreateBaseInterfaceReq

func (p *CreateBaseInterfaceArgs) GetReq() *core_api.CreateBaseInterfaceReq {
	if !p.IsSetReq() {
		return CreateBaseInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateBaseInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateBaseInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateBaseInterfaceResult struct {
	Success *core_api.Response
}

var CreateBaseInterfaceResult_Success_DEFAULT *core_api.Response

func (p *CreateBaseInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateBaseInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateBaseInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateBaseInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateBaseInterfaceResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateBaseInterfaceResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CreateBaseInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateBaseInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CreateBaseInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateBaseInterfaceResult) GetResult() interface{} {
	return p.Success
}

func updateBaseInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateBaseInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).UpdateBaseInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateBaseInterfaceArgs:
		success, err := handler.(core_api.Charge).UpdateBaseInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateBaseInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateBaseInterfaceArgs() interface{} {
	return &UpdateBaseInterfaceArgs{}
}

func newUpdateBaseInterfaceResult() interface{} {
	return &UpdateBaseInterfaceResult{}
}

type UpdateBaseInterfaceArgs struct {
	Req *core_api.UpdateBaseInterfaceReq
}

func (p *UpdateBaseInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateBaseInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateBaseInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateBaseInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateBaseInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateBaseInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateBaseInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateBaseInterfaceArgs_Req_DEFAULT *core_api.UpdateBaseInterfaceReq

func (p *UpdateBaseInterfaceArgs) GetReq() *core_api.UpdateBaseInterfaceReq {
	if !p.IsSetReq() {
		return UpdateBaseInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateBaseInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateBaseInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateBaseInterfaceResult struct {
	Success *core_api.Response
}

var UpdateBaseInterfaceResult_Success_DEFAULT *core_api.Response

func (p *UpdateBaseInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateBaseInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateBaseInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateBaseInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateBaseInterfaceResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateBaseInterfaceResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateBaseInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateBaseInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateBaseInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateBaseInterfaceResult) GetResult() interface{} {
	return p.Success
}

func deleteBaseInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteBaseInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).DeleteBaseInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteBaseInterfaceArgs:
		success, err := handler.(core_api.Charge).DeleteBaseInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteBaseInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteBaseInterfaceArgs() interface{} {
	return &DeleteBaseInterfaceArgs{}
}

func newDeleteBaseInterfaceResult() interface{} {
	return &DeleteBaseInterfaceResult{}
}

type DeleteBaseInterfaceArgs struct {
	Req *core_api.DeleteBaseInterfaceReq
}

func (p *DeleteBaseInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteBaseInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteBaseInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteBaseInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteBaseInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteBaseInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteBaseInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteBaseInterfaceArgs_Req_DEFAULT *core_api.DeleteBaseInterfaceReq

func (p *DeleteBaseInterfaceArgs) GetReq() *core_api.DeleteBaseInterfaceReq {
	if !p.IsSetReq() {
		return DeleteBaseInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteBaseInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteBaseInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteBaseInterfaceResult struct {
	Success *core_api.Response
}

var DeleteBaseInterfaceResult_Success_DEFAULT *core_api.Response

func (p *DeleteBaseInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteBaseInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteBaseInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteBaseInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteBaseInterfaceResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteBaseInterfaceResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return DeleteBaseInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteBaseInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *DeleteBaseInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteBaseInterfaceResult) GetResult() interface{} {
	return p.Success
}

func getBaseInterfacesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetBaseInterfacesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).GetBaseInterfaces(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetBaseInterfacesArgs:
		success, err := handler.(core_api.Charge).GetBaseInterfaces(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetBaseInterfacesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetBaseInterfacesArgs() interface{} {
	return &GetBaseInterfacesArgs{}
}

func newGetBaseInterfacesResult() interface{} {
	return &GetBaseInterfacesResult{}
}

type GetBaseInterfacesArgs struct {
	Req *core_api.GetBaseInterfacesReq
}

func (p *GetBaseInterfacesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetBaseInterfacesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetBaseInterfacesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetBaseInterfacesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetBaseInterfacesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetBaseInterfacesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetBaseInterfacesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetBaseInterfacesArgs_Req_DEFAULT *core_api.GetBaseInterfacesReq

func (p *GetBaseInterfacesArgs) GetReq() *core_api.GetBaseInterfacesReq {
	if !p.IsSetReq() {
		return GetBaseInterfacesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetBaseInterfacesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetBaseInterfacesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetBaseInterfacesResult struct {
	Success *core_api.GetBaseInterfacesResp
}

var GetBaseInterfacesResult_Success_DEFAULT *core_api.GetBaseInterfacesResp

func (p *GetBaseInterfacesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetBaseInterfacesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetBaseInterfacesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetBaseInterfacesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetBaseInterfacesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetBaseInterfacesResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetBaseInterfacesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetBaseInterfacesResult) GetSuccess() *core_api.GetBaseInterfacesResp {
	if !p.IsSetSuccess() {
		return GetBaseInterfacesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetBaseInterfacesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetBaseInterfacesResp)
}

func (p *GetBaseInterfacesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBaseInterfacesResult) GetResult() interface{} {
	return p.Success
}

func createFullInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateFullInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).CreateFullInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateFullInterfaceArgs:
		success, err := handler.(core_api.Charge).CreateFullInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateFullInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateFullInterfaceArgs() interface{} {
	return &CreateFullInterfaceArgs{}
}

func newCreateFullInterfaceResult() interface{} {
	return &CreateFullInterfaceResult{}
}

type CreateFullInterfaceArgs struct {
	Req *core_api.CreateFullInterfaceReq
}

func (p *CreateFullInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateFullInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateFullInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateFullInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateFullInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateFullInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateFullInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateFullInterfaceArgs_Req_DEFAULT *core_api.CreateFullInterfaceReq

func (p *CreateFullInterfaceArgs) GetReq() *core_api.CreateFullInterfaceReq {
	if !p.IsSetReq() {
		return CreateFullInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateFullInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateFullInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateFullInterfaceResult struct {
	Success *core_api.Response
}

var CreateFullInterfaceResult_Success_DEFAULT *core_api.Response

func (p *CreateFullInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateFullInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateFullInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateFullInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateFullInterfaceResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateFullInterfaceResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CreateFullInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateFullInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CreateFullInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateFullInterfaceResult) GetResult() interface{} {
	return p.Success
}

func updateFullInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateFullInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).UpdateFullInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateFullInterfaceArgs:
		success, err := handler.(core_api.Charge).UpdateFullInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateFullInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateFullInterfaceArgs() interface{} {
	return &UpdateFullInterfaceArgs{}
}

func newUpdateFullInterfaceResult() interface{} {
	return &UpdateFullInterfaceResult{}
}

type UpdateFullInterfaceArgs struct {
	Req *core_api.UpdateFullInterfaceReq
}

func (p *UpdateFullInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateFullInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateFullInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateFullInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateFullInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateFullInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateFullInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateFullInterfaceArgs_Req_DEFAULT *core_api.UpdateFullInterfaceReq

func (p *UpdateFullInterfaceArgs) GetReq() *core_api.UpdateFullInterfaceReq {
	if !p.IsSetReq() {
		return UpdateFullInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateFullInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateFullInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateFullInterfaceResult struct {
	Success *core_api.Response
}

var UpdateFullInterfaceResult_Success_DEFAULT *core_api.Response

func (p *UpdateFullInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateFullInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateFullInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateFullInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateFullInterfaceResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateFullInterfaceResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateFullInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateFullInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateFullInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateFullInterfaceResult) GetResult() interface{} {
	return p.Success
}

func updateMarginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateMarginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).UpdateMargin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateMarginArgs:
		success, err := handler.(core_api.Charge).UpdateMargin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateMarginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateMarginArgs() interface{} {
	return &UpdateMarginArgs{}
}

func newUpdateMarginResult() interface{} {
	return &UpdateMarginResult{}
}

type UpdateMarginArgs struct {
	Req *core_api.UpdateMarginReq
}

func (p *UpdateMarginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateMarginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateMarginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateMarginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateMarginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateMarginArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateMarginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateMarginArgs_Req_DEFAULT *core_api.UpdateMarginReq

func (p *UpdateMarginArgs) GetReq() *core_api.UpdateMarginReq {
	if !p.IsSetReq() {
		return UpdateMarginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateMarginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateMarginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateMarginResult struct {
	Success *core_api.Response
}

var UpdateMarginResult_Success_DEFAULT *core_api.Response

func (p *UpdateMarginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateMarginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateMarginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateMarginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateMarginResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateMarginResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateMarginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateMarginResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateMarginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateMarginResult) GetResult() interface{} {
	return p.Success
}

func deleteFullInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteFullInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).DeleteFullInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteFullInterfaceArgs:
		success, err := handler.(core_api.Charge).DeleteFullInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteFullInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteFullInterfaceArgs() interface{} {
	return &DeleteFullInterfaceArgs{}
}

func newDeleteFullInterfaceResult() interface{} {
	return &DeleteFullInterfaceResult{}
}

type DeleteFullInterfaceArgs struct {
	Req *core_api.DeleteFullInterfaceReq
}

func (p *DeleteFullInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteFullInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteFullInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteFullInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteFullInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteFullInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteFullInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteFullInterfaceArgs_Req_DEFAULT *core_api.DeleteFullInterfaceReq

func (p *DeleteFullInterfaceArgs) GetReq() *core_api.DeleteFullInterfaceReq {
	if !p.IsSetReq() {
		return DeleteFullInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteFullInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteFullInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteFullInterfaceResult struct {
	Success *core_api.Response
}

var DeleteFullInterfaceResult_Success_DEFAULT *core_api.Response

func (p *DeleteFullInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteFullInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteFullInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteFullInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteFullInterfaceResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteFullInterfaceResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return DeleteFullInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteFullInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *DeleteFullInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteFullInterfaceResult) GetResult() interface{} {
	return p.Success
}

func getFullInterfacesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetFullInterfacesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).GetFullInterfaces(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFullInterfacesArgs:
		success, err := handler.(core_api.Charge).GetFullInterfaces(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFullInterfacesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFullInterfacesArgs() interface{} {
	return &GetFullInterfacesArgs{}
}

func newGetFullInterfacesResult() interface{} {
	return &GetFullInterfacesResult{}
}

type GetFullInterfacesArgs struct {
	Req *core_api.GetFullInterfacesReq
}

func (p *GetFullInterfacesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetFullInterfacesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFullInterfacesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFullInterfacesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFullInterfacesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFullInterfacesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetFullInterfacesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFullInterfacesArgs_Req_DEFAULT *core_api.GetFullInterfacesReq

func (p *GetFullInterfacesArgs) GetReq() *core_api.GetFullInterfacesReq {
	if !p.IsSetReq() {
		return GetFullInterfacesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFullInterfacesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFullInterfacesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFullInterfacesResult struct {
	Success *core_api.GetFullInterfacesResp
}

var GetFullInterfacesResult_Success_DEFAULT *core_api.GetFullInterfacesResp

func (p *GetFullInterfacesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetFullInterfacesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFullInterfacesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFullInterfacesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFullInterfacesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFullInterfacesResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetFullInterfacesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFullInterfacesResult) GetSuccess() *core_api.GetFullInterfacesResp {
	if !p.IsSetSuccess() {
		return GetFullInterfacesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFullInterfacesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetFullInterfacesResp)
}

func (p *GetFullInterfacesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFullInterfacesResult) GetResult() interface{} {
	return p.Success
}

func buyFullInterfaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.BuyFullInterfaceReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).BuyFullInterface(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BuyFullInterfaceArgs:
		success, err := handler.(core_api.Charge).BuyFullInterface(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BuyFullInterfaceResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBuyFullInterfaceArgs() interface{} {
	return &BuyFullInterfaceArgs{}
}

func newBuyFullInterfaceResult() interface{} {
	return &BuyFullInterfaceResult{}
}

type BuyFullInterfaceArgs struct {
	Req *core_api.BuyFullInterfaceReq
}

func (p *BuyFullInterfaceArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.BuyFullInterfaceReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BuyFullInterfaceArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BuyFullInterfaceArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BuyFullInterfaceArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BuyFullInterfaceArgs) Unmarshal(in []byte) error {
	msg := new(core_api.BuyFullInterfaceReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BuyFullInterfaceArgs_Req_DEFAULT *core_api.BuyFullInterfaceReq

func (p *BuyFullInterfaceArgs) GetReq() *core_api.BuyFullInterfaceReq {
	if !p.IsSetReq() {
		return BuyFullInterfaceArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BuyFullInterfaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BuyFullInterfaceArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BuyFullInterfaceResult struct {
	Success *core_api.Response
}

var BuyFullInterfaceResult_Success_DEFAULT *core_api.Response

func (p *BuyFullInterfaceResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BuyFullInterfaceResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BuyFullInterfaceResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BuyFullInterfaceResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BuyFullInterfaceResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BuyFullInterfaceResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return BuyFullInterfaceResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BuyFullInterfaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *BuyFullInterfaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BuyFullInterfaceResult) GetResult() interface{} {
	return p.Success
}

func createGradientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateGradientReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).CreateGradient(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateGradientArgs:
		success, err := handler.(core_api.Charge).CreateGradient(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateGradientResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateGradientArgs() interface{} {
	return &CreateGradientArgs{}
}

func newCreateGradientResult() interface{} {
	return &CreateGradientResult{}
}

type CreateGradientArgs struct {
	Req *core_api.CreateGradientReq
}

func (p *CreateGradientArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateGradientReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateGradientArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateGradientArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateGradientArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateGradientArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateGradientReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateGradientArgs_Req_DEFAULT *core_api.CreateGradientReq

func (p *CreateGradientArgs) GetReq() *core_api.CreateGradientReq {
	if !p.IsSetReq() {
		return CreateGradientArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateGradientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateGradientArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateGradientResult struct {
	Success *core_api.Response
}

var CreateGradientResult_Success_DEFAULT *core_api.Response

func (p *CreateGradientResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateGradientResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateGradientResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateGradientResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateGradientResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateGradientResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CreateGradientResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateGradientResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CreateGradientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateGradientResult) GetResult() interface{} {
	return p.Success
}

func updateGradientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateGradientReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).UpdateGradient(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateGradientArgs:
		success, err := handler.(core_api.Charge).UpdateGradient(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateGradientResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateGradientArgs() interface{} {
	return &UpdateGradientArgs{}
}

func newUpdateGradientResult() interface{} {
	return &UpdateGradientResult{}
}

type UpdateGradientArgs struct {
	Req *core_api.UpdateGradientReq
}

func (p *UpdateGradientArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateGradientReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateGradientArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateGradientArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateGradientArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateGradientArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateGradientReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateGradientArgs_Req_DEFAULT *core_api.UpdateGradientReq

func (p *UpdateGradientArgs) GetReq() *core_api.UpdateGradientReq {
	if !p.IsSetReq() {
		return UpdateGradientArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateGradientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateGradientArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateGradientResult struct {
	Success *core_api.Response
}

var UpdateGradientResult_Success_DEFAULT *core_api.Response

func (p *UpdateGradientResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateGradientResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateGradientResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateGradientResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateGradientResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateGradientResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateGradientResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateGradientResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateGradientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateGradientResult) GetResult() interface{} {
	return p.Success
}

func getGradientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetGradientReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Charge).GetGradient(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetGradientArgs:
		success, err := handler.(core_api.Charge).GetGradient(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetGradientResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetGradientArgs() interface{} {
	return &GetGradientArgs{}
}

func newGetGradientResult() interface{} {
	return &GetGradientResult{}
}

type GetGradientArgs struct {
	Req *core_api.GetGradientReq
}

func (p *GetGradientArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetGradientReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetGradientArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetGradientArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetGradientArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetGradientArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetGradientReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetGradientArgs_Req_DEFAULT *core_api.GetGradientReq

func (p *GetGradientArgs) GetReq() *core_api.GetGradientReq {
	if !p.IsSetReq() {
		return GetGradientArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetGradientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetGradientArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetGradientResult struct {
	Success *core_api.GetGradientResp
}

var GetGradientResult_Success_DEFAULT *core_api.GetGradientResp

func (p *GetGradientResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetGradientResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetGradientResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetGradientResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetGradientResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetGradientResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetGradientResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetGradientResult) GetSuccess() *core_api.GetGradientResp {
	if !p.IsSetSuccess() {
		return GetGradientResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetGradientResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetGradientResp)
}

func (p *GetGradientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetGradientResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateBaseInterface(ctx context.Context, Req *core_api.CreateBaseInterfaceReq) (r *core_api.Response, err error) {
	var _args CreateBaseInterfaceArgs
	_args.Req = Req
	var _result CreateBaseInterfaceResult
	if err = p.c.Call(ctx, "CreateBaseInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBaseInterface(ctx context.Context, Req *core_api.UpdateBaseInterfaceReq) (r *core_api.Response, err error) {
	var _args UpdateBaseInterfaceArgs
	_args.Req = Req
	var _result UpdateBaseInterfaceResult
	if err = p.c.Call(ctx, "UpdateBaseInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBaseInterface(ctx context.Context, Req *core_api.DeleteBaseInterfaceReq) (r *core_api.Response, err error) {
	var _args DeleteBaseInterfaceArgs
	_args.Req = Req
	var _result DeleteBaseInterfaceResult
	if err = p.c.Call(ctx, "DeleteBaseInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBaseInterfaces(ctx context.Context, Req *core_api.GetBaseInterfacesReq) (r *core_api.GetBaseInterfacesResp, err error) {
	var _args GetBaseInterfacesArgs
	_args.Req = Req
	var _result GetBaseInterfacesResult
	if err = p.c.Call(ctx, "GetBaseInterfaces", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFullInterface(ctx context.Context, Req *core_api.CreateFullInterfaceReq) (r *core_api.Response, err error) {
	var _args CreateFullInterfaceArgs
	_args.Req = Req
	var _result CreateFullInterfaceResult
	if err = p.c.Call(ctx, "CreateFullInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateFullInterface(ctx context.Context, Req *core_api.UpdateFullInterfaceReq) (r *core_api.Response, err error) {
	var _args UpdateFullInterfaceArgs
	_args.Req = Req
	var _result UpdateFullInterfaceResult
	if err = p.c.Call(ctx, "UpdateFullInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMargin(ctx context.Context, Req *core_api.UpdateMarginReq) (r *core_api.Response, err error) {
	var _args UpdateMarginArgs
	_args.Req = Req
	var _result UpdateMarginResult
	if err = p.c.Call(ctx, "UpdateMargin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFullInterface(ctx context.Context, Req *core_api.DeleteFullInterfaceReq) (r *core_api.Response, err error) {
	var _args DeleteFullInterfaceArgs
	_args.Req = Req
	var _result DeleteFullInterfaceResult
	if err = p.c.Call(ctx, "DeleteFullInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFullInterfaces(ctx context.Context, Req *core_api.GetFullInterfacesReq) (r *core_api.GetFullInterfacesResp, err error) {
	var _args GetFullInterfacesArgs
	_args.Req = Req
	var _result GetFullInterfacesResult
	if err = p.c.Call(ctx, "GetFullInterfaces", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BuyFullInterface(ctx context.Context, Req *core_api.BuyFullInterfaceReq) (r *core_api.Response, err error) {
	var _args BuyFullInterfaceArgs
	_args.Req = Req
	var _result BuyFullInterfaceResult
	if err = p.c.Call(ctx, "BuyFullInterface", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateGradient(ctx context.Context, Req *core_api.CreateGradientReq) (r *core_api.Response, err error) {
	var _args CreateGradientArgs
	_args.Req = Req
	var _result CreateGradientResult
	if err = p.c.Call(ctx, "CreateGradient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateGradient(ctx context.Context, Req *core_api.UpdateGradientReq) (r *core_api.Response, err error) {
	var _args UpdateGradientArgs
	_args.Req = Req
	var _result UpdateGradientResult
	if err = p.c.Call(ctx, "UpdateGradient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGradient(ctx context.Context, Req *core_api.GetGradientReq) (r *core_api.GetGradientResp, err error) {
	var _args GetGradientArgs
	_args.Req = Req
	var _result GetGradientResult
	if err = p.c.Call(ctx, "GetGradient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
