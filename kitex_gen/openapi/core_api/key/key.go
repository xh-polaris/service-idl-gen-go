// Code generated by Kitex v0.12.0. DO NOT EDIT.

package key

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/service-idl-gen-go/kitex_gen/openapi/core_api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GenerateKey": kitex.NewMethodInfo(
		generateKeyHandler,
		newGenerateKeyArgs,
		newGenerateKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetKeys": kitex.NewMethodInfo(
		getKeysHandler,
		newGetKeysArgs,
		newGetKeysResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateKey": kitex.NewMethodInfo(
		updateKeyHandler,
		newUpdateKeyArgs,
		newUpdateKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RefreshKey": kitex.NewMethodInfo(
		refreshKeyHandler,
		newRefreshKeyArgs,
		newRefreshKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateHosts": kitex.NewMethodInfo(
		updateHostsHandler,
		newUpdateHostsArgs,
		newUpdateHostsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteKey": kitex.NewMethodInfo(
		deleteKeyHandler,
		newDeleteKeyArgs,
		newDeleteKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	keyServiceInfo                = NewServiceInfo()
	keyServiceInfoForClient       = NewServiceInfoForClient()
	keyServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return keyServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return keyServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return keyServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "key"
	handlerType := (*core_api.Key)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "openapi.core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.0",
		Extra:           extra,
	}
	return svcInfo
}

func generateKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GenerateKeyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Key).GenerateKey(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GenerateKeyArgs:
		success, err := handler.(core_api.Key).GenerateKey(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GenerateKeyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGenerateKeyArgs() interface{} {
	return &GenerateKeyArgs{}
}

func newGenerateKeyResult() interface{} {
	return &GenerateKeyResult{}
}

type GenerateKeyArgs struct {
	Req *core_api.GenerateKeyReq
}

func (p *GenerateKeyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GenerateKeyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GenerateKeyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GenerateKeyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GenerateKeyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GenerateKeyArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GenerateKeyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GenerateKeyArgs_Req_DEFAULT *core_api.GenerateKeyReq

func (p *GenerateKeyArgs) GetReq() *core_api.GenerateKeyReq {
	if !p.IsSetReq() {
		return GenerateKeyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GenerateKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GenerateKeyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GenerateKeyResult struct {
	Success *core_api.Response
}

var GenerateKeyResult_Success_DEFAULT *core_api.Response

func (p *GenerateKeyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GenerateKeyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GenerateKeyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GenerateKeyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GenerateKeyResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GenerateKeyResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return GenerateKeyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GenerateKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *GenerateKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GenerateKeyResult) GetResult() interface{} {
	return p.Success
}

func getKeysHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetKeysReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Key).GetKeys(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetKeysArgs:
		success, err := handler.(core_api.Key).GetKeys(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetKeysResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetKeysArgs() interface{} {
	return &GetKeysArgs{}
}

func newGetKeysResult() interface{} {
	return &GetKeysResult{}
}

type GetKeysArgs struct {
	Req *core_api.GetKeysReq
}

func (p *GetKeysArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetKeysReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetKeysArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetKeysArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetKeysArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetKeysArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetKeysReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetKeysArgs_Req_DEFAULT *core_api.GetKeysReq

func (p *GetKeysArgs) GetReq() *core_api.GetKeysReq {
	if !p.IsSetReq() {
		return GetKeysArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetKeysArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetKeysArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetKeysResult struct {
	Success *core_api.GetKeysResp
}

var GetKeysResult_Success_DEFAULT *core_api.GetKeysResp

func (p *GetKeysResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetKeysResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetKeysResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetKeysResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetKeysResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetKeysResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetKeysResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetKeysResult) GetSuccess() *core_api.GetKeysResp {
	if !p.IsSetSuccess() {
		return GetKeysResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetKeysResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetKeysResp)
}

func (p *GetKeysResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetKeysResult) GetResult() interface{} {
	return p.Success
}

func updateKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateKeyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Key).UpdateKey(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateKeyArgs:
		success, err := handler.(core_api.Key).UpdateKey(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateKeyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateKeyArgs() interface{} {
	return &UpdateKeyArgs{}
}

func newUpdateKeyResult() interface{} {
	return &UpdateKeyResult{}
}

type UpdateKeyArgs struct {
	Req *core_api.UpdateKeyReq
}

func (p *UpdateKeyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateKeyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateKeyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateKeyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateKeyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateKeyArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateKeyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateKeyArgs_Req_DEFAULT *core_api.UpdateKeyReq

func (p *UpdateKeyArgs) GetReq() *core_api.UpdateKeyReq {
	if !p.IsSetReq() {
		return UpdateKeyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateKeyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateKeyResult struct {
	Success *core_api.Response
}

var UpdateKeyResult_Success_DEFAULT *core_api.Response

func (p *UpdateKeyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateKeyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateKeyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateKeyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateKeyResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateKeyResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateKeyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateKeyResult) GetResult() interface{} {
	return p.Success
}

func refreshKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.RefreshKeyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Key).RefreshKey(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RefreshKeyArgs:
		success, err := handler.(core_api.Key).RefreshKey(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RefreshKeyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRefreshKeyArgs() interface{} {
	return &RefreshKeyArgs{}
}

func newRefreshKeyResult() interface{} {
	return &RefreshKeyResult{}
}

type RefreshKeyArgs struct {
	Req *core_api.RefreshKeyReq
}

func (p *RefreshKeyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.RefreshKeyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RefreshKeyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RefreshKeyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RefreshKeyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RefreshKeyArgs) Unmarshal(in []byte) error {
	msg := new(core_api.RefreshKeyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RefreshKeyArgs_Req_DEFAULT *core_api.RefreshKeyReq

func (p *RefreshKeyArgs) GetReq() *core_api.RefreshKeyReq {
	if !p.IsSetReq() {
		return RefreshKeyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RefreshKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RefreshKeyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RefreshKeyResult struct {
	Success *core_api.Response
}

var RefreshKeyResult_Success_DEFAULT *core_api.Response

func (p *RefreshKeyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RefreshKeyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RefreshKeyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RefreshKeyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RefreshKeyResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RefreshKeyResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return RefreshKeyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RefreshKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *RefreshKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RefreshKeyResult) GetResult() interface{} {
	return p.Success
}

func updateHostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateHostReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Key).UpdateHosts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateHostsArgs:
		success, err := handler.(core_api.Key).UpdateHosts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateHostsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateHostsArgs() interface{} {
	return &UpdateHostsArgs{}
}

func newUpdateHostsResult() interface{} {
	return &UpdateHostsResult{}
}

type UpdateHostsArgs struct {
	Req *core_api.UpdateHostReq
}

func (p *UpdateHostsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateHostReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateHostsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateHostsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateHostsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateHostsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateHostReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateHostsArgs_Req_DEFAULT *core_api.UpdateHostReq

func (p *UpdateHostsArgs) GetReq() *core_api.UpdateHostReq {
	if !p.IsSetReq() {
		return UpdateHostsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateHostsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateHostsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateHostsResult struct {
	Success *core_api.Response
}

var UpdateHostsResult_Success_DEFAULT *core_api.Response

func (p *UpdateHostsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateHostsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateHostsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateHostsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateHostsResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateHostsResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateHostsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateHostsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateHostsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateHostsResult) GetResult() interface{} {
	return p.Success
}

func deleteKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteKeyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Key).DeleteKey(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteKeyArgs:
		success, err := handler.(core_api.Key).DeleteKey(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteKeyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteKeyArgs() interface{} {
	return &DeleteKeyArgs{}
}

func newDeleteKeyResult() interface{} {
	return &DeleteKeyResult{}
}

type DeleteKeyArgs struct {
	Req *core_api.DeleteKeyReq
}

func (p *DeleteKeyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteKeyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteKeyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteKeyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteKeyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteKeyArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteKeyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteKeyArgs_Req_DEFAULT *core_api.DeleteKeyReq

func (p *DeleteKeyArgs) GetReq() *core_api.DeleteKeyReq {
	if !p.IsSetReq() {
		return DeleteKeyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteKeyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteKeyResult struct {
	Success *core_api.Response
}

var DeleteKeyResult_Success_DEFAULT *core_api.Response

func (p *DeleteKeyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteKeyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteKeyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteKeyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteKeyResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteKeyResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return DeleteKeyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *DeleteKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteKeyResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GenerateKey(ctx context.Context, Req *core_api.GenerateKeyReq) (r *core_api.Response, err error) {
	var _args GenerateKeyArgs
	_args.Req = Req
	var _result GenerateKeyResult
	if err = p.c.Call(ctx, "GenerateKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetKeys(ctx context.Context, Req *core_api.GetKeysReq) (r *core_api.GetKeysResp, err error) {
	var _args GetKeysArgs
	_args.Req = Req
	var _result GetKeysResult
	if err = p.c.Call(ctx, "GetKeys", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateKey(ctx context.Context, Req *core_api.UpdateKeyReq) (r *core_api.Response, err error) {
	var _args UpdateKeyArgs
	_args.Req = Req
	var _result UpdateKeyResult
	if err = p.c.Call(ctx, "UpdateKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefreshKey(ctx context.Context, Req *core_api.RefreshKeyReq) (r *core_api.Response, err error) {
	var _args RefreshKeyArgs
	_args.Req = Req
	var _result RefreshKeyResult
	if err = p.c.Call(ctx, "RefreshKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateHosts(ctx context.Context, Req *core_api.UpdateHostReq) (r *core_api.Response, err error) {
	var _args UpdateHostsArgs
	_args.Req = Req
	var _result UpdateHostsResult
	if err = p.c.Call(ctx, "UpdateHosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteKey(ctx context.Context, Req *core_api.DeleteKeyReq) (r *core_api.Response, err error) {
	var _args DeleteKeyArgs
	_args.Req = Req
	var _result DeleteKeyResult
	if err = p.c.Call(ctx, "DeleteKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
