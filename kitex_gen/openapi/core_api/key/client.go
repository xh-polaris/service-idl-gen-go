// Code generated by Kitex v0.11.3. DO NOT EDIT.

package key

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	core_api "github.com/xh-polaris/service-idl-gen-go/kitex_gen/openapi/core_api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GenerateKey(ctx context.Context, Req *core_api.GenerateKeyReq, callOptions ...callopt.Option) (r *core_api.Response, err error)
	GetKeys(ctx context.Context, Req *core_api.GetKeysReq, callOptions ...callopt.Option) (r *core_api.GetKeysResp, err error)
	UpdateKey(ctx context.Context, Req *core_api.UpdateKeyReq, callOptions ...callopt.Option) (r *core_api.Response, err error)
	RefreshKey(ctx context.Context, Req *core_api.RefreshKeyReq, callOptions ...callopt.Option) (r *core_api.Response, err error)
	UpdateHosts(ctx context.Context, Req *core_api.UpdateHostReq, callOptions ...callopt.Option) (r *core_api.Response, err error)
	DeleteKey(ctx context.Context, Req *core_api.DeleteKeyReq, callOptions ...callopt.Option) (r *core_api.Response, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kKeyClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kKeyClient struct {
	*kClient
}

func (p *kKeyClient) GenerateKey(ctx context.Context, Req *core_api.GenerateKeyReq, callOptions ...callopt.Option) (r *core_api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GenerateKey(ctx, Req)
}

func (p *kKeyClient) GetKeys(ctx context.Context, Req *core_api.GetKeysReq, callOptions ...callopt.Option) (r *core_api.GetKeysResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetKeys(ctx, Req)
}

func (p *kKeyClient) UpdateKey(ctx context.Context, Req *core_api.UpdateKeyReq, callOptions ...callopt.Option) (r *core_api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateKey(ctx, Req)
}

func (p *kKeyClient) RefreshKey(ctx context.Context, Req *core_api.RefreshKeyReq, callOptions ...callopt.Option) (r *core_api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RefreshKey(ctx, Req)
}

func (p *kKeyClient) UpdateHosts(ctx context.Context, Req *core_api.UpdateHostReq, callOptions ...callopt.Option) (r *core_api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateHosts(ctx, Req)
}

func (p *kKeyClient) DeleteKey(ctx context.Context, Req *core_api.DeleteKeyReq, callOptions ...callopt.Option) (r *core_api.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteKey(ctx, Req)
}
