// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package user

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SetRemainReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SetRemainReq[number], err)
}

func (x *SetRemainReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SetRemainReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Increment, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SetRemainReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.TxId = &tmp
	return offset, err
}

func (x *SetRemainResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SetRemainResp[number], err)
}

func (x *SetRemainResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Done, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *SetRemainResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SetRemainReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SetRemainReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *SetRemainReq) fastWriteField2(buf []byte) (offset int) {
	if x.Increment == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetIncrement())
	return offset
}

func (x *SetRemainReq) fastWriteField3(buf []byte) (offset int) {
	if x.TxId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTxId())
	return offset
}

func (x *SetRemainResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SetRemainResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Done {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDone())
	return offset
}

func (x *SetRemainResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *SetRemainReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SetRemainReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *SetRemainReq) sizeField2() (n int) {
	if x.Increment == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetIncrement())
	return n
}

func (x *SetRemainReq) sizeField3() (n int) {
	if x.TxId == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetTxId())
	return n
}

func (x *SetRemainResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SetRemainResp) sizeField1() (n int) {
	if !x.Done {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDone())
	return n
}

func (x *SetRemainResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

var fieldIDToName_SetRemainReq = map[int32]string{
	1: "UserId",
	2: "Increment",
	3: "TxId",
}

var fieldIDToName_SetRemainResp = map[int32]string{
	1: "Done",
	2: "Msg",
}

var _ = basic.File_basic_user_proto
