// Code generated by Kitex v0.12.0. DO NOT EDIT.

package user

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	user "github.com/xh-polaris/service-idl-gen-go/kitex_gen/openapi/user"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SignUp": kitex.NewMethodInfo(
		signUpHandler,
		newSignUpArgs,
		newSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newGetUserInfoArgs,
		newGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SetUserInfo": kitex.NewMethodInfo(
		setUserInfoHandler,
		newSetUserInfoArgs,
		newSetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateKey": kitex.NewMethodInfo(
		createKeyHandler,
		newCreateKeyArgs,
		newCreateKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetKey": kitex.NewMethodInfo(
		getKeyHandler,
		newGetKeyArgs,
		newGetKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateKey": kitex.NewMethodInfo(
		updateKeyHandler,
		newUpdateKeyArgs,
		newUpdateKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateHosts": kitex.NewMethodInfo(
		updateHostsHandler,
		newUpdateHostsArgs,
		newUpdateHostsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RefreshKey": kitex.NewMethodInfo(
		refreshKeyHandler,
		newRefreshKeyArgs,
		newRefreshKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteKey": kitex.NewMethodInfo(
		deleteKeyHandler,
		newDeleteKeyArgs,
		newDeleteKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetKeyForCheck": kitex.NewMethodInfo(
		getKeyForCheckHandler,
		newGetKeyForCheckArgs,
		newGetKeyForCheckResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SetRemain": kitex.NewMethodInfo(
		setRemainHandler,
		newSetRemainArgs,
		newSetRemainResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetAccountByTxId": kitex.NewMethodInfo(
		getAccountByTxIdHandler,
		newGetAccountByTxIdArgs,
		newGetAccountByTxIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	userServiceInfo                = NewServiceInfo()
	userServiceInfoForClient       = NewServiceInfoForClient()
	userServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "user"
	handlerType := (*user.User)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "openapi.user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.0",
		Extra:           extra,
	}
	return svcInfo
}

func signUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.SignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).SignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SignUpArgs:
		success, err := handler.(user.User).SignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSignUpArgs() interface{} {
	return &SignUpArgs{}
}

func newSignUpResult() interface{} {
	return &SignUpResult{}
}

type SignUpArgs struct {
	Req *user.SignUpReq
}

func (p *SignUpArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.SignUpReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SignUpArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SignUpArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SignUpArgs) Unmarshal(in []byte) error {
	msg := new(user.SignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SignUpArgs_Req_DEFAULT *user.SignUpReq

func (p *SignUpArgs) GetReq() *user.SignUpReq {
	if !p.IsSetReq() {
		return SignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SignUpResult struct {
	Success *user.SignUpResp
}

var SignUpResult_Success_DEFAULT *user.SignUpResp

func (p *SignUpResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.SignUpResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SignUpResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SignUpResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SignUpResult) Unmarshal(in []byte) error {
	msg := new(user.SignUpResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SignUpResult) GetSuccess() *user.SignUpResp {
	if !p.IsSetSuccess() {
		return SignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.SignUpResp)
}

func (p *SignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SignUpResult) GetResult() interface{} {
	return p.Success
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserInfoArgs:
		success, err := handler.(user.User).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *user.GetUserInfoReq
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.GetUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *user.GetUserInfoReq

func (p *GetUserInfoArgs) GetReq() *user.GetUserInfoReq {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoResult struct {
	Success *user.GetUserInfoResp
}

var GetUserInfoResult_Success_DEFAULT *user.GetUserInfoResp

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetUserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(user.GetUserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *user.GetUserInfoResp {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetUserInfoResp)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) GetResult() interface{} {
	return p.Success
}

func setUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.SetUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).SetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SetUserInfoArgs:
		success, err := handler.(user.User).SetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSetUserInfoArgs() interface{} {
	return &SetUserInfoArgs{}
}

func newSetUserInfoResult() interface{} {
	return &SetUserInfoResult{}
}

type SetUserInfoArgs struct {
	Req *user.SetUserInfoReq
}

func (p *SetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.SetUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.SetUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetUserInfoArgs_Req_DEFAULT *user.SetUserInfoReq

func (p *SetUserInfoArgs) GetReq() *user.SetUserInfoReq {
	if !p.IsSetReq() {
		return SetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetUserInfoResult struct {
	Success *user.SetUserInfoResp
}

var SetUserInfoResult_Success_DEFAULT *user.SetUserInfoResp

func (p *SetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.SetUserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(user.SetUserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetUserInfoResult) GetSuccess() *user.SetUserInfoResp {
	if !p.IsSetSuccess() {
		return SetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.SetUserInfoResp)
}

func (p *SetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetUserInfoResult) GetResult() interface{} {
	return p.Success
}

func createKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateKeyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).CreateKey(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateKeyArgs:
		success, err := handler.(user.User).CreateKey(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateKeyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateKeyArgs() interface{} {
	return &CreateKeyArgs{}
}

func newCreateKeyResult() interface{} {
	return &CreateKeyResult{}
}

type CreateKeyArgs struct {
	Req *user.CreateKeyReq
}

func (p *CreateKeyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateKeyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateKeyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateKeyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateKeyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateKeyArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateKeyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateKeyArgs_Req_DEFAULT *user.CreateKeyReq

func (p *CreateKeyArgs) GetReq() *user.CreateKeyReq {
	if !p.IsSetReq() {
		return CreateKeyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateKeyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateKeyResult struct {
	Success *user.CreateKeyResp
}

var CreateKeyResult_Success_DEFAULT *user.CreateKeyResp

func (p *CreateKeyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.CreateKeyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateKeyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateKeyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateKeyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateKeyResult) Unmarshal(in []byte) error {
	msg := new(user.CreateKeyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateKeyResult) GetSuccess() *user.CreateKeyResp {
	if !p.IsSetSuccess() {
		return CreateKeyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.CreateKeyResp)
}

func (p *CreateKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateKeyResult) GetResult() interface{} {
	return p.Success
}

func getKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetKeysReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).GetKey(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetKeyArgs:
		success, err := handler.(user.User).GetKey(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetKeyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetKeyArgs() interface{} {
	return &GetKeyArgs{}
}

func newGetKeyResult() interface{} {
	return &GetKeyResult{}
}

type GetKeyArgs struct {
	Req *user.GetKeysReq
}

func (p *GetKeyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetKeysReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetKeyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetKeyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetKeyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetKeyArgs) Unmarshal(in []byte) error {
	msg := new(user.GetKeysReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetKeyArgs_Req_DEFAULT *user.GetKeysReq

func (p *GetKeyArgs) GetReq() *user.GetKeysReq {
	if !p.IsSetReq() {
		return GetKeyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetKeyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetKeyResult struct {
	Success *user.GetKeysResp
}

var GetKeyResult_Success_DEFAULT *user.GetKeysResp

func (p *GetKeyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetKeysResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetKeyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetKeyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetKeyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetKeyResult) Unmarshal(in []byte) error {
	msg := new(user.GetKeysResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetKeyResult) GetSuccess() *user.GetKeysResp {
	if !p.IsSetSuccess() {
		return GetKeyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetKeysResp)
}

func (p *GetKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetKeyResult) GetResult() interface{} {
	return p.Success
}

func updateKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateKeyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).UpdateKey(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateKeyArgs:
		success, err := handler.(user.User).UpdateKey(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateKeyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateKeyArgs() interface{} {
	return &UpdateKeyArgs{}
}

func newUpdateKeyResult() interface{} {
	return &UpdateKeyResult{}
}

type UpdateKeyArgs struct {
	Req *user.UpdateKeyReq
}

func (p *UpdateKeyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UpdateKeyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateKeyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateKeyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateKeyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateKeyArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateKeyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateKeyArgs_Req_DEFAULT *user.UpdateKeyReq

func (p *UpdateKeyArgs) GetReq() *user.UpdateKeyReq {
	if !p.IsSetReq() {
		return UpdateKeyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateKeyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateKeyResult struct {
	Success *user.UpdateKeyResp
}

var UpdateKeyResult_Success_DEFAULT *user.UpdateKeyResp

func (p *UpdateKeyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UpdateKeyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateKeyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateKeyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateKeyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateKeyResult) Unmarshal(in []byte) error {
	msg := new(user.UpdateKeyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateKeyResult) GetSuccess() *user.UpdateKeyResp {
	if !p.IsSetSuccess() {
		return UpdateKeyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UpdateKeyResp)
}

func (p *UpdateKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateKeyResult) GetResult() interface{} {
	return p.Success
}

func updateHostsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateHostsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).UpdateHosts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateHostsArgs:
		success, err := handler.(user.User).UpdateHosts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateHostsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateHostsArgs() interface{} {
	return &UpdateHostsArgs{}
}

func newUpdateHostsResult() interface{} {
	return &UpdateHostsResult{}
}

type UpdateHostsArgs struct {
	Req *user.UpdateHostsReq
}

func (p *UpdateHostsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UpdateHostsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateHostsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateHostsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateHostsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateHostsArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateHostsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateHostsArgs_Req_DEFAULT *user.UpdateHostsReq

func (p *UpdateHostsArgs) GetReq() *user.UpdateHostsReq {
	if !p.IsSetReq() {
		return UpdateHostsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateHostsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateHostsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateHostsResult struct {
	Success *user.UpdateHostsResp
}

var UpdateHostsResult_Success_DEFAULT *user.UpdateHostsResp

func (p *UpdateHostsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UpdateHostsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateHostsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateHostsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateHostsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateHostsResult) Unmarshal(in []byte) error {
	msg := new(user.UpdateHostsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateHostsResult) GetSuccess() *user.UpdateHostsResp {
	if !p.IsSetSuccess() {
		return UpdateHostsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateHostsResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UpdateHostsResp)
}

func (p *UpdateHostsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateHostsResult) GetResult() interface{} {
	return p.Success
}

func refreshKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.RefreshKeyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).RefreshKey(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RefreshKeyArgs:
		success, err := handler.(user.User).RefreshKey(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RefreshKeyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRefreshKeyArgs() interface{} {
	return &RefreshKeyArgs{}
}

func newRefreshKeyResult() interface{} {
	return &RefreshKeyResult{}
}

type RefreshKeyArgs struct {
	Req *user.RefreshKeyReq
}

func (p *RefreshKeyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.RefreshKeyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RefreshKeyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RefreshKeyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RefreshKeyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RefreshKeyArgs) Unmarshal(in []byte) error {
	msg := new(user.RefreshKeyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RefreshKeyArgs_Req_DEFAULT *user.RefreshKeyReq

func (p *RefreshKeyArgs) GetReq() *user.RefreshKeyReq {
	if !p.IsSetReq() {
		return RefreshKeyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RefreshKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RefreshKeyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RefreshKeyResult struct {
	Success *user.RefreshKeyResp
}

var RefreshKeyResult_Success_DEFAULT *user.RefreshKeyResp

func (p *RefreshKeyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.RefreshKeyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RefreshKeyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RefreshKeyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RefreshKeyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RefreshKeyResult) Unmarshal(in []byte) error {
	msg := new(user.RefreshKeyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RefreshKeyResult) GetSuccess() *user.RefreshKeyResp {
	if !p.IsSetSuccess() {
		return RefreshKeyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RefreshKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.RefreshKeyResp)
}

func (p *RefreshKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RefreshKeyResult) GetResult() interface{} {
	return p.Success
}

func deleteKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DeleteKeyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).DeleteKey(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteKeyArgs:
		success, err := handler.(user.User).DeleteKey(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteKeyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteKeyArgs() interface{} {
	return &DeleteKeyArgs{}
}

func newDeleteKeyResult() interface{} {
	return &DeleteKeyResult{}
}

type DeleteKeyArgs struct {
	Req *user.DeleteKeyReq
}

func (p *DeleteKeyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DeleteKeyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteKeyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteKeyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteKeyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteKeyArgs) Unmarshal(in []byte) error {
	msg := new(user.DeleteKeyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteKeyArgs_Req_DEFAULT *user.DeleteKeyReq

func (p *DeleteKeyArgs) GetReq() *user.DeleteKeyReq {
	if !p.IsSetReq() {
		return DeleteKeyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteKeyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteKeyResult struct {
	Success *user.DeleteKeyResp
}

var DeleteKeyResult_Success_DEFAULT *user.DeleteKeyResp

func (p *DeleteKeyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.DeleteKeyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteKeyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteKeyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteKeyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteKeyResult) Unmarshal(in []byte) error {
	msg := new(user.DeleteKeyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteKeyResult) GetSuccess() *user.DeleteKeyResp {
	if !p.IsSetSuccess() {
		return DeleteKeyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.DeleteKeyResp)
}

func (p *DeleteKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteKeyResult) GetResult() interface{} {
	return p.Success
}

func getKeyForCheckHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetKeyForCheckReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).GetKeyForCheck(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetKeyForCheckArgs:
		success, err := handler.(user.User).GetKeyForCheck(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetKeyForCheckResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetKeyForCheckArgs() interface{} {
	return &GetKeyForCheckArgs{}
}

func newGetKeyForCheckResult() interface{} {
	return &GetKeyForCheckResult{}
}

type GetKeyForCheckArgs struct {
	Req *user.GetKeyForCheckReq
}

func (p *GetKeyForCheckArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetKeyForCheckReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetKeyForCheckArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetKeyForCheckArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetKeyForCheckArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetKeyForCheckArgs) Unmarshal(in []byte) error {
	msg := new(user.GetKeyForCheckReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetKeyForCheckArgs_Req_DEFAULT *user.GetKeyForCheckReq

func (p *GetKeyForCheckArgs) GetReq() *user.GetKeyForCheckReq {
	if !p.IsSetReq() {
		return GetKeyForCheckArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetKeyForCheckArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetKeyForCheckArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetKeyForCheckResult struct {
	Success *user.GetKeyForCheckResp
}

var GetKeyForCheckResult_Success_DEFAULT *user.GetKeyForCheckResp

func (p *GetKeyForCheckResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetKeyForCheckResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetKeyForCheckResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetKeyForCheckResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetKeyForCheckResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetKeyForCheckResult) Unmarshal(in []byte) error {
	msg := new(user.GetKeyForCheckResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetKeyForCheckResult) GetSuccess() *user.GetKeyForCheckResp {
	if !p.IsSetSuccess() {
		return GetKeyForCheckResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetKeyForCheckResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetKeyForCheckResp)
}

func (p *GetKeyForCheckResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetKeyForCheckResult) GetResult() interface{} {
	return p.Success
}

func setRemainHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.SetRemainReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).SetRemain(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SetRemainArgs:
		success, err := handler.(user.User).SetRemain(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetRemainResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSetRemainArgs() interface{} {
	return &SetRemainArgs{}
}

func newSetRemainResult() interface{} {
	return &SetRemainResult{}
}

type SetRemainArgs struct {
	Req *user.SetRemainReq
}

func (p *SetRemainArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.SetRemainReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetRemainArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetRemainArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetRemainArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetRemainArgs) Unmarshal(in []byte) error {
	msg := new(user.SetRemainReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetRemainArgs_Req_DEFAULT *user.SetRemainReq

func (p *SetRemainArgs) GetReq() *user.SetRemainReq {
	if !p.IsSetReq() {
		return SetRemainArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetRemainArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetRemainArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetRemainResult struct {
	Success *user.SetRemainResp
}

var SetRemainResult_Success_DEFAULT *user.SetRemainResp

func (p *SetRemainResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.SetRemainResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetRemainResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetRemainResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetRemainResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetRemainResult) Unmarshal(in []byte) error {
	msg := new(user.SetRemainResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetRemainResult) GetSuccess() *user.SetRemainResp {
	if !p.IsSetSuccess() {
		return SetRemainResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetRemainResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.SetRemainResp)
}

func (p *SetRemainResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetRemainResult) GetResult() interface{} {
	return p.Success
}

func getAccountByTxIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetAccountByTxIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.User).GetAccountByTxId(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAccountByTxIdArgs:
		success, err := handler.(user.User).GetAccountByTxId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAccountByTxIdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAccountByTxIdArgs() interface{} {
	return &GetAccountByTxIdArgs{}
}

func newGetAccountByTxIdResult() interface{} {
	return &GetAccountByTxIdResult{}
}

type GetAccountByTxIdArgs struct {
	Req *user.GetAccountByTxIdReq
}

func (p *GetAccountByTxIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetAccountByTxIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAccountByTxIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAccountByTxIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAccountByTxIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAccountByTxIdArgs) Unmarshal(in []byte) error {
	msg := new(user.GetAccountByTxIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAccountByTxIdArgs_Req_DEFAULT *user.GetAccountByTxIdReq

func (p *GetAccountByTxIdArgs) GetReq() *user.GetAccountByTxIdReq {
	if !p.IsSetReq() {
		return GetAccountByTxIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAccountByTxIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAccountByTxIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAccountByTxIdResult struct {
	Success *user.GetAccountByTxIdResp
}

var GetAccountByTxIdResult_Success_DEFAULT *user.GetAccountByTxIdResp

func (p *GetAccountByTxIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetAccountByTxIdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAccountByTxIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAccountByTxIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAccountByTxIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAccountByTxIdResult) Unmarshal(in []byte) error {
	msg := new(user.GetAccountByTxIdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAccountByTxIdResult) GetSuccess() *user.GetAccountByTxIdResp {
	if !p.IsSetSuccess() {
		return GetAccountByTxIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAccountByTxIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetAccountByTxIdResp)
}

func (p *GetAccountByTxIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAccountByTxIdResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SignUp(ctx context.Context, Req *user.SignUpReq) (r *user.SignUpResp, err error) {
	var _args SignUpArgs
	_args.Req = Req
	var _result SignUpResult
	if err = p.c.Call(ctx, "SignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *user.GetUserInfoReq) (r *user.GetUserInfoResp, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetUserInfo(ctx context.Context, Req *user.SetUserInfoReq) (r *user.SetUserInfoResp, err error) {
	var _args SetUserInfoArgs
	_args.Req = Req
	var _result SetUserInfoResult
	if err = p.c.Call(ctx, "SetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateKey(ctx context.Context, Req *user.CreateKeyReq) (r *user.CreateKeyResp, err error) {
	var _args CreateKeyArgs
	_args.Req = Req
	var _result CreateKeyResult
	if err = p.c.Call(ctx, "CreateKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetKey(ctx context.Context, Req *user.GetKeysReq) (r *user.GetKeysResp, err error) {
	var _args GetKeyArgs
	_args.Req = Req
	var _result GetKeyResult
	if err = p.c.Call(ctx, "GetKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateKey(ctx context.Context, Req *user.UpdateKeyReq) (r *user.UpdateKeyResp, err error) {
	var _args UpdateKeyArgs
	_args.Req = Req
	var _result UpdateKeyResult
	if err = p.c.Call(ctx, "UpdateKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateHosts(ctx context.Context, Req *user.UpdateHostsReq) (r *user.UpdateHostsResp, err error) {
	var _args UpdateHostsArgs
	_args.Req = Req
	var _result UpdateHostsResult
	if err = p.c.Call(ctx, "UpdateHosts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefreshKey(ctx context.Context, Req *user.RefreshKeyReq) (r *user.RefreshKeyResp, err error) {
	var _args RefreshKeyArgs
	_args.Req = Req
	var _result RefreshKeyResult
	if err = p.c.Call(ctx, "RefreshKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteKey(ctx context.Context, Req *user.DeleteKeyReq) (r *user.DeleteKeyResp, err error) {
	var _args DeleteKeyArgs
	_args.Req = Req
	var _result DeleteKeyResult
	if err = p.c.Call(ctx, "DeleteKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetKeyForCheck(ctx context.Context, Req *user.GetKeyForCheckReq) (r *user.GetKeyForCheckResp, err error) {
	var _args GetKeyForCheckArgs
	_args.Req = Req
	var _result GetKeyForCheckResult
	if err = p.c.Call(ctx, "GetKeyForCheck", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetRemain(ctx context.Context, Req *user.SetRemainReq) (r *user.SetRemainResp, err error) {
	var _args SetRemainArgs
	_args.Req = Req
	var _result SetRemainResult
	if err = p.c.Call(ctx, "SetRemain", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAccountByTxId(ctx context.Context, Req *user.GetAccountByTxIdReq) (r *user.GetAccountByTxIdResp, err error) {
	var _args GetAccountByTxIdArgs
	_args.Req = Req
	var _result GetAccountByTxIdResult
	if err = p.c.Call(ctx, "GetAccountByTxId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
