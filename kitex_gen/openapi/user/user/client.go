// Code generated by Kitex v0.12.1. DO NOT EDIT.

package user

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user "github.com/xh-polaris/service-idl-gen-go/kitex_gen/openapi/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SignUp(ctx context.Context, Req *user.SignUpReq, callOptions ...callopt.Option) (r *user.SignUpResp, err error)
	GetUserInfo(ctx context.Context, Req *user.GetUserInfoReq, callOptions ...callopt.Option) (r *user.GetUserInfoResp, err error)
	SetUserInfo(ctx context.Context, Req *user.SetUserInfoReq, callOptions ...callopt.Option) (r *user.SetUserInfoResp, err error)
	CreateKey(ctx context.Context, Req *user.CreateKeyReq, callOptions ...callopt.Option) (r *user.CreateKeyResp, err error)
	GetKey(ctx context.Context, Req *user.GetKeysReq, callOptions ...callopt.Option) (r *user.GetKeysResp, err error)
	UpdateKey(ctx context.Context, Req *user.UpdateKeyReq, callOptions ...callopt.Option) (r *user.UpdateKeyResp, err error)
	UpdateHosts(ctx context.Context, Req *user.UpdateHostsReq, callOptions ...callopt.Option) (r *user.UpdateHostsResp, err error)
	RefreshKey(ctx context.Context, Req *user.RefreshKeyReq, callOptions ...callopt.Option) (r *user.RefreshKeyResp, err error)
	DeleteKey(ctx context.Context, Req *user.DeleteKeyReq, callOptions ...callopt.Option) (r *user.DeleteKeyResp, err error)
	GetKeyForCheck(ctx context.Context, Req *user.GetKeyForCheckReq, callOptions ...callopt.Option) (r *user.GetKeyForCheckResp, err error)
	SetRemain(ctx context.Context, Req *user.SetRemainReq, callOptions ...callopt.Option) (r *user.SetRemainResp, err error)
	GetAccountByTxId(ctx context.Context, Req *user.GetAccountByTxIdReq, callOptions ...callopt.Option) (r *user.GetAccountByTxIdResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserClient struct {
	*kClient
}

func (p *kUserClient) SignUp(ctx context.Context, Req *user.SignUpReq, callOptions ...callopt.Option) (r *user.SignUpResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SignUp(ctx, Req)
}

func (p *kUserClient) GetUserInfo(ctx context.Context, Req *user.GetUserInfoReq, callOptions ...callopt.Option) (r *user.GetUserInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserInfo(ctx, Req)
}

func (p *kUserClient) SetUserInfo(ctx context.Context, Req *user.SetUserInfoReq, callOptions ...callopt.Option) (r *user.SetUserInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetUserInfo(ctx, Req)
}

func (p *kUserClient) CreateKey(ctx context.Context, Req *user.CreateKeyReq, callOptions ...callopt.Option) (r *user.CreateKeyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateKey(ctx, Req)
}

func (p *kUserClient) GetKey(ctx context.Context, Req *user.GetKeysReq, callOptions ...callopt.Option) (r *user.GetKeysResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetKey(ctx, Req)
}

func (p *kUserClient) UpdateKey(ctx context.Context, Req *user.UpdateKeyReq, callOptions ...callopt.Option) (r *user.UpdateKeyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateKey(ctx, Req)
}

func (p *kUserClient) UpdateHosts(ctx context.Context, Req *user.UpdateHostsReq, callOptions ...callopt.Option) (r *user.UpdateHostsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateHosts(ctx, Req)
}

func (p *kUserClient) RefreshKey(ctx context.Context, Req *user.RefreshKeyReq, callOptions ...callopt.Option) (r *user.RefreshKeyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RefreshKey(ctx, Req)
}

func (p *kUserClient) DeleteKey(ctx context.Context, Req *user.DeleteKeyReq, callOptions ...callopt.Option) (r *user.DeleteKeyResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteKey(ctx, Req)
}

func (p *kUserClient) GetKeyForCheck(ctx context.Context, Req *user.GetKeyForCheckReq, callOptions ...callopt.Option) (r *user.GetKeyForCheckResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetKeyForCheck(ctx, Req)
}

func (p *kUserClient) SetRemain(ctx context.Context, Req *user.SetRemainReq, callOptions ...callopt.Option) (r *user.SetRemainResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetRemain(ctx, Req)
}

func (p *kUserClient) GetAccountByTxId(ctx context.Context, Req *user.GetAccountByTxIdReq, callOptions ...callopt.Option) (r *user.GetAccountByTxIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAccountByTxId(ctx, Req)
}
