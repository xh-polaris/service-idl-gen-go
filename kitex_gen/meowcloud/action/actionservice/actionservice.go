// Code generated by Kitex v0.10.3. DO NOT EDIT.

package actionservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	action "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/action"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"DoLike": kitex.NewMethodInfo(
		doLikeHandler,
		newDoLikeArgs,
		newDoLikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelLike": kitex.NewMethodInfo(
		cancelLikeHandler,
		newCancelLikeArgs,
		newCancelLikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetLikedCount": kitex.NewMethodInfo(
		getLikedCountHandler,
		newGetLikedCountArgs,
		newGetLikedCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetLikedUsers": kitex.NewMethodInfo(
		getLikedUsersHandler,
		newGetLikedUsersArgs,
		newGetLikedUsersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserLiked": kitex.NewMethodInfo(
		getUserLikedHandler,
		newGetUserLikedArgs,
		newGetUserLikedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetLiked": kitex.NewMethodInfo(
		getLikedHandler,
		newGetLikedArgs,
		newGetLikedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DoShare": kitex.NewMethodInfo(
		doShareHandler,
		newDoShareArgs,
		newDoShareResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetSharedCount": kitex.NewMethodInfo(
		getSharedCountHandler,
		newGetSharedCountArgs,
		newGetSharedCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetSharedUsers": kitex.NewMethodInfo(
		getSharedUsersHandler,
		newGetSharedUsersArgs,
		newGetSharedUsersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserShared": kitex.NewMethodInfo(
		getUserSharedHandler,
		newGetUserSharedArgs,
		newGetUserSharedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetShared": kitex.NewMethodInfo(
		getSharedHandler,
		newGetSharedArgs,
		newGetSharedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DoFollow": kitex.NewMethodInfo(
		doFollowHandler,
		newDoFollowArgs,
		newDoFollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelFollow": kitex.NewMethodInfo(
		cancelFollowHandler,
		newCancelFollowArgs,
		newCancelFollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFollowedCount": kitex.NewMethodInfo(
		getFollowedCountHandler,
		newGetFollowedCountArgs,
		newGetFollowedCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFollowedUsers": kitex.NewMethodInfo(
		getFollowedUsersHandler,
		newGetFollowedUsersArgs,
		newGetFollowedUsersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserFollowed": kitex.NewMethodInfo(
		getUserFollowedHandler,
		newGetUserFollowedArgs,
		newGetUserFollowedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFollowed": kitex.NewMethodInfo(
		getFollowedHandler,
		newGetFollowedArgs,
		newGetFollowedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	actionServiceServiceInfo                = NewServiceInfo()
	actionServiceServiceInfoForClient       = NewServiceInfoForClient()
	actionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return actionServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return actionServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return actionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ActionService"
	handlerType := (*action.ActionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowcloud.action",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func doLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.DoLikeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).DoLike(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DoLikeArgs:
		success, err := handler.(action.ActionService).DoLike(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoLikeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDoLikeArgs() interface{} {
	return &DoLikeArgs{}
}

func newDoLikeResult() interface{} {
	return &DoLikeResult{}
}

type DoLikeArgs struct {
	Req *action.DoLikeReq
}

func (p *DoLikeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.DoLikeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoLikeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoLikeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoLikeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoLikeArgs) Unmarshal(in []byte) error {
	msg := new(action.DoLikeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoLikeArgs_Req_DEFAULT *action.DoLikeReq

func (p *DoLikeArgs) GetReq() *action.DoLikeReq {
	if !p.IsSetReq() {
		return DoLikeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoLikeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoLikeResult struct {
	Success *action.DoLikeResp
}

var DoLikeResult_Success_DEFAULT *action.DoLikeResp

func (p *DoLikeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.DoLikeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoLikeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoLikeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoLikeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoLikeResult) Unmarshal(in []byte) error {
	msg := new(action.DoLikeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoLikeResult) GetSuccess() *action.DoLikeResp {
	if !p.IsSetSuccess() {
		return DoLikeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.DoLikeResp)
}

func (p *DoLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoLikeResult) GetResult() interface{} {
	return p.Success
}

func cancelLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.CancelLikeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).CancelLike(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelLikeArgs:
		success, err := handler.(action.ActionService).CancelLike(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelLikeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelLikeArgs() interface{} {
	return &CancelLikeArgs{}
}

func newCancelLikeResult() interface{} {
	return &CancelLikeResult{}
}

type CancelLikeArgs struct {
	Req *action.CancelLikeReq
}

func (p *CancelLikeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.CancelLikeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelLikeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelLikeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelLikeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelLikeArgs) Unmarshal(in []byte) error {
	msg := new(action.CancelLikeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelLikeArgs_Req_DEFAULT *action.CancelLikeReq

func (p *CancelLikeArgs) GetReq() *action.CancelLikeReq {
	if !p.IsSetReq() {
		return CancelLikeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelLikeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelLikeResult struct {
	Success *action.CancelLikeResp
}

var CancelLikeResult_Success_DEFAULT *action.CancelLikeResp

func (p *CancelLikeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.CancelLikeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelLikeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelLikeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelLikeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelLikeResult) Unmarshal(in []byte) error {
	msg := new(action.CancelLikeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelLikeResult) GetSuccess() *action.CancelLikeResp {
	if !p.IsSetSuccess() {
		return CancelLikeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.CancelLikeResp)
}

func (p *CancelLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelLikeResult) GetResult() interface{} {
	return p.Success
}

func getLikedCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetLikedCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetLikedCount(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetLikedCountArgs:
		success, err := handler.(action.ActionService).GetLikedCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLikedCountResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetLikedCountArgs() interface{} {
	return &GetLikedCountArgs{}
}

func newGetLikedCountResult() interface{} {
	return &GetLikedCountResult{}
}

type GetLikedCountArgs struct {
	Req *action.GetLikedCountReq
}

func (p *GetLikedCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetLikedCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLikedCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLikedCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLikedCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLikedCountArgs) Unmarshal(in []byte) error {
	msg := new(action.GetLikedCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLikedCountArgs_Req_DEFAULT *action.GetLikedCountReq

func (p *GetLikedCountArgs) GetReq() *action.GetLikedCountReq {
	if !p.IsSetReq() {
		return GetLikedCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLikedCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLikedCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLikedCountResult struct {
	Success *action.GetLikedCountResp
}

var GetLikedCountResult_Success_DEFAULT *action.GetLikedCountResp

func (p *GetLikedCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetLikedCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLikedCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLikedCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLikedCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLikedCountResult) Unmarshal(in []byte) error {
	msg := new(action.GetLikedCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLikedCountResult) GetSuccess() *action.GetLikedCountResp {
	if !p.IsSetSuccess() {
		return GetLikedCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLikedCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetLikedCountResp)
}

func (p *GetLikedCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLikedCountResult) GetResult() interface{} {
	return p.Success
}

func getLikedUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetLikedUsersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetLikedUsers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetLikedUsersArgs:
		success, err := handler.(action.ActionService).GetLikedUsers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLikedUsersResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetLikedUsersArgs() interface{} {
	return &GetLikedUsersArgs{}
}

func newGetLikedUsersResult() interface{} {
	return &GetLikedUsersResult{}
}

type GetLikedUsersArgs struct {
	Req *action.GetLikedUsersReq
}

func (p *GetLikedUsersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetLikedUsersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLikedUsersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLikedUsersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLikedUsersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLikedUsersArgs) Unmarshal(in []byte) error {
	msg := new(action.GetLikedUsersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLikedUsersArgs_Req_DEFAULT *action.GetLikedUsersReq

func (p *GetLikedUsersArgs) GetReq() *action.GetLikedUsersReq {
	if !p.IsSetReq() {
		return GetLikedUsersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLikedUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLikedUsersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLikedUsersResult struct {
	Success *action.GetLikedUsersResp
}

var GetLikedUsersResult_Success_DEFAULT *action.GetLikedUsersResp

func (p *GetLikedUsersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetLikedUsersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLikedUsersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLikedUsersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLikedUsersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLikedUsersResult) Unmarshal(in []byte) error {
	msg := new(action.GetLikedUsersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLikedUsersResult) GetSuccess() *action.GetLikedUsersResp {
	if !p.IsSetSuccess() {
		return GetLikedUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLikedUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetLikedUsersResp)
}

func (p *GetLikedUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLikedUsersResult) GetResult() interface{} {
	return p.Success
}

func getUserLikedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetUserLikedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetUserLiked(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserLikedArgs:
		success, err := handler.(action.ActionService).GetUserLiked(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserLikedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserLikedArgs() interface{} {
	return &GetUserLikedArgs{}
}

func newGetUserLikedResult() interface{} {
	return &GetUserLikedResult{}
}

type GetUserLikedArgs struct {
	Req *action.GetUserLikedReq
}

func (p *GetUserLikedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetUserLikedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserLikedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserLikedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserLikedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserLikedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetUserLikedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserLikedArgs_Req_DEFAULT *action.GetUserLikedReq

func (p *GetUserLikedArgs) GetReq() *action.GetUserLikedReq {
	if !p.IsSetReq() {
		return GetUserLikedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserLikedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserLikedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserLikedResult struct {
	Success *action.GetUserLikedResp
}

var GetUserLikedResult_Success_DEFAULT *action.GetUserLikedResp

func (p *GetUserLikedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetUserLikedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserLikedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserLikedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserLikedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserLikedResult) Unmarshal(in []byte) error {
	msg := new(action.GetUserLikedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserLikedResult) GetSuccess() *action.GetUserLikedResp {
	if !p.IsSetSuccess() {
		return GetUserLikedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserLikedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetUserLikedResp)
}

func (p *GetUserLikedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserLikedResult) GetResult() interface{} {
	return p.Success
}

func getLikedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetLikedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetLiked(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetLikedArgs:
		success, err := handler.(action.ActionService).GetLiked(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLikedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetLikedArgs() interface{} {
	return &GetLikedArgs{}
}

func newGetLikedResult() interface{} {
	return &GetLikedResult{}
}

type GetLikedArgs struct {
	Req *action.GetLikedReq
}

func (p *GetLikedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetLikedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLikedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLikedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLikedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLikedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetLikedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLikedArgs_Req_DEFAULT *action.GetLikedReq

func (p *GetLikedArgs) GetReq() *action.GetLikedReq {
	if !p.IsSetReq() {
		return GetLikedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLikedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLikedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLikedResult struct {
	Success *action.GetLikedResp
}

var GetLikedResult_Success_DEFAULT *action.GetLikedResp

func (p *GetLikedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetLikedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLikedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLikedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLikedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLikedResult) Unmarshal(in []byte) error {
	msg := new(action.GetLikedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLikedResult) GetSuccess() *action.GetLikedResp {
	if !p.IsSetSuccess() {
		return GetLikedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLikedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetLikedResp)
}

func (p *GetLikedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLikedResult) GetResult() interface{} {
	return p.Success
}

func doShareHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.DoShareReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).DoShare(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DoShareArgs:
		success, err := handler.(action.ActionService).DoShare(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoShareResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDoShareArgs() interface{} {
	return &DoShareArgs{}
}

func newDoShareResult() interface{} {
	return &DoShareResult{}
}

type DoShareArgs struct {
	Req *action.DoShareReq
}

func (p *DoShareArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.DoShareReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoShareArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoShareArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoShareArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoShareArgs) Unmarshal(in []byte) error {
	msg := new(action.DoShareReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoShareArgs_Req_DEFAULT *action.DoShareReq

func (p *DoShareArgs) GetReq() *action.DoShareReq {
	if !p.IsSetReq() {
		return DoShareArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoShareArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoShareArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoShareResult struct {
	Success *action.DoShareResp
}

var DoShareResult_Success_DEFAULT *action.DoShareResp

func (p *DoShareResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.DoShareResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoShareResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoShareResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoShareResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoShareResult) Unmarshal(in []byte) error {
	msg := new(action.DoShareResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoShareResult) GetSuccess() *action.DoShareResp {
	if !p.IsSetSuccess() {
		return DoShareResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoShareResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.DoShareResp)
}

func (p *DoShareResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoShareResult) GetResult() interface{} {
	return p.Success
}

func getSharedCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetSharedCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetSharedCount(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSharedCountArgs:
		success, err := handler.(action.ActionService).GetSharedCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSharedCountResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSharedCountArgs() interface{} {
	return &GetSharedCountArgs{}
}

func newGetSharedCountResult() interface{} {
	return &GetSharedCountResult{}
}

type GetSharedCountArgs struct {
	Req *action.GetSharedCountReq
}

func (p *GetSharedCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetSharedCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSharedCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSharedCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSharedCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSharedCountArgs) Unmarshal(in []byte) error {
	msg := new(action.GetSharedCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSharedCountArgs_Req_DEFAULT *action.GetSharedCountReq

func (p *GetSharedCountArgs) GetReq() *action.GetSharedCountReq {
	if !p.IsSetReq() {
		return GetSharedCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSharedCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSharedCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSharedCountResult struct {
	Success *action.GetSharedCountResp
}

var GetSharedCountResult_Success_DEFAULT *action.GetSharedCountResp

func (p *GetSharedCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetSharedCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSharedCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSharedCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSharedCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSharedCountResult) Unmarshal(in []byte) error {
	msg := new(action.GetSharedCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSharedCountResult) GetSuccess() *action.GetSharedCountResp {
	if !p.IsSetSuccess() {
		return GetSharedCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSharedCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetSharedCountResp)
}

func (p *GetSharedCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSharedCountResult) GetResult() interface{} {
	return p.Success
}

func getSharedUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetSharedUsersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetSharedUsers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSharedUsersArgs:
		success, err := handler.(action.ActionService).GetSharedUsers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSharedUsersResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSharedUsersArgs() interface{} {
	return &GetSharedUsersArgs{}
}

func newGetSharedUsersResult() interface{} {
	return &GetSharedUsersResult{}
}

type GetSharedUsersArgs struct {
	Req *action.GetSharedUsersReq
}

func (p *GetSharedUsersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetSharedUsersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSharedUsersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSharedUsersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSharedUsersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSharedUsersArgs) Unmarshal(in []byte) error {
	msg := new(action.GetSharedUsersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSharedUsersArgs_Req_DEFAULT *action.GetSharedUsersReq

func (p *GetSharedUsersArgs) GetReq() *action.GetSharedUsersReq {
	if !p.IsSetReq() {
		return GetSharedUsersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSharedUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSharedUsersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSharedUsersResult struct {
	Success *action.GetSharedUsersResp
}

var GetSharedUsersResult_Success_DEFAULT *action.GetSharedUsersResp

func (p *GetSharedUsersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetSharedUsersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSharedUsersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSharedUsersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSharedUsersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSharedUsersResult) Unmarshal(in []byte) error {
	msg := new(action.GetSharedUsersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSharedUsersResult) GetSuccess() *action.GetSharedUsersResp {
	if !p.IsSetSuccess() {
		return GetSharedUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSharedUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetSharedUsersResp)
}

func (p *GetSharedUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSharedUsersResult) GetResult() interface{} {
	return p.Success
}

func getUserSharedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetUserSharedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetUserShared(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserSharedArgs:
		success, err := handler.(action.ActionService).GetUserShared(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserSharedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserSharedArgs() interface{} {
	return &GetUserSharedArgs{}
}

func newGetUserSharedResult() interface{} {
	return &GetUserSharedResult{}
}

type GetUserSharedArgs struct {
	Req *action.GetUserSharedReq
}

func (p *GetUserSharedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetUserSharedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserSharedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserSharedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserSharedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserSharedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetUserSharedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserSharedArgs_Req_DEFAULT *action.GetUserSharedReq

func (p *GetUserSharedArgs) GetReq() *action.GetUserSharedReq {
	if !p.IsSetReq() {
		return GetUserSharedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserSharedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserSharedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserSharedResult struct {
	Success *action.GetUserSharedResp
}

var GetUserSharedResult_Success_DEFAULT *action.GetUserSharedResp

func (p *GetUserSharedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetUserSharedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserSharedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserSharedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserSharedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserSharedResult) Unmarshal(in []byte) error {
	msg := new(action.GetUserSharedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserSharedResult) GetSuccess() *action.GetUserSharedResp {
	if !p.IsSetSuccess() {
		return GetUserSharedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserSharedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetUserSharedResp)
}

func (p *GetUserSharedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserSharedResult) GetResult() interface{} {
	return p.Success
}

func getSharedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetSharedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetShared(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSharedArgs:
		success, err := handler.(action.ActionService).GetShared(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSharedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSharedArgs() interface{} {
	return &GetSharedArgs{}
}

func newGetSharedResult() interface{} {
	return &GetSharedResult{}
}

type GetSharedArgs struct {
	Req *action.GetSharedReq
}

func (p *GetSharedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetSharedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSharedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSharedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSharedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSharedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetSharedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSharedArgs_Req_DEFAULT *action.GetSharedReq

func (p *GetSharedArgs) GetReq() *action.GetSharedReq {
	if !p.IsSetReq() {
		return GetSharedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSharedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSharedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSharedResult struct {
	Success *action.GetSharedResp
}

var GetSharedResult_Success_DEFAULT *action.GetSharedResp

func (p *GetSharedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetSharedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSharedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSharedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSharedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSharedResult) Unmarshal(in []byte) error {
	msg := new(action.GetSharedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSharedResult) GetSuccess() *action.GetSharedResp {
	if !p.IsSetSuccess() {
		return GetSharedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSharedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetSharedResp)
}

func (p *GetSharedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSharedResult) GetResult() interface{} {
	return p.Success
}

func doFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.DoFollowReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).DoFollow(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DoFollowArgs:
		success, err := handler.(action.ActionService).DoFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoFollowResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDoFollowArgs() interface{} {
	return &DoFollowArgs{}
}

func newDoFollowResult() interface{} {
	return &DoFollowResult{}
}

type DoFollowArgs struct {
	Req *action.DoFollowReq
}

func (p *DoFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.DoFollowReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoFollowArgs) Unmarshal(in []byte) error {
	msg := new(action.DoFollowReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoFollowArgs_Req_DEFAULT *action.DoFollowReq

func (p *DoFollowArgs) GetReq() *action.DoFollowReq {
	if !p.IsSetReq() {
		return DoFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoFollowArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoFollowResult struct {
	Success *action.DoFollowResp
}

var DoFollowResult_Success_DEFAULT *action.DoFollowResp

func (p *DoFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.DoFollowResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoFollowResult) Unmarshal(in []byte) error {
	msg := new(action.DoFollowResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoFollowResult) GetSuccess() *action.DoFollowResp {
	if !p.IsSetSuccess() {
		return DoFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.DoFollowResp)
}

func (p *DoFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoFollowResult) GetResult() interface{} {
	return p.Success
}

func cancelFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.CancelFollowReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).CancelFollow(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelFollowArgs:
		success, err := handler.(action.ActionService).CancelFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelFollowResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelFollowArgs() interface{} {
	return &CancelFollowArgs{}
}

func newCancelFollowResult() interface{} {
	return &CancelFollowResult{}
}

type CancelFollowArgs struct {
	Req *action.CancelFollowReq
}

func (p *CancelFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.CancelFollowReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelFollowArgs) Unmarshal(in []byte) error {
	msg := new(action.CancelFollowReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelFollowArgs_Req_DEFAULT *action.CancelFollowReq

func (p *CancelFollowArgs) GetReq() *action.CancelFollowReq {
	if !p.IsSetReq() {
		return CancelFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelFollowArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelFollowResult struct {
	Success *action.CancelFollowResp
}

var CancelFollowResult_Success_DEFAULT *action.CancelFollowResp

func (p *CancelFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.CancelFollowResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelFollowResult) Unmarshal(in []byte) error {
	msg := new(action.CancelFollowResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelFollowResult) GetSuccess() *action.CancelFollowResp {
	if !p.IsSetSuccess() {
		return CancelFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.CancelFollowResp)
}

func (p *CancelFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelFollowResult) GetResult() interface{} {
	return p.Success
}

func getFollowedCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetFollowedCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetFollowedCount(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFollowedCountArgs:
		success, err := handler.(action.ActionService).GetFollowedCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowedCountResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFollowedCountArgs() interface{} {
	return &GetFollowedCountArgs{}
}

func newGetFollowedCountResult() interface{} {
	return &GetFollowedCountResult{}
}

type GetFollowedCountArgs struct {
	Req *action.GetFollowedCountReq
}

func (p *GetFollowedCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetFollowedCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowedCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowedCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowedCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowedCountArgs) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowedCountArgs_Req_DEFAULT *action.GetFollowedCountReq

func (p *GetFollowedCountArgs) GetReq() *action.GetFollowedCountReq {
	if !p.IsSetReq() {
		return GetFollowedCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowedCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowedCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowedCountResult struct {
	Success *action.GetFollowedCountResp
}

var GetFollowedCountResult_Success_DEFAULT *action.GetFollowedCountResp

func (p *GetFollowedCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetFollowedCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowedCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowedCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowedCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowedCountResult) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowedCountResult) GetSuccess() *action.GetFollowedCountResp {
	if !p.IsSetSuccess() {
		return GetFollowedCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowedCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetFollowedCountResp)
}

func (p *GetFollowedCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowedCountResult) GetResult() interface{} {
	return p.Success
}

func getFollowedUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetFollowedUsersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetFollowedUsers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFollowedUsersArgs:
		success, err := handler.(action.ActionService).GetFollowedUsers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowedUsersResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFollowedUsersArgs() interface{} {
	return &GetFollowedUsersArgs{}
}

func newGetFollowedUsersResult() interface{} {
	return &GetFollowedUsersResult{}
}

type GetFollowedUsersArgs struct {
	Req *action.GetFollowedUsersReq
}

func (p *GetFollowedUsersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetFollowedUsersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowedUsersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowedUsersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowedUsersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowedUsersArgs) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedUsersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowedUsersArgs_Req_DEFAULT *action.GetFollowedUsersReq

func (p *GetFollowedUsersArgs) GetReq() *action.GetFollowedUsersReq {
	if !p.IsSetReq() {
		return GetFollowedUsersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowedUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowedUsersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowedUsersResult struct {
	Success *action.GetFollowedUsersResp
}

var GetFollowedUsersResult_Success_DEFAULT *action.GetFollowedUsersResp

func (p *GetFollowedUsersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetFollowedUsersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowedUsersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowedUsersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowedUsersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowedUsersResult) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedUsersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowedUsersResult) GetSuccess() *action.GetFollowedUsersResp {
	if !p.IsSetSuccess() {
		return GetFollowedUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowedUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetFollowedUsersResp)
}

func (p *GetFollowedUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowedUsersResult) GetResult() interface{} {
	return p.Success
}

func getUserFollowedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetUserFollowedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetUserFollowed(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserFollowedArgs:
		success, err := handler.(action.ActionService).GetUserFollowed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserFollowedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserFollowedArgs() interface{} {
	return &GetUserFollowedArgs{}
}

func newGetUserFollowedResult() interface{} {
	return &GetUserFollowedResult{}
}

type GetUserFollowedArgs struct {
	Req *action.GetUserFollowedReq
}

func (p *GetUserFollowedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetUserFollowedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserFollowedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserFollowedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserFollowedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserFollowedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetUserFollowedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserFollowedArgs_Req_DEFAULT *action.GetUserFollowedReq

func (p *GetUserFollowedArgs) GetReq() *action.GetUserFollowedReq {
	if !p.IsSetReq() {
		return GetUserFollowedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserFollowedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserFollowedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserFollowedResult struct {
	Success *action.GetUserFollowedResp
}

var GetUserFollowedResult_Success_DEFAULT *action.GetUserFollowedResp

func (p *GetUserFollowedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetUserFollowedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserFollowedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserFollowedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserFollowedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserFollowedResult) Unmarshal(in []byte) error {
	msg := new(action.GetUserFollowedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserFollowedResult) GetSuccess() *action.GetUserFollowedResp {
	if !p.IsSetSuccess() {
		return GetUserFollowedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserFollowedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetUserFollowedResp)
}

func (p *GetUserFollowedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserFollowedResult) GetResult() interface{} {
	return p.Success
}

func getFollowedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetFollowedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.ActionService).GetFollowed(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFollowedArgs:
		success, err := handler.(action.ActionService).GetFollowed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFollowedArgs() interface{} {
	return &GetFollowedArgs{}
}

func newGetFollowedResult() interface{} {
	return &GetFollowedResult{}
}

type GetFollowedArgs struct {
	Req *action.GetFollowedReq
}

func (p *GetFollowedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetFollowedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowedArgs_Req_DEFAULT *action.GetFollowedReq

func (p *GetFollowedArgs) GetReq() *action.GetFollowedReq {
	if !p.IsSetReq() {
		return GetFollowedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowedResult struct {
	Success *action.GetFollowedResp
}

var GetFollowedResult_Success_DEFAULT *action.GetFollowedResp

func (p *GetFollowedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetFollowedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowedResult) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowedResult) GetSuccess() *action.GetFollowedResp {
	if !p.IsSetSuccess() {
		return GetFollowedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetFollowedResp)
}

func (p *GetFollowedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowedResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DoLike(ctx context.Context, Req *action.DoLikeReq) (r *action.DoLikeResp, err error) {
	var _args DoLikeArgs
	_args.Req = Req
	var _result DoLikeResult
	if err = p.c.Call(ctx, "DoLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelLike(ctx context.Context, Req *action.CancelLikeReq) (r *action.CancelLikeResp, err error) {
	var _args CancelLikeArgs
	_args.Req = Req
	var _result CancelLikeResult
	if err = p.c.Call(ctx, "CancelLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikedCount(ctx context.Context, Req *action.GetLikedCountReq) (r *action.GetLikedCountResp, err error) {
	var _args GetLikedCountArgs
	_args.Req = Req
	var _result GetLikedCountResult
	if err = p.c.Call(ctx, "GetLikedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikedUsers(ctx context.Context, Req *action.GetLikedUsersReq) (r *action.GetLikedUsersResp, err error) {
	var _args GetLikedUsersArgs
	_args.Req = Req
	var _result GetLikedUsersResult
	if err = p.c.Call(ctx, "GetLikedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserLiked(ctx context.Context, Req *action.GetUserLikedReq) (r *action.GetUserLikedResp, err error) {
	var _args GetUserLikedArgs
	_args.Req = Req
	var _result GetUserLikedResult
	if err = p.c.Call(ctx, "GetUserLiked", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLiked(ctx context.Context, Req *action.GetLikedReq) (r *action.GetLikedResp, err error) {
	var _args GetLikedArgs
	_args.Req = Req
	var _result GetLikedResult
	if err = p.c.Call(ctx, "GetLiked", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DoShare(ctx context.Context, Req *action.DoShareReq) (r *action.DoShareResp, err error) {
	var _args DoShareArgs
	_args.Req = Req
	var _result DoShareResult
	if err = p.c.Call(ctx, "DoShare", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSharedCount(ctx context.Context, Req *action.GetSharedCountReq) (r *action.GetSharedCountResp, err error) {
	var _args GetSharedCountArgs
	_args.Req = Req
	var _result GetSharedCountResult
	if err = p.c.Call(ctx, "GetSharedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSharedUsers(ctx context.Context, Req *action.GetSharedUsersReq) (r *action.GetSharedUsersResp, err error) {
	var _args GetSharedUsersArgs
	_args.Req = Req
	var _result GetSharedUsersResult
	if err = p.c.Call(ctx, "GetSharedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserShared(ctx context.Context, Req *action.GetUserSharedReq) (r *action.GetUserSharedResp, err error) {
	var _args GetUserSharedArgs
	_args.Req = Req
	var _result GetUserSharedResult
	if err = p.c.Call(ctx, "GetUserShared", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetShared(ctx context.Context, Req *action.GetSharedReq) (r *action.GetSharedResp, err error) {
	var _args GetSharedArgs
	_args.Req = Req
	var _result GetSharedResult
	if err = p.c.Call(ctx, "GetShared", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DoFollow(ctx context.Context, Req *action.DoFollowReq) (r *action.DoFollowResp, err error) {
	var _args DoFollowArgs
	_args.Req = Req
	var _result DoFollowResult
	if err = p.c.Call(ctx, "DoFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelFollow(ctx context.Context, Req *action.CancelFollowReq) (r *action.CancelFollowResp, err error) {
	var _args CancelFollowArgs
	_args.Req = Req
	var _result CancelFollowResult
	if err = p.c.Call(ctx, "CancelFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowedCount(ctx context.Context, Req *action.GetFollowedCountReq) (r *action.GetFollowedCountResp, err error) {
	var _args GetFollowedCountArgs
	_args.Req = Req
	var _result GetFollowedCountResult
	if err = p.c.Call(ctx, "GetFollowedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowedUsers(ctx context.Context, Req *action.GetFollowedUsersReq) (r *action.GetFollowedUsersResp, err error) {
	var _args GetFollowedUsersArgs
	_args.Req = Req
	var _result GetFollowedUsersResult
	if err = p.c.Call(ctx, "GetFollowedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserFollowed(ctx context.Context, Req *action.GetUserFollowedReq) (r *action.GetUserFollowedResp, err error) {
	var _args GetUserFollowedArgs
	_args.Req = Req
	var _result GetUserFollowedResult
	if err = p.c.Call(ctx, "GetUserFollowed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowed(ctx context.Context, Req *action.GetFollowedReq) (r *action.GetFollowedResp, err error) {
	var _args GetFollowedArgs
	_args.Req = Req
	var _result GetFollowedResult
	if err = p.c.Call(ctx, "GetFollowed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
