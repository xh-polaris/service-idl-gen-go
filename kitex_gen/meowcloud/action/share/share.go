// Code generated by Kitex v0.10.3. DO NOT EDIT.

package share

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	action "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/action"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"DoShare": kitex.NewMethodInfo(
		doShareHandler,
		newDoShareArgs,
		newDoShareResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetSharedCount": kitex.NewMethodInfo(
		getSharedCountHandler,
		newGetSharedCountArgs,
		newGetSharedCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetSharedUsers": kitex.NewMethodInfo(
		getSharedUsersHandler,
		newGetSharedUsersArgs,
		newGetSharedUsersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserShared": kitex.NewMethodInfo(
		getUserSharedHandler,
		newGetUserSharedArgs,
		newGetUserSharedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetShared": kitex.NewMethodInfo(
		getSharedHandler,
		newGetSharedArgs,
		newGetSharedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	shareServiceInfo                = NewServiceInfo()
	shareServiceInfoForClient       = NewServiceInfoForClient()
	shareServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return shareServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return shareServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return shareServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "share"
	handlerType := (*action.Share)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowcloud.action",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func doShareHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.DoShareReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Share).DoShare(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DoShareArgs:
		success, err := handler.(action.Share).DoShare(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoShareResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDoShareArgs() interface{} {
	return &DoShareArgs{}
}

func newDoShareResult() interface{} {
	return &DoShareResult{}
}

type DoShareArgs struct {
	Req *action.DoShareReq
}

func (p *DoShareArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.DoShareReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoShareArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoShareArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoShareArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoShareArgs) Unmarshal(in []byte) error {
	msg := new(action.DoShareReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoShareArgs_Req_DEFAULT *action.DoShareReq

func (p *DoShareArgs) GetReq() *action.DoShareReq {
	if !p.IsSetReq() {
		return DoShareArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoShareArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoShareArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoShareResult struct {
	Success *action.DoShareResp
}

var DoShareResult_Success_DEFAULT *action.DoShareResp

func (p *DoShareResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.DoShareResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoShareResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoShareResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoShareResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoShareResult) Unmarshal(in []byte) error {
	msg := new(action.DoShareResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoShareResult) GetSuccess() *action.DoShareResp {
	if !p.IsSetSuccess() {
		return DoShareResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoShareResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.DoShareResp)
}

func (p *DoShareResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoShareResult) GetResult() interface{} {
	return p.Success
}

func getSharedCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetSharedCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Share).GetSharedCount(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSharedCountArgs:
		success, err := handler.(action.Share).GetSharedCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSharedCountResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSharedCountArgs() interface{} {
	return &GetSharedCountArgs{}
}

func newGetSharedCountResult() interface{} {
	return &GetSharedCountResult{}
}

type GetSharedCountArgs struct {
	Req *action.GetSharedCountReq
}

func (p *GetSharedCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetSharedCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSharedCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSharedCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSharedCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSharedCountArgs) Unmarshal(in []byte) error {
	msg := new(action.GetSharedCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSharedCountArgs_Req_DEFAULT *action.GetSharedCountReq

func (p *GetSharedCountArgs) GetReq() *action.GetSharedCountReq {
	if !p.IsSetReq() {
		return GetSharedCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSharedCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSharedCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSharedCountResult struct {
	Success *action.GetSharedCountResp
}

var GetSharedCountResult_Success_DEFAULT *action.GetSharedCountResp

func (p *GetSharedCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetSharedCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSharedCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSharedCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSharedCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSharedCountResult) Unmarshal(in []byte) error {
	msg := new(action.GetSharedCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSharedCountResult) GetSuccess() *action.GetSharedCountResp {
	if !p.IsSetSuccess() {
		return GetSharedCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSharedCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetSharedCountResp)
}

func (p *GetSharedCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSharedCountResult) GetResult() interface{} {
	return p.Success
}

func getSharedUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetSharedUsersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Share).GetSharedUsers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSharedUsersArgs:
		success, err := handler.(action.Share).GetSharedUsers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSharedUsersResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSharedUsersArgs() interface{} {
	return &GetSharedUsersArgs{}
}

func newGetSharedUsersResult() interface{} {
	return &GetSharedUsersResult{}
}

type GetSharedUsersArgs struct {
	Req *action.GetSharedUsersReq
}

func (p *GetSharedUsersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetSharedUsersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSharedUsersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSharedUsersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSharedUsersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSharedUsersArgs) Unmarshal(in []byte) error {
	msg := new(action.GetSharedUsersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSharedUsersArgs_Req_DEFAULT *action.GetSharedUsersReq

func (p *GetSharedUsersArgs) GetReq() *action.GetSharedUsersReq {
	if !p.IsSetReq() {
		return GetSharedUsersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSharedUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSharedUsersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSharedUsersResult struct {
	Success *action.GetSharedUsersResp
}

var GetSharedUsersResult_Success_DEFAULT *action.GetSharedUsersResp

func (p *GetSharedUsersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetSharedUsersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSharedUsersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSharedUsersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSharedUsersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSharedUsersResult) Unmarshal(in []byte) error {
	msg := new(action.GetSharedUsersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSharedUsersResult) GetSuccess() *action.GetSharedUsersResp {
	if !p.IsSetSuccess() {
		return GetSharedUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSharedUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetSharedUsersResp)
}

func (p *GetSharedUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSharedUsersResult) GetResult() interface{} {
	return p.Success
}

func getUserSharedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetUserSharedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Share).GetUserShared(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserSharedArgs:
		success, err := handler.(action.Share).GetUserShared(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserSharedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserSharedArgs() interface{} {
	return &GetUserSharedArgs{}
}

func newGetUserSharedResult() interface{} {
	return &GetUserSharedResult{}
}

type GetUserSharedArgs struct {
	Req *action.GetUserSharedReq
}

func (p *GetUserSharedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetUserSharedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserSharedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserSharedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserSharedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserSharedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetUserSharedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserSharedArgs_Req_DEFAULT *action.GetUserSharedReq

func (p *GetUserSharedArgs) GetReq() *action.GetUserSharedReq {
	if !p.IsSetReq() {
		return GetUserSharedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserSharedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserSharedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserSharedResult struct {
	Success *action.GetUserSharedResp
}

var GetUserSharedResult_Success_DEFAULT *action.GetUserSharedResp

func (p *GetUserSharedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetUserSharedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserSharedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserSharedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserSharedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserSharedResult) Unmarshal(in []byte) error {
	msg := new(action.GetUserSharedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserSharedResult) GetSuccess() *action.GetUserSharedResp {
	if !p.IsSetSuccess() {
		return GetUserSharedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserSharedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetUserSharedResp)
}

func (p *GetUserSharedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserSharedResult) GetResult() interface{} {
	return p.Success
}

func getSharedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetSharedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Share).GetShared(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSharedArgs:
		success, err := handler.(action.Share).GetShared(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSharedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSharedArgs() interface{} {
	return &GetSharedArgs{}
}

func newGetSharedResult() interface{} {
	return &GetSharedResult{}
}

type GetSharedArgs struct {
	Req *action.GetSharedReq
}

func (p *GetSharedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetSharedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSharedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSharedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSharedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSharedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetSharedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSharedArgs_Req_DEFAULT *action.GetSharedReq

func (p *GetSharedArgs) GetReq() *action.GetSharedReq {
	if !p.IsSetReq() {
		return GetSharedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSharedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSharedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSharedResult struct {
	Success *action.GetSharedResp
}

var GetSharedResult_Success_DEFAULT *action.GetSharedResp

func (p *GetSharedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetSharedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSharedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSharedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSharedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSharedResult) Unmarshal(in []byte) error {
	msg := new(action.GetSharedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSharedResult) GetSuccess() *action.GetSharedResp {
	if !p.IsSetSuccess() {
		return GetSharedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSharedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetSharedResp)
}

func (p *GetSharedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSharedResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DoShare(ctx context.Context, Req *action.DoShareReq) (r *action.DoShareResp, err error) {
	var _args DoShareArgs
	_args.Req = Req
	var _result DoShareResult
	if err = p.c.Call(ctx, "DoShare", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSharedCount(ctx context.Context, Req *action.GetSharedCountReq) (r *action.GetSharedCountResp, err error) {
	var _args GetSharedCountArgs
	_args.Req = Req
	var _result GetSharedCountResult
	if err = p.c.Call(ctx, "GetSharedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSharedUsers(ctx context.Context, Req *action.GetSharedUsersReq) (r *action.GetSharedUsersResp, err error) {
	var _args GetSharedUsersArgs
	_args.Req = Req
	var _result GetSharedUsersResult
	if err = p.c.Call(ctx, "GetSharedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserShared(ctx context.Context, Req *action.GetUserSharedReq) (r *action.GetUserSharedResp, err error) {
	var _args GetUserSharedArgs
	_args.Req = Req
	var _result GetUserSharedResult
	if err = p.c.Call(ctx, "GetUserShared", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetShared(ctx context.Context, Req *action.GetSharedReq) (r *action.GetSharedResp, err error) {
	var _args GetSharedArgs
	_args.Req = Req
	var _result GetSharedResult
	if err = p.c.Call(ctx, "GetShared", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
