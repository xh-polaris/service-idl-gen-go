// Code generated by Kitex v0.10.3. DO NOT EDIT.

package follow

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	action "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/action"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"DoFollow": kitex.NewMethodInfo(
		doFollowHandler,
		newDoFollowArgs,
		newDoFollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelFollow": kitex.NewMethodInfo(
		cancelFollowHandler,
		newCancelFollowArgs,
		newCancelFollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFollowedCount": kitex.NewMethodInfo(
		getFollowedCountHandler,
		newGetFollowedCountArgs,
		newGetFollowedCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFollowedUsers": kitex.NewMethodInfo(
		getFollowedUsersHandler,
		newGetFollowedUsersArgs,
		newGetFollowedUsersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserFollowed": kitex.NewMethodInfo(
		getUserFollowedHandler,
		newGetUserFollowedArgs,
		newGetUserFollowedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFollowed": kitex.NewMethodInfo(
		getFollowedHandler,
		newGetFollowedArgs,
		newGetFollowedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	followServiceInfo                = NewServiceInfo()
	followServiceInfoForClient       = NewServiceInfoForClient()
	followServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return followServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return followServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return followServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "follow"
	handlerType := (*action.Follow)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowcloud.action",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func doFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.DoFollowReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Follow).DoFollow(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DoFollowArgs:
		success, err := handler.(action.Follow).DoFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoFollowResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDoFollowArgs() interface{} {
	return &DoFollowArgs{}
}

func newDoFollowResult() interface{} {
	return &DoFollowResult{}
}

type DoFollowArgs struct {
	Req *action.DoFollowReq
}

func (p *DoFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.DoFollowReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoFollowArgs) Unmarshal(in []byte) error {
	msg := new(action.DoFollowReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoFollowArgs_Req_DEFAULT *action.DoFollowReq

func (p *DoFollowArgs) GetReq() *action.DoFollowReq {
	if !p.IsSetReq() {
		return DoFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoFollowArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoFollowResult struct {
	Success *action.DoFollowResp
}

var DoFollowResult_Success_DEFAULT *action.DoFollowResp

func (p *DoFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.DoFollowResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoFollowResult) Unmarshal(in []byte) error {
	msg := new(action.DoFollowResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoFollowResult) GetSuccess() *action.DoFollowResp {
	if !p.IsSetSuccess() {
		return DoFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.DoFollowResp)
}

func (p *DoFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoFollowResult) GetResult() interface{} {
	return p.Success
}

func cancelFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.CancelFollowReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Follow).CancelFollow(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelFollowArgs:
		success, err := handler.(action.Follow).CancelFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelFollowResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelFollowArgs() interface{} {
	return &CancelFollowArgs{}
}

func newCancelFollowResult() interface{} {
	return &CancelFollowResult{}
}

type CancelFollowArgs struct {
	Req *action.CancelFollowReq
}

func (p *CancelFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.CancelFollowReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelFollowArgs) Unmarshal(in []byte) error {
	msg := new(action.CancelFollowReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelFollowArgs_Req_DEFAULT *action.CancelFollowReq

func (p *CancelFollowArgs) GetReq() *action.CancelFollowReq {
	if !p.IsSetReq() {
		return CancelFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelFollowArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelFollowResult struct {
	Success *action.CancelFollowResp
}

var CancelFollowResult_Success_DEFAULT *action.CancelFollowResp

func (p *CancelFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.CancelFollowResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelFollowResult) Unmarshal(in []byte) error {
	msg := new(action.CancelFollowResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelFollowResult) GetSuccess() *action.CancelFollowResp {
	if !p.IsSetSuccess() {
		return CancelFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.CancelFollowResp)
}

func (p *CancelFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelFollowResult) GetResult() interface{} {
	return p.Success
}

func getFollowedCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetFollowedCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Follow).GetFollowedCount(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFollowedCountArgs:
		success, err := handler.(action.Follow).GetFollowedCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowedCountResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFollowedCountArgs() interface{} {
	return &GetFollowedCountArgs{}
}

func newGetFollowedCountResult() interface{} {
	return &GetFollowedCountResult{}
}

type GetFollowedCountArgs struct {
	Req *action.GetFollowedCountReq
}

func (p *GetFollowedCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetFollowedCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowedCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowedCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowedCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowedCountArgs) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowedCountArgs_Req_DEFAULT *action.GetFollowedCountReq

func (p *GetFollowedCountArgs) GetReq() *action.GetFollowedCountReq {
	if !p.IsSetReq() {
		return GetFollowedCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowedCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowedCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowedCountResult struct {
	Success *action.GetFollowedCountResp
}

var GetFollowedCountResult_Success_DEFAULT *action.GetFollowedCountResp

func (p *GetFollowedCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetFollowedCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowedCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowedCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowedCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowedCountResult) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowedCountResult) GetSuccess() *action.GetFollowedCountResp {
	if !p.IsSetSuccess() {
		return GetFollowedCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowedCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetFollowedCountResp)
}

func (p *GetFollowedCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowedCountResult) GetResult() interface{} {
	return p.Success
}

func getFollowedUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetFollowedUsersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Follow).GetFollowedUsers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFollowedUsersArgs:
		success, err := handler.(action.Follow).GetFollowedUsers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowedUsersResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFollowedUsersArgs() interface{} {
	return &GetFollowedUsersArgs{}
}

func newGetFollowedUsersResult() interface{} {
	return &GetFollowedUsersResult{}
}

type GetFollowedUsersArgs struct {
	Req *action.GetFollowedUsersReq
}

func (p *GetFollowedUsersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetFollowedUsersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowedUsersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowedUsersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowedUsersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowedUsersArgs) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedUsersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowedUsersArgs_Req_DEFAULT *action.GetFollowedUsersReq

func (p *GetFollowedUsersArgs) GetReq() *action.GetFollowedUsersReq {
	if !p.IsSetReq() {
		return GetFollowedUsersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowedUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowedUsersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowedUsersResult struct {
	Success *action.GetFollowedUsersResp
}

var GetFollowedUsersResult_Success_DEFAULT *action.GetFollowedUsersResp

func (p *GetFollowedUsersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetFollowedUsersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowedUsersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowedUsersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowedUsersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowedUsersResult) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedUsersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowedUsersResult) GetSuccess() *action.GetFollowedUsersResp {
	if !p.IsSetSuccess() {
		return GetFollowedUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowedUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetFollowedUsersResp)
}

func (p *GetFollowedUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowedUsersResult) GetResult() interface{} {
	return p.Success
}

func getUserFollowedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetUserFollowedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Follow).GetUserFollowed(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserFollowedArgs:
		success, err := handler.(action.Follow).GetUserFollowed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserFollowedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserFollowedArgs() interface{} {
	return &GetUserFollowedArgs{}
}

func newGetUserFollowedResult() interface{} {
	return &GetUserFollowedResult{}
}

type GetUserFollowedArgs struct {
	Req *action.GetUserFollowedReq
}

func (p *GetUserFollowedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetUserFollowedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserFollowedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserFollowedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserFollowedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserFollowedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetUserFollowedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserFollowedArgs_Req_DEFAULT *action.GetUserFollowedReq

func (p *GetUserFollowedArgs) GetReq() *action.GetUserFollowedReq {
	if !p.IsSetReq() {
		return GetUserFollowedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserFollowedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserFollowedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserFollowedResult struct {
	Success *action.GetUserFollowedResp
}

var GetUserFollowedResult_Success_DEFAULT *action.GetUserFollowedResp

func (p *GetUserFollowedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetUserFollowedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserFollowedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserFollowedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserFollowedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserFollowedResult) Unmarshal(in []byte) error {
	msg := new(action.GetUserFollowedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserFollowedResult) GetSuccess() *action.GetUserFollowedResp {
	if !p.IsSetSuccess() {
		return GetUserFollowedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserFollowedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetUserFollowedResp)
}

func (p *GetUserFollowedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserFollowedResult) GetResult() interface{} {
	return p.Success
}

func getFollowedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(action.GetFollowedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(action.Follow).GetFollowed(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFollowedArgs:
		success, err := handler.(action.Follow).GetFollowed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowedResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFollowedArgs() interface{} {
	return &GetFollowedArgs{}
}

func newGetFollowedResult() interface{} {
	return &GetFollowedResult{}
}

type GetFollowedArgs struct {
	Req *action.GetFollowedReq
}

func (p *GetFollowedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(action.GetFollowedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowedArgs) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowedArgs_Req_DEFAULT *action.GetFollowedReq

func (p *GetFollowedArgs) GetReq() *action.GetFollowedReq {
	if !p.IsSetReq() {
		return GetFollowedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowedResult struct {
	Success *action.GetFollowedResp
}

var GetFollowedResult_Success_DEFAULT *action.GetFollowedResp

func (p *GetFollowedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(action.GetFollowedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowedResult) Unmarshal(in []byte) error {
	msg := new(action.GetFollowedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowedResult) GetSuccess() *action.GetFollowedResp {
	if !p.IsSetSuccess() {
		return GetFollowedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowedResult) SetSuccess(x interface{}) {
	p.Success = x.(*action.GetFollowedResp)
}

func (p *GetFollowedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowedResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DoFollow(ctx context.Context, Req *action.DoFollowReq) (r *action.DoFollowResp, err error) {
	var _args DoFollowArgs
	_args.Req = Req
	var _result DoFollowResult
	if err = p.c.Call(ctx, "DoFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelFollow(ctx context.Context, Req *action.CancelFollowReq) (r *action.CancelFollowResp, err error) {
	var _args CancelFollowArgs
	_args.Req = Req
	var _result CancelFollowResult
	if err = p.c.Call(ctx, "CancelFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowedCount(ctx context.Context, Req *action.GetFollowedCountReq) (r *action.GetFollowedCountResp, err error) {
	var _args GetFollowedCountArgs
	_args.Req = Req
	var _result GetFollowedCountResult
	if err = p.c.Call(ctx, "GetFollowedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowedUsers(ctx context.Context, Req *action.GetFollowedUsersReq) (r *action.GetFollowedUsersResp, err error) {
	var _args GetFollowedUsersArgs
	_args.Req = Req
	var _result GetFollowedUsersResult
	if err = p.c.Call(ctx, "GetFollowedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserFollowed(ctx context.Context, Req *action.GetUserFollowedReq) (r *action.GetUserFollowedResp, err error) {
	var _args GetUserFollowedArgs
	_args.Req = Req
	var _result GetUserFollowedResult
	if err = p.c.Call(ctx, "GetUserFollowed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowed(ctx context.Context, Req *action.GetFollowedReq) (r *action.GetFollowedResp, err error) {
	var _args GetFollowedArgs
	_args.Req = Req
	var _result GetFollowedResult
	if err = p.c.Call(ctx, "GetFollowed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
