// Code generated by Kitex v0.10.3. DO NOT EDIT.

package follow

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	action "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/action"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	DoFollow(ctx context.Context, Req *action.DoFollowReq, callOptions ...callopt.Option) (r *action.DoFollowResp, err error)
	CancelFollow(ctx context.Context, Req *action.CancelFollowReq, callOptions ...callopt.Option) (r *action.CancelFollowResp, err error)
	GetFollowedCount(ctx context.Context, Req *action.GetFollowedCountReq, callOptions ...callopt.Option) (r *action.GetFollowedCountResp, err error)
	GetFollowedUsers(ctx context.Context, Req *action.GetFollowedUsersReq, callOptions ...callopt.Option) (r *action.GetFollowedUsersResp, err error)
	GetUserFollowed(ctx context.Context, Req *action.GetUserFollowedReq, callOptions ...callopt.Option) (r *action.GetUserFollowedResp, err error)
	GetFollowed(ctx context.Context, Req *action.GetFollowedReq, callOptions ...callopt.Option) (r *action.GetFollowedResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kFollowClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFollowClient struct {
	*kClient
}

func (p *kFollowClient) DoFollow(ctx context.Context, Req *action.DoFollowReq, callOptions ...callopt.Option) (r *action.DoFollowResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DoFollow(ctx, Req)
}

func (p *kFollowClient) CancelFollow(ctx context.Context, Req *action.CancelFollowReq, callOptions ...callopt.Option) (r *action.CancelFollowResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelFollow(ctx, Req)
}

func (p *kFollowClient) GetFollowedCount(ctx context.Context, Req *action.GetFollowedCountReq, callOptions ...callopt.Option) (r *action.GetFollowedCountResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowedCount(ctx, Req)
}

func (p *kFollowClient) GetFollowedUsers(ctx context.Context, Req *action.GetFollowedUsersReq, callOptions ...callopt.Option) (r *action.GetFollowedUsersResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowedUsers(ctx, Req)
}

func (p *kFollowClient) GetUserFollowed(ctx context.Context, Req *action.GetUserFollowedReq, callOptions ...callopt.Option) (r *action.GetUserFollowedResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserFollowed(ctx, Req)
}

func (p *kFollowClient) GetFollowed(ctx context.Context, Req *action.GetFollowedReq, callOptions ...callopt.Option) (r *action.GetFollowedResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowed(ctx, Req)
}
