// Code generated by Kitex v0.10.3. DO NOT EDIT.

package albumservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	content "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/content"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateAlbum": kitex.NewMethodInfo(
		createAlbumHandler,
		newCreateAlbumArgs,
		newCreateAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateAlbum": kitex.NewMethodInfo(
		updateAlbumHandler,
		newUpdateAlbumArgs,
		newUpdateAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetAlbum": kitex.NewMethodInfo(
		getAlbumHandler,
		newGetAlbumArgs,
		newGetAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListAlbums": kitex.NewMethodInfo(
		listAlbumsHandler,
		newListAlbumsArgs,
		newListAlbumsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteAlbum": kitex.NewMethodInfo(
		deleteAlbumHandler,
		newDeleteAlbumArgs,
		newDeleteAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	albumServiceServiceInfo                = NewServiceInfo()
	albumServiceServiceInfoForClient       = NewServiceInfoForClient()
	albumServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return albumServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return albumServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return albumServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AlbumService"
	handlerType := (*content.AlbumService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowcloud.content",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func createAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.AlbumService).CreateAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateAlbumArgs:
		success, err := handler.(content.AlbumService).CreateAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateAlbumArgs() interface{} {
	return &CreateAlbumArgs{}
}

func newCreateAlbumResult() interface{} {
	return &CreateAlbumResult{}
}

type CreateAlbumArgs struct {
	Req *content.CreateAlbumReq
}

func (p *CreateAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateAlbumArgs_Req_DEFAULT *content.CreateAlbumReq

func (p *CreateAlbumArgs) GetReq() *content.CreateAlbumReq {
	if !p.IsSetReq() {
		return CreateAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateAlbumResult struct {
	Success *content.CreateAlbumResp
}

var CreateAlbumResult_Success_DEFAULT *content.CreateAlbumResp

func (p *CreateAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.CreateAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateAlbumResult) GetSuccess() *content.CreateAlbumResp {
	if !p.IsSetSuccess() {
		return CreateAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateAlbumResp)
}

func (p *CreateAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateAlbumResult) GetResult() interface{} {
	return p.Success
}

func updateAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.AlbumService).UpdateAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateAlbumArgs:
		success, err := handler.(content.AlbumService).UpdateAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateAlbumArgs() interface{} {
	return &UpdateAlbumArgs{}
}

func newUpdateAlbumResult() interface{} {
	return &UpdateAlbumResult{}
}

type UpdateAlbumArgs struct {
	Req *content.UpdateAlbumReq
}

func (p *UpdateAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateAlbumArgs_Req_DEFAULT *content.UpdateAlbumReq

func (p *UpdateAlbumArgs) GetReq() *content.UpdateAlbumReq {
	if !p.IsSetReq() {
		return UpdateAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateAlbumResult struct {
	Success *content.UpdateAlbumResp
}

var UpdateAlbumResult_Success_DEFAULT *content.UpdateAlbumResp

func (p *UpdateAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateAlbumResult) GetSuccess() *content.UpdateAlbumResp {
	if !p.IsSetSuccess() {
		return UpdateAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateAlbumResp)
}

func (p *UpdateAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateAlbumResult) GetResult() interface{} {
	return p.Success
}

func getAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.AlbumService).GetAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAlbumArgs:
		success, err := handler.(content.AlbumService).GetAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAlbumArgs() interface{} {
	return &GetAlbumArgs{}
}

func newGetAlbumResult() interface{} {
	return &GetAlbumResult{}
}

type GetAlbumArgs struct {
	Req *content.GetAlbumReq
}

func (p *GetAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.GetAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAlbumArgs_Req_DEFAULT *content.GetAlbumReq

func (p *GetAlbumArgs) GetReq() *content.GetAlbumReq {
	if !p.IsSetReq() {
		return GetAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAlbumResult struct {
	Success *content.GetAlbumResp
}

var GetAlbumResult_Success_DEFAULT *content.GetAlbumResp

func (p *GetAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.GetAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAlbumResult) GetSuccess() *content.GetAlbumResp {
	if !p.IsSetSuccess() {
		return GetAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetAlbumResp)
}

func (p *GetAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAlbumResult) GetResult() interface{} {
	return p.Success
}

func listAlbumsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.ListAlbumsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.AlbumService).ListAlbums(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListAlbumsArgs:
		success, err := handler.(content.AlbumService).ListAlbums(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListAlbumsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListAlbumsArgs() interface{} {
	return &ListAlbumsArgs{}
}

func newListAlbumsResult() interface{} {
	return &ListAlbumsResult{}
}

type ListAlbumsArgs struct {
	Req *content.ListAlbumsReq
}

func (p *ListAlbumsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.ListAlbumsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListAlbumsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListAlbumsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListAlbumsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListAlbumsArgs) Unmarshal(in []byte) error {
	msg := new(content.ListAlbumsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListAlbumsArgs_Req_DEFAULT *content.ListAlbumsReq

func (p *ListAlbumsArgs) GetReq() *content.ListAlbumsReq {
	if !p.IsSetReq() {
		return ListAlbumsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListAlbumsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListAlbumsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListAlbumsResult struct {
	Success *content.ListAlbumsResp
}

var ListAlbumsResult_Success_DEFAULT *content.ListAlbumsResp

func (p *ListAlbumsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.ListAlbumsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListAlbumsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListAlbumsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListAlbumsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListAlbumsResult) Unmarshal(in []byte) error {
	msg := new(content.ListAlbumsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListAlbumsResult) GetSuccess() *content.ListAlbumsResp {
	if !p.IsSetSuccess() {
		return ListAlbumsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListAlbumsResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.ListAlbumsResp)
}

func (p *ListAlbumsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListAlbumsResult) GetResult() interface{} {
	return p.Success
}

func deleteAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.AlbumService).DeleteAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteAlbumArgs:
		success, err := handler.(content.AlbumService).DeleteAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteAlbumArgs() interface{} {
	return &DeleteAlbumArgs{}
}

func newDeleteAlbumResult() interface{} {
	return &DeleteAlbumResult{}
}

type DeleteAlbumArgs struct {
	Req *content.DeleteAlbumReq
}

func (p *DeleteAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteAlbumArgs_Req_DEFAULT *content.DeleteAlbumReq

func (p *DeleteAlbumArgs) GetReq() *content.DeleteAlbumReq {
	if !p.IsSetReq() {
		return DeleteAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteAlbumResult struct {
	Success *content.DeleteAlbumResp
}

var DeleteAlbumResult_Success_DEFAULT *content.DeleteAlbumResp

func (p *DeleteAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteAlbumResult) GetSuccess() *content.DeleteAlbumResp {
	if !p.IsSetSuccess() {
		return DeleteAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteAlbumResp)
}

func (p *DeleteAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteAlbumResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateAlbum(ctx context.Context, Req *content.CreateAlbumReq) (r *content.CreateAlbumResp, err error) {
	var _args CreateAlbumArgs
	_args.Req = Req
	var _result CreateAlbumResult
	if err = p.c.Call(ctx, "CreateAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateAlbum(ctx context.Context, Req *content.UpdateAlbumReq) (r *content.UpdateAlbumResp, err error) {
	var _args UpdateAlbumArgs
	_args.Req = Req
	var _result UpdateAlbumResult
	if err = p.c.Call(ctx, "UpdateAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAlbum(ctx context.Context, Req *content.GetAlbumReq) (r *content.GetAlbumResp, err error) {
	var _args GetAlbumArgs
	_args.Req = Req
	var _result GetAlbumResult
	if err = p.c.Call(ctx, "GetAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAlbums(ctx context.Context, Req *content.ListAlbumsReq) (r *content.ListAlbumsResp, err error) {
	var _args ListAlbumsArgs
	_args.Req = Req
	var _result ListAlbumsResult
	if err = p.c.Call(ctx, "ListAlbums", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAlbum(ctx context.Context, Req *content.DeleteAlbumReq) (r *content.DeleteAlbumResp, err error) {
	var _args DeleteAlbumArgs
	_args.Req = Req
	var _result DeleteAlbumResult
	if err = p.c.Call(ctx, "DeleteAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
