// Code generated by Kitex v0.12.1. DO NOT EDIT.

package contentservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	content "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/content"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateCatAlbum": kitex.NewMethodInfo(
		createCatAlbumHandler,
		newCreateCatAlbumArgs,
		newCreateCatAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RetrieveCatAlbum": kitex.NewMethodInfo(
		retrieveCatAlbumHandler,
		newRetrieveCatAlbumArgs,
		newRetrieveCatAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateCatAlbum": kitex.NewMethodInfo(
		updateCatAlbumHandler,
		newUpdateCatAlbumArgs,
		newUpdateCatAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteCatAlbum": kitex.NewMethodInfo(
		deleteCatAlbumHandler,
		newDeleteCatAlbumArgs,
		newDeleteCatAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListCatAlbum": kitex.NewMethodInfo(
		listCatAlbumHandler,
		newListCatAlbumArgs,
		newListCatAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateLocationAlbum": kitex.NewMethodInfo(
		createLocationAlbumHandler,
		newCreateLocationAlbumArgs,
		newCreateLocationAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RetrieveLocationAlbum": kitex.NewMethodInfo(
		retrieveLocationAlbumHandler,
		newRetrieveLocationAlbumArgs,
		newRetrieveLocationAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateLocationAlbum": kitex.NewMethodInfo(
		updateLocationAlbumHandler,
		newUpdateLocationAlbumArgs,
		newUpdateLocationAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteLocationAlbum": kitex.NewMethodInfo(
		deleteLocationAlbumHandler,
		newDeleteLocationAlbumArgs,
		newDeleteLocationAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListLocationAlbum": kitex.NewMethodInfo(
		listLocationAlbumHandler,
		newListLocationAlbumArgs,
		newListLocationAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreatePhoto": kitex.NewMethodInfo(
		createPhotoHandler,
		newCreatePhotoArgs,
		newCreatePhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RetrievePhoto": kitex.NewMethodInfo(
		retrievePhotoHandler,
		newRetrievePhotoArgs,
		newRetrievePhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdatePhoto": kitex.NewMethodInfo(
		updatePhotoHandler,
		newUpdatePhotoArgs,
		newUpdatePhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeletePhoto": kitex.NewMethodInfo(
		deletePhotoHandler,
		newDeletePhotoArgs,
		newDeletePhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListPhoto": kitex.NewMethodInfo(
		listPhotoHandler,
		newListPhotoArgs,
		newListPhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListFeaturedPhoto": kitex.NewMethodInfo(
		listFeaturedPhotoHandler,
		newListFeaturedPhotoArgs,
		newListFeaturedPhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	contentServiceServiceInfo                = NewServiceInfo()
	contentServiceServiceInfoForClient       = NewServiceInfoForClient()
	contentServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return contentServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return contentServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return contentServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ContentService"
	handlerType := (*content.ContentService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowcloud.content",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func createCatAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateCatAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateCatAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateCatAlbumArgs:
		success, err := handler.(content.ContentService).CreateCatAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateCatAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateCatAlbumArgs() interface{} {
	return &CreateCatAlbumArgs{}
}

func newCreateCatAlbumResult() interface{} {
	return &CreateCatAlbumResult{}
}

type CreateCatAlbumArgs struct {
	Req *content.CreateCatAlbumReq
}

func (p *CreateCatAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateCatAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateCatAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateCatAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateCatAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateCatAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateCatAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateCatAlbumArgs_Req_DEFAULT *content.CreateCatAlbumReq

func (p *CreateCatAlbumArgs) GetReq() *content.CreateCatAlbumReq {
	if !p.IsSetReq() {
		return CreateCatAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateCatAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateCatAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateCatAlbumResult struct {
	Success *content.CreateCatAlbumResp
}

var CreateCatAlbumResult_Success_DEFAULT *content.CreateCatAlbumResp

func (p *CreateCatAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateCatAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateCatAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateCatAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateCatAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateCatAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.CreateCatAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateCatAlbumResult) GetSuccess() *content.CreateCatAlbumResp {
	if !p.IsSetSuccess() {
		return CreateCatAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateCatAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateCatAlbumResp)
}

func (p *CreateCatAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateCatAlbumResult) GetResult() interface{} {
	return p.Success
}

func retrieveCatAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.RetrieveCatAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).RetrieveCatAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RetrieveCatAlbumArgs:
		success, err := handler.(content.ContentService).RetrieveCatAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveCatAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRetrieveCatAlbumArgs() interface{} {
	return &RetrieveCatAlbumArgs{}
}

func newRetrieveCatAlbumResult() interface{} {
	return &RetrieveCatAlbumResult{}
}

type RetrieveCatAlbumArgs struct {
	Req *content.RetrieveCatAlbumReq
}

func (p *RetrieveCatAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.RetrieveCatAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveCatAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveCatAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveCatAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveCatAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.RetrieveCatAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveCatAlbumArgs_Req_DEFAULT *content.RetrieveCatAlbumReq

func (p *RetrieveCatAlbumArgs) GetReq() *content.RetrieveCatAlbumReq {
	if !p.IsSetReq() {
		return RetrieveCatAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveCatAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveCatAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveCatAlbumResult struct {
	Success *content.RetrieveCatAlbumResp
}

var RetrieveCatAlbumResult_Success_DEFAULT *content.RetrieveCatAlbumResp

func (p *RetrieveCatAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.RetrieveCatAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveCatAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveCatAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveCatAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveCatAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.RetrieveCatAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveCatAlbumResult) GetSuccess() *content.RetrieveCatAlbumResp {
	if !p.IsSetSuccess() {
		return RetrieveCatAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveCatAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.RetrieveCatAlbumResp)
}

func (p *RetrieveCatAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveCatAlbumResult) GetResult() interface{} {
	return p.Success
}

func updateCatAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateCatAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateCatAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateCatAlbumArgs:
		success, err := handler.(content.ContentService).UpdateCatAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCatAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateCatAlbumArgs() interface{} {
	return &UpdateCatAlbumArgs{}
}

func newUpdateCatAlbumResult() interface{} {
	return &UpdateCatAlbumResult{}
}

type UpdateCatAlbumArgs struct {
	Req *content.UpdateCatAlbumReq
}

func (p *UpdateCatAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateCatAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCatAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCatAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCatAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCatAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateCatAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCatAlbumArgs_Req_DEFAULT *content.UpdateCatAlbumReq

func (p *UpdateCatAlbumArgs) GetReq() *content.UpdateCatAlbumReq {
	if !p.IsSetReq() {
		return UpdateCatAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCatAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCatAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCatAlbumResult struct {
	Success *content.UpdateCatAlbumResp
}

var UpdateCatAlbumResult_Success_DEFAULT *content.UpdateCatAlbumResp

func (p *UpdateCatAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateCatAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCatAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCatAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCatAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCatAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateCatAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCatAlbumResult) GetSuccess() *content.UpdateCatAlbumResp {
	if !p.IsSetSuccess() {
		return UpdateCatAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCatAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateCatAlbumResp)
}

func (p *UpdateCatAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCatAlbumResult) GetResult() interface{} {
	return p.Success
}

func deleteCatAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteCatAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteCatAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteCatAlbumArgs:
		success, err := handler.(content.ContentService).DeleteCatAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCatAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteCatAlbumArgs() interface{} {
	return &DeleteCatAlbumArgs{}
}

func newDeleteCatAlbumResult() interface{} {
	return &DeleteCatAlbumResult{}
}

type DeleteCatAlbumArgs struct {
	Req *content.DeleteCatAlbumReq
}

func (p *DeleteCatAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteCatAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCatAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCatAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCatAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCatAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteCatAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCatAlbumArgs_Req_DEFAULT *content.DeleteCatAlbumReq

func (p *DeleteCatAlbumArgs) GetReq() *content.DeleteCatAlbumReq {
	if !p.IsSetReq() {
		return DeleteCatAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCatAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCatAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCatAlbumResult struct {
	Success *content.DeleteCatAlbumResp
}

var DeleteCatAlbumResult_Success_DEFAULT *content.DeleteCatAlbumResp

func (p *DeleteCatAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteCatAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCatAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCatAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCatAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCatAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteCatAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCatAlbumResult) GetSuccess() *content.DeleteCatAlbumResp {
	if !p.IsSetSuccess() {
		return DeleteCatAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCatAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteCatAlbumResp)
}

func (p *DeleteCatAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCatAlbumResult) GetResult() interface{} {
	return p.Success
}

func listCatAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.ListCatAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).ListCatAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListCatAlbumArgs:
		success, err := handler.(content.ContentService).ListCatAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListCatAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListCatAlbumArgs() interface{} {
	return &ListCatAlbumArgs{}
}

func newListCatAlbumResult() interface{} {
	return &ListCatAlbumResult{}
}

type ListCatAlbumArgs struct {
	Req *content.ListCatAlbumReq
}

func (p *ListCatAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.ListCatAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListCatAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListCatAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListCatAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListCatAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.ListCatAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListCatAlbumArgs_Req_DEFAULT *content.ListCatAlbumReq

func (p *ListCatAlbumArgs) GetReq() *content.ListCatAlbumReq {
	if !p.IsSetReq() {
		return ListCatAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListCatAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListCatAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListCatAlbumResult struct {
	Success *content.ListCatAlbumResp
}

var ListCatAlbumResult_Success_DEFAULT *content.ListCatAlbumResp

func (p *ListCatAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.ListCatAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListCatAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListCatAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListCatAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListCatAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.ListCatAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListCatAlbumResult) GetSuccess() *content.ListCatAlbumResp {
	if !p.IsSetSuccess() {
		return ListCatAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListCatAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.ListCatAlbumResp)
}

func (p *ListCatAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListCatAlbumResult) GetResult() interface{} {
	return p.Success
}

func createLocationAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateLocationAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateLocationAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateLocationAlbumArgs:
		success, err := handler.(content.ContentService).CreateLocationAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateLocationAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateLocationAlbumArgs() interface{} {
	return &CreateLocationAlbumArgs{}
}

func newCreateLocationAlbumResult() interface{} {
	return &CreateLocationAlbumResult{}
}

type CreateLocationAlbumArgs struct {
	Req *content.CreateLocationAlbumReq
}

func (p *CreateLocationAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateLocationAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateLocationAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateLocationAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateLocationAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateLocationAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateLocationAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateLocationAlbumArgs_Req_DEFAULT *content.CreateLocationAlbumReq

func (p *CreateLocationAlbumArgs) GetReq() *content.CreateLocationAlbumReq {
	if !p.IsSetReq() {
		return CreateLocationAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateLocationAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateLocationAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateLocationAlbumResult struct {
	Success *content.CreateLocationAlbumResp
}

var CreateLocationAlbumResult_Success_DEFAULT *content.CreateLocationAlbumResp

func (p *CreateLocationAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateLocationAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateLocationAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateLocationAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateLocationAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateLocationAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.CreateLocationAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateLocationAlbumResult) GetSuccess() *content.CreateLocationAlbumResp {
	if !p.IsSetSuccess() {
		return CreateLocationAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateLocationAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateLocationAlbumResp)
}

func (p *CreateLocationAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateLocationAlbumResult) GetResult() interface{} {
	return p.Success
}

func retrieveLocationAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.RetrieveLocationAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).RetrieveLocationAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RetrieveLocationAlbumArgs:
		success, err := handler.(content.ContentService).RetrieveLocationAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveLocationAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRetrieveLocationAlbumArgs() interface{} {
	return &RetrieveLocationAlbumArgs{}
}

func newRetrieveLocationAlbumResult() interface{} {
	return &RetrieveLocationAlbumResult{}
}

type RetrieveLocationAlbumArgs struct {
	Req *content.RetrieveLocationAlbumReq
}

func (p *RetrieveLocationAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.RetrieveLocationAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveLocationAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveLocationAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveLocationAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveLocationAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.RetrieveLocationAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveLocationAlbumArgs_Req_DEFAULT *content.RetrieveLocationAlbumReq

func (p *RetrieveLocationAlbumArgs) GetReq() *content.RetrieveLocationAlbumReq {
	if !p.IsSetReq() {
		return RetrieveLocationAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveLocationAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveLocationAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveLocationAlbumResult struct {
	Success *content.RetrieveLocationAlbumResp
}

var RetrieveLocationAlbumResult_Success_DEFAULT *content.RetrieveLocationAlbumResp

func (p *RetrieveLocationAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.RetrieveLocationAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveLocationAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveLocationAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveLocationAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveLocationAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.RetrieveLocationAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveLocationAlbumResult) GetSuccess() *content.RetrieveLocationAlbumResp {
	if !p.IsSetSuccess() {
		return RetrieveLocationAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveLocationAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.RetrieveLocationAlbumResp)
}

func (p *RetrieveLocationAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveLocationAlbumResult) GetResult() interface{} {
	return p.Success
}

func updateLocationAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateLocationAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateLocationAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateLocationAlbumArgs:
		success, err := handler.(content.ContentService).UpdateLocationAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateLocationAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateLocationAlbumArgs() interface{} {
	return &UpdateLocationAlbumArgs{}
}

func newUpdateLocationAlbumResult() interface{} {
	return &UpdateLocationAlbumResult{}
}

type UpdateLocationAlbumArgs struct {
	Req *content.UpdateLocationAlbumReq
}

func (p *UpdateLocationAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateLocationAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateLocationAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateLocationAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateLocationAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateLocationAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateLocationAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateLocationAlbumArgs_Req_DEFAULT *content.UpdateLocationAlbumReq

func (p *UpdateLocationAlbumArgs) GetReq() *content.UpdateLocationAlbumReq {
	if !p.IsSetReq() {
		return UpdateLocationAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateLocationAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateLocationAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateLocationAlbumResult struct {
	Success *content.UpdateLocationAlbumResp
}

var UpdateLocationAlbumResult_Success_DEFAULT *content.UpdateLocationAlbumResp

func (p *UpdateLocationAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateLocationAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateLocationAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateLocationAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateLocationAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateLocationAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateLocationAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateLocationAlbumResult) GetSuccess() *content.UpdateLocationAlbumResp {
	if !p.IsSetSuccess() {
		return UpdateLocationAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateLocationAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateLocationAlbumResp)
}

func (p *UpdateLocationAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateLocationAlbumResult) GetResult() interface{} {
	return p.Success
}

func deleteLocationAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteLocationAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteLocationAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteLocationAlbumArgs:
		success, err := handler.(content.ContentService).DeleteLocationAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteLocationAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteLocationAlbumArgs() interface{} {
	return &DeleteLocationAlbumArgs{}
}

func newDeleteLocationAlbumResult() interface{} {
	return &DeleteLocationAlbumResult{}
}

type DeleteLocationAlbumArgs struct {
	Req *content.DeleteLocationAlbumReq
}

func (p *DeleteLocationAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteLocationAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteLocationAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteLocationAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteLocationAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteLocationAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteLocationAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteLocationAlbumArgs_Req_DEFAULT *content.DeleteLocationAlbumReq

func (p *DeleteLocationAlbumArgs) GetReq() *content.DeleteLocationAlbumReq {
	if !p.IsSetReq() {
		return DeleteLocationAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteLocationAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteLocationAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteLocationAlbumResult struct {
	Success *content.DeleteLocationAlbumResp
}

var DeleteLocationAlbumResult_Success_DEFAULT *content.DeleteLocationAlbumResp

func (p *DeleteLocationAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteLocationAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteLocationAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteLocationAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteLocationAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteLocationAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteLocationAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteLocationAlbumResult) GetSuccess() *content.DeleteLocationAlbumResp {
	if !p.IsSetSuccess() {
		return DeleteLocationAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteLocationAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteLocationAlbumResp)
}

func (p *DeleteLocationAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteLocationAlbumResult) GetResult() interface{} {
	return p.Success
}

func listLocationAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.ListLocationAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).ListLocationAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListLocationAlbumArgs:
		success, err := handler.(content.ContentService).ListLocationAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListLocationAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListLocationAlbumArgs() interface{} {
	return &ListLocationAlbumArgs{}
}

func newListLocationAlbumResult() interface{} {
	return &ListLocationAlbumResult{}
}

type ListLocationAlbumArgs struct {
	Req *content.ListLocationAlbumReq
}

func (p *ListLocationAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.ListLocationAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListLocationAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListLocationAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListLocationAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListLocationAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.ListLocationAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListLocationAlbumArgs_Req_DEFAULT *content.ListLocationAlbumReq

func (p *ListLocationAlbumArgs) GetReq() *content.ListLocationAlbumReq {
	if !p.IsSetReq() {
		return ListLocationAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListLocationAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListLocationAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListLocationAlbumResult struct {
	Success *content.ListLocationAlbumResp
}

var ListLocationAlbumResult_Success_DEFAULT *content.ListLocationAlbumResp

func (p *ListLocationAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.ListLocationAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListLocationAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListLocationAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListLocationAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListLocationAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.ListLocationAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListLocationAlbumResult) GetSuccess() *content.ListLocationAlbumResp {
	if !p.IsSetSuccess() {
		return ListLocationAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListLocationAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.ListLocationAlbumResp)
}

func (p *ListLocationAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListLocationAlbumResult) GetResult() interface{} {
	return p.Success
}

func createPhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreatePhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreatePhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreatePhotoArgs:
		success, err := handler.(content.ContentService).CreatePhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreatePhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreatePhotoArgs() interface{} {
	return &CreatePhotoArgs{}
}

func newCreatePhotoResult() interface{} {
	return &CreatePhotoResult{}
}

type CreatePhotoArgs struct {
	Req *content.CreatePhotoReq
}

func (p *CreatePhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreatePhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreatePhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreatePhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreatePhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreatePhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.CreatePhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreatePhotoArgs_Req_DEFAULT *content.CreatePhotoReq

func (p *CreatePhotoArgs) GetReq() *content.CreatePhotoReq {
	if !p.IsSetReq() {
		return CreatePhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreatePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreatePhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreatePhotoResult struct {
	Success *content.CreatePhotoResp
}

var CreatePhotoResult_Success_DEFAULT *content.CreatePhotoResp

func (p *CreatePhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreatePhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreatePhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreatePhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreatePhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreatePhotoResult) Unmarshal(in []byte) error {
	msg := new(content.CreatePhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreatePhotoResult) GetSuccess() *content.CreatePhotoResp {
	if !p.IsSetSuccess() {
		return CreatePhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreatePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreatePhotoResp)
}

func (p *CreatePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreatePhotoResult) GetResult() interface{} {
	return p.Success
}

func retrievePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.RetrievePhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).RetrievePhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RetrievePhotoArgs:
		success, err := handler.(content.ContentService).RetrievePhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrievePhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRetrievePhotoArgs() interface{} {
	return &RetrievePhotoArgs{}
}

func newRetrievePhotoResult() interface{} {
	return &RetrievePhotoResult{}
}

type RetrievePhotoArgs struct {
	Req *content.RetrievePhotoReq
}

func (p *RetrievePhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.RetrievePhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrievePhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrievePhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrievePhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RetrievePhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.RetrievePhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrievePhotoArgs_Req_DEFAULT *content.RetrievePhotoReq

func (p *RetrievePhotoArgs) GetReq() *content.RetrievePhotoReq {
	if !p.IsSetReq() {
		return RetrievePhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrievePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrievePhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrievePhotoResult struct {
	Success *content.RetrievePhotoResp
}

var RetrievePhotoResult_Success_DEFAULT *content.RetrievePhotoResp

func (p *RetrievePhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.RetrievePhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrievePhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrievePhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrievePhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RetrievePhotoResult) Unmarshal(in []byte) error {
	msg := new(content.RetrievePhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrievePhotoResult) GetSuccess() *content.RetrievePhotoResp {
	if !p.IsSetSuccess() {
		return RetrievePhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrievePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.RetrievePhotoResp)
}

func (p *RetrievePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrievePhotoResult) GetResult() interface{} {
	return p.Success
}

func updatePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdatePhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdatePhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdatePhotoArgs:
		success, err := handler.(content.ContentService).UpdatePhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdatePhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdatePhotoArgs() interface{} {
	return &UpdatePhotoArgs{}
}

func newUpdatePhotoResult() interface{} {
	return &UpdatePhotoResult{}
}

type UpdatePhotoArgs struct {
	Req *content.UpdatePhotoReq
}

func (p *UpdatePhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdatePhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdatePhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdatePhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdatePhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdatePhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdatePhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdatePhotoArgs_Req_DEFAULT *content.UpdatePhotoReq

func (p *UpdatePhotoArgs) GetReq() *content.UpdatePhotoReq {
	if !p.IsSetReq() {
		return UpdatePhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdatePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdatePhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdatePhotoResult struct {
	Success *content.UpdatePhotoResp
}

var UpdatePhotoResult_Success_DEFAULT *content.UpdatePhotoResp

func (p *UpdatePhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdatePhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdatePhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdatePhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdatePhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdatePhotoResult) Unmarshal(in []byte) error {
	msg := new(content.UpdatePhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdatePhotoResult) GetSuccess() *content.UpdatePhotoResp {
	if !p.IsSetSuccess() {
		return UpdatePhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdatePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdatePhotoResp)
}

func (p *UpdatePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdatePhotoResult) GetResult() interface{} {
	return p.Success
}

func deletePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeletePhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeletePhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeletePhotoArgs:
		success, err := handler.(content.ContentService).DeletePhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeletePhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeletePhotoArgs() interface{} {
	return &DeletePhotoArgs{}
}

func newDeletePhotoResult() interface{} {
	return &DeletePhotoResult{}
}

type DeletePhotoArgs struct {
	Req *content.DeletePhotoReq
}

func (p *DeletePhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeletePhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeletePhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeletePhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeletePhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeletePhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.DeletePhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeletePhotoArgs_Req_DEFAULT *content.DeletePhotoReq

func (p *DeletePhotoArgs) GetReq() *content.DeletePhotoReq {
	if !p.IsSetReq() {
		return DeletePhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeletePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeletePhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeletePhotoResult struct {
	Success *content.DeletePhotoResp
}

var DeletePhotoResult_Success_DEFAULT *content.DeletePhotoResp

func (p *DeletePhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeletePhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeletePhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeletePhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeletePhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeletePhotoResult) Unmarshal(in []byte) error {
	msg := new(content.DeletePhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeletePhotoResult) GetSuccess() *content.DeletePhotoResp {
	if !p.IsSetSuccess() {
		return DeletePhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeletePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeletePhotoResp)
}

func (p *DeletePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeletePhotoResult) GetResult() interface{} {
	return p.Success
}

func listPhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.ListPhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).ListPhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListPhotoArgs:
		success, err := handler.(content.ContentService).ListPhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListPhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListPhotoArgs() interface{} {
	return &ListPhotoArgs{}
}

func newListPhotoResult() interface{} {
	return &ListPhotoResult{}
}

type ListPhotoArgs struct {
	Req *content.ListPhotoReq
}

func (p *ListPhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.ListPhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListPhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListPhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListPhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListPhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.ListPhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListPhotoArgs_Req_DEFAULT *content.ListPhotoReq

func (p *ListPhotoArgs) GetReq() *content.ListPhotoReq {
	if !p.IsSetReq() {
		return ListPhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListPhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListPhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListPhotoResult struct {
	Success *content.ListPhotoResp
}

var ListPhotoResult_Success_DEFAULT *content.ListPhotoResp

func (p *ListPhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.ListPhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListPhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListPhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListPhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListPhotoResult) Unmarshal(in []byte) error {
	msg := new(content.ListPhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListPhotoResult) GetSuccess() *content.ListPhotoResp {
	if !p.IsSetSuccess() {
		return ListPhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListPhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.ListPhotoResp)
}

func (p *ListPhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListPhotoResult) GetResult() interface{} {
	return p.Success
}

func listFeaturedPhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.ListFeaturedPhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).ListFeaturedPhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListFeaturedPhotoArgs:
		success, err := handler.(content.ContentService).ListFeaturedPhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListFeaturedPhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListFeaturedPhotoArgs() interface{} {
	return &ListFeaturedPhotoArgs{}
}

func newListFeaturedPhotoResult() interface{} {
	return &ListFeaturedPhotoResult{}
}

type ListFeaturedPhotoArgs struct {
	Req *content.ListFeaturedPhotoReq
}

func (p *ListFeaturedPhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.ListFeaturedPhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListFeaturedPhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListFeaturedPhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListFeaturedPhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListFeaturedPhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.ListFeaturedPhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListFeaturedPhotoArgs_Req_DEFAULT *content.ListFeaturedPhotoReq

func (p *ListFeaturedPhotoArgs) GetReq() *content.ListFeaturedPhotoReq {
	if !p.IsSetReq() {
		return ListFeaturedPhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListFeaturedPhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListFeaturedPhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListFeaturedPhotoResult struct {
	Success *content.ListFeaturedPhotoResp
}

var ListFeaturedPhotoResult_Success_DEFAULT *content.ListFeaturedPhotoResp

func (p *ListFeaturedPhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.ListFeaturedPhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListFeaturedPhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListFeaturedPhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListFeaturedPhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListFeaturedPhotoResult) Unmarshal(in []byte) error {
	msg := new(content.ListFeaturedPhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListFeaturedPhotoResult) GetSuccess() *content.ListFeaturedPhotoResp {
	if !p.IsSetSuccess() {
		return ListFeaturedPhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListFeaturedPhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.ListFeaturedPhotoResp)
}

func (p *ListFeaturedPhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListFeaturedPhotoResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateCatAlbum(ctx context.Context, Req *content.CreateCatAlbumReq) (r *content.CreateCatAlbumResp, err error) {
	var _args CreateCatAlbumArgs
	_args.Req = Req
	var _result CreateCatAlbumResult
	if err = p.c.Call(ctx, "CreateCatAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrieveCatAlbum(ctx context.Context, Req *content.RetrieveCatAlbumReq) (r *content.RetrieveCatAlbumResp, err error) {
	var _args RetrieveCatAlbumArgs
	_args.Req = Req
	var _result RetrieveCatAlbumResult
	if err = p.c.Call(ctx, "RetrieveCatAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCatAlbum(ctx context.Context, Req *content.UpdateCatAlbumReq) (r *content.UpdateCatAlbumResp, err error) {
	var _args UpdateCatAlbumArgs
	_args.Req = Req
	var _result UpdateCatAlbumResult
	if err = p.c.Call(ctx, "UpdateCatAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCatAlbum(ctx context.Context, Req *content.DeleteCatAlbumReq) (r *content.DeleteCatAlbumResp, err error) {
	var _args DeleteCatAlbumArgs
	_args.Req = Req
	var _result DeleteCatAlbumResult
	if err = p.c.Call(ctx, "DeleteCatAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCatAlbum(ctx context.Context, Req *content.ListCatAlbumReq) (r *content.ListCatAlbumResp, err error) {
	var _args ListCatAlbumArgs
	_args.Req = Req
	var _result ListCatAlbumResult
	if err = p.c.Call(ctx, "ListCatAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateLocationAlbum(ctx context.Context, Req *content.CreateLocationAlbumReq) (r *content.CreateLocationAlbumResp, err error) {
	var _args CreateLocationAlbumArgs
	_args.Req = Req
	var _result CreateLocationAlbumResult
	if err = p.c.Call(ctx, "CreateLocationAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrieveLocationAlbum(ctx context.Context, Req *content.RetrieveLocationAlbumReq) (r *content.RetrieveLocationAlbumResp, err error) {
	var _args RetrieveLocationAlbumArgs
	_args.Req = Req
	var _result RetrieveLocationAlbumResult
	if err = p.c.Call(ctx, "RetrieveLocationAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateLocationAlbum(ctx context.Context, Req *content.UpdateLocationAlbumReq) (r *content.UpdateLocationAlbumResp, err error) {
	var _args UpdateLocationAlbumArgs
	_args.Req = Req
	var _result UpdateLocationAlbumResult
	if err = p.c.Call(ctx, "UpdateLocationAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteLocationAlbum(ctx context.Context, Req *content.DeleteLocationAlbumReq) (r *content.DeleteLocationAlbumResp, err error) {
	var _args DeleteLocationAlbumArgs
	_args.Req = Req
	var _result DeleteLocationAlbumResult
	if err = p.c.Call(ctx, "DeleteLocationAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListLocationAlbum(ctx context.Context, Req *content.ListLocationAlbumReq) (r *content.ListLocationAlbumResp, err error) {
	var _args ListLocationAlbumArgs
	_args.Req = Req
	var _result ListLocationAlbumResult
	if err = p.c.Call(ctx, "ListLocationAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePhoto(ctx context.Context, Req *content.CreatePhotoReq) (r *content.CreatePhotoResp, err error) {
	var _args CreatePhotoArgs
	_args.Req = Req
	var _result CreatePhotoResult
	if err = p.c.Call(ctx, "CreatePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrievePhoto(ctx context.Context, Req *content.RetrievePhotoReq) (r *content.RetrievePhotoResp, err error) {
	var _args RetrievePhotoArgs
	_args.Req = Req
	var _result RetrievePhotoResult
	if err = p.c.Call(ctx, "RetrievePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePhoto(ctx context.Context, Req *content.UpdatePhotoReq) (r *content.UpdatePhotoResp, err error) {
	var _args UpdatePhotoArgs
	_args.Req = Req
	var _result UpdatePhotoResult
	if err = p.c.Call(ctx, "UpdatePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePhoto(ctx context.Context, Req *content.DeletePhotoReq) (r *content.DeletePhotoResp, err error) {
	var _args DeletePhotoArgs
	_args.Req = Req
	var _result DeletePhotoResult
	if err = p.c.Call(ctx, "DeletePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPhoto(ctx context.Context, Req *content.ListPhotoReq) (r *content.ListPhotoResp, err error) {
	var _args ListPhotoArgs
	_args.Req = Req
	var _result ListPhotoResult
	if err = p.c.Call(ctx, "ListPhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListFeaturedPhoto(ctx context.Context, Req *content.ListFeaturedPhotoReq) (r *content.ListFeaturedPhotoResp, err error) {
	var _args ListFeaturedPhotoArgs
	_args.Req = Req
	var _result ListFeaturedPhotoResult
	if err = p.c.Call(ctx, "ListFeaturedPhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
