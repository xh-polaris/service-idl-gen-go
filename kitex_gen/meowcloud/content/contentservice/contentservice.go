// Code generated by Kitex v0.10.3. DO NOT EDIT.

package contentservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	content "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/content"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateAlbum": kitex.NewMethodInfo(
		createAlbumHandler,
		newCreateAlbumArgs,
		newCreateAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RetrieveAlbum": kitex.NewMethodInfo(
		retrieveAlbumHandler,
		newRetrieveAlbumArgs,
		newRetrieveAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateAlbum": kitex.NewMethodInfo(
		updateAlbumHandler,
		newUpdateAlbumArgs,
		newUpdateAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteAlbum": kitex.NewMethodInfo(
		deleteAlbumHandler,
		newDeleteAlbumArgs,
		newDeleteAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListAlbum": kitex.NewMethodInfo(
		listAlbumHandler,
		newListAlbumArgs,
		newListAlbumResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreatePhoto": kitex.NewMethodInfo(
		createPhotoHandler,
		newCreatePhotoArgs,
		newCreatePhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RetrievePhoto": kitex.NewMethodInfo(
		retrievePhotoHandler,
		newRetrievePhotoArgs,
		newRetrievePhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdatePhoto": kitex.NewMethodInfo(
		updatePhotoHandler,
		newUpdatePhotoArgs,
		newUpdatePhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeletePhoto": kitex.NewMethodInfo(
		deletePhotoHandler,
		newDeletePhotoArgs,
		newDeletePhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListPhoto": kitex.NewMethodInfo(
		listPhotoHandler,
		newListPhotoArgs,
		newListPhotoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	contentServiceServiceInfo                = NewServiceInfo()
	contentServiceServiceInfoForClient       = NewServiceInfoForClient()
	contentServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return contentServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return contentServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return contentServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ContentService"
	handlerType := (*content.ContentService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowcloud.content",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func createAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreateAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreateAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateAlbumArgs:
		success, err := handler.(content.ContentService).CreateAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateAlbumArgs() interface{} {
	return &CreateAlbumArgs{}
}

func newCreateAlbumResult() interface{} {
	return &CreateAlbumResult{}
}

type CreateAlbumArgs struct {
	Req *content.CreateAlbumReq
}

func (p *CreateAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreateAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.CreateAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateAlbumArgs_Req_DEFAULT *content.CreateAlbumReq

func (p *CreateAlbumArgs) GetReq() *content.CreateAlbumReq {
	if !p.IsSetReq() {
		return CreateAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateAlbumResult struct {
	Success *content.CreateAlbumResp
}

var CreateAlbumResult_Success_DEFAULT *content.CreateAlbumResp

func (p *CreateAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreateAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.CreateAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateAlbumResult) GetSuccess() *content.CreateAlbumResp {
	if !p.IsSetSuccess() {
		return CreateAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreateAlbumResp)
}

func (p *CreateAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateAlbumResult) GetResult() interface{} {
	return p.Success
}

func retrieveAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.RetrieveAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).RetrieveAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RetrieveAlbumArgs:
		success, err := handler.(content.ContentService).RetrieveAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRetrieveAlbumArgs() interface{} {
	return &RetrieveAlbumArgs{}
}

func newRetrieveAlbumResult() interface{} {
	return &RetrieveAlbumResult{}
}

type RetrieveAlbumArgs struct {
	Req *content.RetrieveAlbumReq
}

func (p *RetrieveAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.RetrieveAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.RetrieveAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveAlbumArgs_Req_DEFAULT *content.RetrieveAlbumReq

func (p *RetrieveAlbumArgs) GetReq() *content.RetrieveAlbumReq {
	if !p.IsSetReq() {
		return RetrieveAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveAlbumResult struct {
	Success *content.RetrieveAlbumResp
}

var RetrieveAlbumResult_Success_DEFAULT *content.RetrieveAlbumResp

func (p *RetrieveAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.RetrieveAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.RetrieveAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveAlbumResult) GetSuccess() *content.RetrieveAlbumResp {
	if !p.IsSetSuccess() {
		return RetrieveAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.RetrieveAlbumResp)
}

func (p *RetrieveAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveAlbumResult) GetResult() interface{} {
	return p.Success
}

func updateAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdateAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateAlbumArgs:
		success, err := handler.(content.ContentService).UpdateAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateAlbumArgs() interface{} {
	return &UpdateAlbumArgs{}
}

func newUpdateAlbumResult() interface{} {
	return &UpdateAlbumResult{}
}

type UpdateAlbumArgs struct {
	Req *content.UpdateAlbumReq
}

func (p *UpdateAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateAlbumArgs_Req_DEFAULT *content.UpdateAlbumReq

func (p *UpdateAlbumArgs) GetReq() *content.UpdateAlbumReq {
	if !p.IsSetReq() {
		return UpdateAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateAlbumResult struct {
	Success *content.UpdateAlbumResp
}

var UpdateAlbumResult_Success_DEFAULT *content.UpdateAlbumResp

func (p *UpdateAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateAlbumResult) GetSuccess() *content.UpdateAlbumResp {
	if !p.IsSetSuccess() {
		return UpdateAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateAlbumResp)
}

func (p *UpdateAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateAlbumResult) GetResult() interface{} {
	return p.Success
}

func deleteAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeleteAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteAlbumArgs:
		success, err := handler.(content.ContentService).DeleteAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteAlbumArgs() interface{} {
	return &DeleteAlbumArgs{}
}

func newDeleteAlbumResult() interface{} {
	return &DeleteAlbumResult{}
}

type DeleteAlbumArgs struct {
	Req *content.DeleteAlbumReq
}

func (p *DeleteAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteAlbumArgs_Req_DEFAULT *content.DeleteAlbumReq

func (p *DeleteAlbumArgs) GetReq() *content.DeleteAlbumReq {
	if !p.IsSetReq() {
		return DeleteAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteAlbumResult struct {
	Success *content.DeleteAlbumResp
}

var DeleteAlbumResult_Success_DEFAULT *content.DeleteAlbumResp

func (p *DeleteAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteAlbumResult) GetSuccess() *content.DeleteAlbumResp {
	if !p.IsSetSuccess() {
		return DeleteAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteAlbumResp)
}

func (p *DeleteAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteAlbumResult) GetResult() interface{} {
	return p.Success
}

func listAlbumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.ListAlbumReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).ListAlbum(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListAlbumArgs:
		success, err := handler.(content.ContentService).ListAlbum(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListAlbumResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListAlbumArgs() interface{} {
	return &ListAlbumArgs{}
}

func newListAlbumResult() interface{} {
	return &ListAlbumResult{}
}

type ListAlbumArgs struct {
	Req *content.ListAlbumReq
}

func (p *ListAlbumArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.ListAlbumReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListAlbumArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListAlbumArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListAlbumArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListAlbumArgs) Unmarshal(in []byte) error {
	msg := new(content.ListAlbumReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListAlbumArgs_Req_DEFAULT *content.ListAlbumReq

func (p *ListAlbumArgs) GetReq() *content.ListAlbumReq {
	if !p.IsSetReq() {
		return ListAlbumArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListAlbumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListAlbumArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListAlbumResult struct {
	Success *content.ListAlbumResp
}

var ListAlbumResult_Success_DEFAULT *content.ListAlbumResp

func (p *ListAlbumResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.ListAlbumResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListAlbumResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListAlbumResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListAlbumResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListAlbumResult) Unmarshal(in []byte) error {
	msg := new(content.ListAlbumResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListAlbumResult) GetSuccess() *content.ListAlbumResp {
	if !p.IsSetSuccess() {
		return ListAlbumResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListAlbumResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.ListAlbumResp)
}

func (p *ListAlbumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListAlbumResult) GetResult() interface{} {
	return p.Success
}

func createPhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.CreatePhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).CreatePhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreatePhotoArgs:
		success, err := handler.(content.ContentService).CreatePhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreatePhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreatePhotoArgs() interface{} {
	return &CreatePhotoArgs{}
}

func newCreatePhotoResult() interface{} {
	return &CreatePhotoResult{}
}

type CreatePhotoArgs struct {
	Req *content.CreatePhotoReq
}

func (p *CreatePhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.CreatePhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreatePhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreatePhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreatePhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreatePhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.CreatePhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreatePhotoArgs_Req_DEFAULT *content.CreatePhotoReq

func (p *CreatePhotoArgs) GetReq() *content.CreatePhotoReq {
	if !p.IsSetReq() {
		return CreatePhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreatePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreatePhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreatePhotoResult struct {
	Success *content.CreatePhotoResp
}

var CreatePhotoResult_Success_DEFAULT *content.CreatePhotoResp

func (p *CreatePhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.CreatePhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreatePhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreatePhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreatePhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreatePhotoResult) Unmarshal(in []byte) error {
	msg := new(content.CreatePhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreatePhotoResult) GetSuccess() *content.CreatePhotoResp {
	if !p.IsSetSuccess() {
		return CreatePhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreatePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.CreatePhotoResp)
}

func (p *CreatePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreatePhotoResult) GetResult() interface{} {
	return p.Success
}

func retrievePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.RetrievePhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).RetrievePhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RetrievePhotoArgs:
		success, err := handler.(content.ContentService).RetrievePhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrievePhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRetrievePhotoArgs() interface{} {
	return &RetrievePhotoArgs{}
}

func newRetrievePhotoResult() interface{} {
	return &RetrievePhotoResult{}
}

type RetrievePhotoArgs struct {
	Req *content.RetrievePhotoReq
}

func (p *RetrievePhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.RetrievePhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrievePhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrievePhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrievePhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RetrievePhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.RetrievePhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrievePhotoArgs_Req_DEFAULT *content.RetrievePhotoReq

func (p *RetrievePhotoArgs) GetReq() *content.RetrievePhotoReq {
	if !p.IsSetReq() {
		return RetrievePhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrievePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrievePhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrievePhotoResult struct {
	Success *content.RetrievePhotoResp
}

var RetrievePhotoResult_Success_DEFAULT *content.RetrievePhotoResp

func (p *RetrievePhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.RetrievePhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrievePhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrievePhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrievePhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RetrievePhotoResult) Unmarshal(in []byte) error {
	msg := new(content.RetrievePhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrievePhotoResult) GetSuccess() *content.RetrievePhotoResp {
	if !p.IsSetSuccess() {
		return RetrievePhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrievePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.RetrievePhotoResp)
}

func (p *RetrievePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrievePhotoResult) GetResult() interface{} {
	return p.Success
}

func updatePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdatePhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).UpdatePhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdatePhotoArgs:
		success, err := handler.(content.ContentService).UpdatePhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdatePhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdatePhotoArgs() interface{} {
	return &UpdatePhotoArgs{}
}

func newUpdatePhotoResult() interface{} {
	return &UpdatePhotoResult{}
}

type UpdatePhotoArgs struct {
	Req *content.UpdatePhotoReq
}

func (p *UpdatePhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdatePhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdatePhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdatePhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdatePhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdatePhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdatePhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdatePhotoArgs_Req_DEFAULT *content.UpdatePhotoReq

func (p *UpdatePhotoArgs) GetReq() *content.UpdatePhotoReq {
	if !p.IsSetReq() {
		return UpdatePhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdatePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdatePhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdatePhotoResult struct {
	Success *content.UpdatePhotoResp
}

var UpdatePhotoResult_Success_DEFAULT *content.UpdatePhotoResp

func (p *UpdatePhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdatePhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdatePhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdatePhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdatePhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdatePhotoResult) Unmarshal(in []byte) error {
	msg := new(content.UpdatePhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdatePhotoResult) GetSuccess() *content.UpdatePhotoResp {
	if !p.IsSetSuccess() {
		return UpdatePhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdatePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdatePhotoResp)
}

func (p *UpdatePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdatePhotoResult) GetResult() interface{} {
	return p.Success
}

func deletePhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeletePhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).DeletePhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeletePhotoArgs:
		success, err := handler.(content.ContentService).DeletePhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeletePhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeletePhotoArgs() interface{} {
	return &DeletePhotoArgs{}
}

func newDeletePhotoResult() interface{} {
	return &DeletePhotoResult{}
}

type DeletePhotoArgs struct {
	Req *content.DeletePhotoReq
}

func (p *DeletePhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeletePhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeletePhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeletePhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeletePhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeletePhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.DeletePhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeletePhotoArgs_Req_DEFAULT *content.DeletePhotoReq

func (p *DeletePhotoArgs) GetReq() *content.DeletePhotoReq {
	if !p.IsSetReq() {
		return DeletePhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeletePhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeletePhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeletePhotoResult struct {
	Success *content.DeletePhotoResp
}

var DeletePhotoResult_Success_DEFAULT *content.DeletePhotoResp

func (p *DeletePhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeletePhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeletePhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeletePhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeletePhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeletePhotoResult) Unmarshal(in []byte) error {
	msg := new(content.DeletePhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeletePhotoResult) GetSuccess() *content.DeletePhotoResp {
	if !p.IsSetSuccess() {
		return DeletePhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeletePhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeletePhotoResp)
}

func (p *DeletePhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeletePhotoResult) GetResult() interface{} {
	return p.Success
}

func listPhotoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.ListPhotoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.ContentService).ListPhoto(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListPhotoArgs:
		success, err := handler.(content.ContentService).ListPhoto(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListPhotoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListPhotoArgs() interface{} {
	return &ListPhotoArgs{}
}

func newListPhotoResult() interface{} {
	return &ListPhotoResult{}
}

type ListPhotoArgs struct {
	Req *content.ListPhotoReq
}

func (p *ListPhotoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.ListPhotoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListPhotoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListPhotoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListPhotoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListPhotoArgs) Unmarshal(in []byte) error {
	msg := new(content.ListPhotoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListPhotoArgs_Req_DEFAULT *content.ListPhotoReq

func (p *ListPhotoArgs) GetReq() *content.ListPhotoReq {
	if !p.IsSetReq() {
		return ListPhotoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListPhotoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListPhotoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListPhotoResult struct {
	Success *content.ListPhotoResp
}

var ListPhotoResult_Success_DEFAULT *content.ListPhotoResp

func (p *ListPhotoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.ListPhotoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListPhotoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListPhotoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListPhotoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListPhotoResult) Unmarshal(in []byte) error {
	msg := new(content.ListPhotoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListPhotoResult) GetSuccess() *content.ListPhotoResp {
	if !p.IsSetSuccess() {
		return ListPhotoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListPhotoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.ListPhotoResp)
}

func (p *ListPhotoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListPhotoResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateAlbum(ctx context.Context, Req *content.CreateAlbumReq) (r *content.CreateAlbumResp, err error) {
	var _args CreateAlbumArgs
	_args.Req = Req
	var _result CreateAlbumResult
	if err = p.c.Call(ctx, "CreateAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrieveAlbum(ctx context.Context, Req *content.RetrieveAlbumReq) (r *content.RetrieveAlbumResp, err error) {
	var _args RetrieveAlbumArgs
	_args.Req = Req
	var _result RetrieveAlbumResult
	if err = p.c.Call(ctx, "RetrieveAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateAlbum(ctx context.Context, Req *content.UpdateAlbumReq) (r *content.UpdateAlbumResp, err error) {
	var _args UpdateAlbumArgs
	_args.Req = Req
	var _result UpdateAlbumResult
	if err = p.c.Call(ctx, "UpdateAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAlbum(ctx context.Context, Req *content.DeleteAlbumReq) (r *content.DeleteAlbumResp, err error) {
	var _args DeleteAlbumArgs
	_args.Req = Req
	var _result DeleteAlbumResult
	if err = p.c.Call(ctx, "DeleteAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAlbum(ctx context.Context, Req *content.ListAlbumReq) (r *content.ListAlbumResp, err error) {
	var _args ListAlbumArgs
	_args.Req = Req
	var _result ListAlbumResult
	if err = p.c.Call(ctx, "ListAlbum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePhoto(ctx context.Context, Req *content.CreatePhotoReq) (r *content.CreatePhotoResp, err error) {
	var _args CreatePhotoArgs
	_args.Req = Req
	var _result CreatePhotoResult
	if err = p.c.Call(ctx, "CreatePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrievePhoto(ctx context.Context, Req *content.RetrievePhotoReq) (r *content.RetrievePhotoResp, err error) {
	var _args RetrievePhotoArgs
	_args.Req = Req
	var _result RetrievePhotoResult
	if err = p.c.Call(ctx, "RetrievePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePhoto(ctx context.Context, Req *content.UpdatePhotoReq) (r *content.UpdatePhotoResp, err error) {
	var _args UpdatePhotoArgs
	_args.Req = Req
	var _result UpdatePhotoResult
	if err = p.c.Call(ctx, "UpdatePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePhoto(ctx context.Context, Req *content.DeletePhotoReq) (r *content.DeletePhotoResp, err error) {
	var _args DeletePhotoArgs
	_args.Req = Req
	var _result DeletePhotoResult
	if err = p.c.Call(ctx, "DeletePhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPhoto(ctx context.Context, Req *content.ListPhotoReq) (r *content.ListPhotoResp, err error) {
	var _args ListPhotoArgs
	_args.Req = Req
	var _result ListPhotoResult
	if err = p.c.Call(ctx, "ListPhoto", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
