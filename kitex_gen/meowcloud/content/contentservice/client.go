// Code generated by Kitex v0.10.3. DO NOT EDIT.

package contentservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	content "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/content"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateAlbum(ctx context.Context, Req *content.CreateAlbumReq, callOptions ...callopt.Option) (r *content.CreateAlbumResp, err error)
	RetrieveAlbum(ctx context.Context, Req *content.RetrieveAlbumReq, callOptions ...callopt.Option) (r *content.RetrieveAlbumResp, err error)
	UpdateAlbum(ctx context.Context, Req *content.UpdateAlbumReq, callOptions ...callopt.Option) (r *content.UpdateAlbumResp, err error)
	DeleteAlbum(ctx context.Context, Req *content.DeleteAlbumReq, callOptions ...callopt.Option) (r *content.DeleteAlbumResp, err error)
	ListAlbum(ctx context.Context, Req *content.ListAlbumReq, callOptions ...callopt.Option) (r *content.ListAlbumResp, err error)
	CreatePhoto(ctx context.Context, Req *content.CreatePhotoReq, callOptions ...callopt.Option) (r *content.CreatePhotoResp, err error)
	RetrievePhoto(ctx context.Context, Req *content.RetrievePhotoReq, callOptions ...callopt.Option) (r *content.RetrievePhotoResp, err error)
	UpdatePhoto(ctx context.Context, Req *content.UpdatePhotoReq, callOptions ...callopt.Option) (r *content.UpdatePhotoResp, err error)
	DeletePhoto(ctx context.Context, Req *content.DeletePhotoReq, callOptions ...callopt.Option) (r *content.DeletePhotoResp, err error)
	ListPhoto(ctx context.Context, Req *content.ListPhotoReq, callOptions ...callopt.Option) (r *content.ListPhotoResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kContentServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kContentServiceClient struct {
	*kClient
}

func (p *kContentServiceClient) CreateAlbum(ctx context.Context, Req *content.CreateAlbumReq, callOptions ...callopt.Option) (r *content.CreateAlbumResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateAlbum(ctx, Req)
}

func (p *kContentServiceClient) RetrieveAlbum(ctx context.Context, Req *content.RetrieveAlbumReq, callOptions ...callopt.Option) (r *content.RetrieveAlbumResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RetrieveAlbum(ctx, Req)
}

func (p *kContentServiceClient) UpdateAlbum(ctx context.Context, Req *content.UpdateAlbumReq, callOptions ...callopt.Option) (r *content.UpdateAlbumResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAlbum(ctx, Req)
}

func (p *kContentServiceClient) DeleteAlbum(ctx context.Context, Req *content.DeleteAlbumReq, callOptions ...callopt.Option) (r *content.DeleteAlbumResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteAlbum(ctx, Req)
}

func (p *kContentServiceClient) ListAlbum(ctx context.Context, Req *content.ListAlbumReq, callOptions ...callopt.Option) (r *content.ListAlbumResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListAlbum(ctx, Req)
}

func (p *kContentServiceClient) CreatePhoto(ctx context.Context, Req *content.CreatePhotoReq, callOptions ...callopt.Option) (r *content.CreatePhotoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreatePhoto(ctx, Req)
}

func (p *kContentServiceClient) RetrievePhoto(ctx context.Context, Req *content.RetrievePhotoReq, callOptions ...callopt.Option) (r *content.RetrievePhotoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RetrievePhoto(ctx, Req)
}

func (p *kContentServiceClient) UpdatePhoto(ctx context.Context, Req *content.UpdatePhotoReq, callOptions ...callopt.Option) (r *content.UpdatePhotoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdatePhoto(ctx, Req)
}

func (p *kContentServiceClient) DeletePhoto(ctx context.Context, Req *content.DeletePhotoReq, callOptions ...callopt.Option) (r *content.DeletePhotoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePhoto(ctx, Req)
}

func (p *kContentServiceClient) ListPhoto(ctx context.Context, Req *content.ListPhotoReq, callOptions ...callopt.Option) (r *content.ListPhotoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListPhoto(ctx, Req)
}
