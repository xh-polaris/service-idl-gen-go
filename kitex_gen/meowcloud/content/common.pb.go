// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: meowcloud/content/common.proto

package content

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlbumType int32

const (
	AlbumType_PERSONAL_ALBUM AlbumType = 0
	AlbumType_TEAM_ALBUM     AlbumType = 1
)

// Enum value maps for AlbumType.
var (
	AlbumType_name = map[int32]string{
		0: "PERSONAL_ALBUM",
		1: "TEAM_ALBUM",
	}
	AlbumType_value = map[string]int32{
		"PERSONAL_ALBUM": 0,
		"TEAM_ALBUM":     1,
	}
)

func (x AlbumType) Enum() *AlbumType {
	p := new(AlbumType)
	*p = x
	return p
}

func (x AlbumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlbumType) Descriptor() protoreflect.EnumDescriptor {
	return file_meowcloud_content_common_proto_enumTypes[0].Descriptor()
}

func (AlbumType) Type() protoreflect.EnumType {
	return &file_meowcloud_content_common_proto_enumTypes[0]
}

func (x AlbumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlbumType.Descriptor instead.
func (AlbumType) EnumDescriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{0}
}

type PhotoType int32

const (
	PhotoType_PERSONAL_PHOTO PhotoType = 0
	PhotoType_TEAM_PHOTO     PhotoType = 1
)

// Enum value maps for PhotoType.
var (
	PhotoType_name = map[int32]string{
		0: "PERSONAL_PHOTO",
		1: "TEAM_PHOTO",
	}
	PhotoType_value = map[string]int32{
		"PERSONAL_PHOTO": 0,
		"TEAM_PHOTO":     1,
	}
)

func (x PhotoType) Enum() *PhotoType {
	p := new(PhotoType)
	*p = x
	return p
}

func (x PhotoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhotoType) Descriptor() protoreflect.EnumDescriptor {
	return file_meowcloud_content_common_proto_enumTypes[1].Descriptor()
}

func (PhotoType) Type() protoreflect.EnumType {
	return &file_meowcloud_content_common_proto_enumTypes[1]
}

func (x PhotoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhotoType.Descriptor instead.
func (PhotoType) EnumDescriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{1}
}

type AlbumInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CatTotal    int32  `protobuf:"varint,2,opt,name=catTotal,proto3" json:"catTotal,omitempty"`
	PlaceTotal  int32  `protobuf:"varint,3,opt,name=placeTotal,proto3" json:"placeTotal,omitempty"`
	CreatedTime int64  `protobuf:"varint,4,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64  `protobuf:"varint,5,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64  `protobuf:"varint,6,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	UserId      string `protobuf:"bytes,7,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AlbumInfo) Reset() {
	*x = AlbumInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumInfo) ProtoMessage() {}

func (x *AlbumInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumInfo.ProtoReflect.Descriptor instead.
func (*AlbumInfo) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{0}
}

func (x *AlbumInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AlbumInfo) GetCatTotal() int32 {
	if x != nil {
		return x.CatTotal
	}
	return 0
}

func (x *AlbumInfo) GetPlaceTotal() int32 {
	if x != nil {
		return x.PlaceTotal
	}
	return 0
}

func (x *AlbumInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *AlbumInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *AlbumInfo) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *AlbumInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type Album struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AlbumType   AlbumType `protobuf:"varint,2,opt,name=albumType,proto3,enum=meowcloud.content.AlbumType" json:"albumType,omitempty"`
	AlbumInfoId int32     `protobuf:"varint,3,opt,name=albumInfoId,proto3" json:"albumInfoId,omitempty"`
	OwnerId     int32     `protobuf:"varint,4,opt,name=ownerId,proto3" json:"ownerId,omitempty"` // 拥有者ID
	IsPublic    bool      `protobuf:"varint,5,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Total       int32     `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	UsableNum   int32     `protobuf:"varint,7,opt,name=usableNum,proto3" json:"usableNum,omitempty"`
	CatInfoId   int32     `protobuf:"varint,8,opt,name=catInfoId,proto3" json:"catInfoId,omitempty"`
	PlaceInfoId int32     `protobuf:"varint,9,opt,name=placeInfoId,proto3" json:"placeInfoId,omitempty"`
	Cover       string    `protobuf:"bytes,10,opt,name=cover,proto3" json:"cover,omitempty"`
	CreatedTime int64     `protobuf:"varint,11,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64     `protobuf:"varint,12,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64     `protobuf:"varint,13,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	Name        string    `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	Description string    `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Album) Reset() {
	*x = Album{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Album) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Album) ProtoMessage() {}

func (x *Album) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Album.ProtoReflect.Descriptor instead.
func (*Album) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{1}
}

func (x *Album) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Album) GetAlbumType() AlbumType {
	if x != nil {
		return x.AlbumType
	}
	return AlbumType_PERSONAL_ALBUM
}

func (x *Album) GetAlbumInfoId() int32 {
	if x != nil {
		return x.AlbumInfoId
	}
	return 0
}

func (x *Album) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *Album) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Album) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Album) GetUsableNum() int32 {
	if x != nil {
		return x.UsableNum
	}
	return 0
}

func (x *Album) GetCatInfoId() int32 {
	if x != nil {
		return x.CatInfoId
	}
	return 0
}

func (x *Album) GetPlaceInfoId() int32 {
	if x != nil {
		return x.PlaceInfoId
	}
	return 0
}

func (x *Album) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Album) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Album) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *Album) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *Album) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Album) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Photo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PhotoType   PhotoType `protobuf:"varint,2,opt,name=photoType,proto3,enum=meowcloud.content.PhotoType" json:"photoType,omitempty"` // 个人 or 团队
	UploadId    string    `protobuf:"bytes,3,opt,name=uploadId,proto3" json:"uploadId,omitempty"`
	AlbumId     int32     `protobuf:"varint,4,opt,name=albumId,proto3" json:"albumId,omitempty"`
	CatInfoId   int32     `protobuf:"varint,5,opt,name=catInfoId,proto3" json:"catInfoId,omitempty"`
	PlaceInfoId int32     `protobuf:"varint,6,opt,name=placeInfoId,proto3" json:"placeInfoId,omitempty"`
	Description string    `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	IsDue       bool      `protobuf:"varint,8,opt,name=isDue,proto3" json:"isDue,omitempty"`
	CreatedTime int64     `protobuf:"varint,9,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64     `protobuf:"varint,10,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64     `protobuf:"varint,11,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	Url         string    `protobuf:"bytes,12,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Photo) Reset() {
	*x = Photo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{2}
}

func (x *Photo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Photo) GetPhotoType() PhotoType {
	if x != nil {
		return x.PhotoType
	}
	return PhotoType_PERSONAL_PHOTO
}

func (x *Photo) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *Photo) GetAlbumId() int32 {
	if x != nil {
		return x.AlbumId
	}
	return 0
}

func (x *Photo) GetCatInfoId() int32 {
	if x != nil {
		return x.CatInfoId
	}
	return 0
}

func (x *Photo) GetPlaceInfoId() int32 {
	if x != nil {
		return x.PlaceInfoId
	}
	return 0
}

func (x *Photo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Photo) GetIsDue() bool {
	if x != nil {
		return x.IsDue
	}
	return false
}

func (x *Photo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Photo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *Photo) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *Photo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cover       string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	Age         int32  `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	Breed       string `protobuf:"bytes,5,opt,name=breed,proto3" json:"breed,omitempty"`
	Area        string `protobuf:"bytes,6,opt,name=area,proto3" json:"area,omitempty"`
	Content     string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	CreatedTime int64  `protobuf:"varint,8,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64  `protobuf:"varint,9,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64  `protobuf:"varint,10,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	AlbumId     string `protobuf:"bytes,11,opt,name=albumId,proto3" json:"albumId,omitempty"`
}

func (x *CatInfo) Reset() {
	*x = CatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatInfo) ProtoMessage() {}

func (x *CatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatInfo.ProtoReflect.Descriptor instead.
func (*CatInfo) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{3}
}

func (x *CatInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CatInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CatInfo) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *CatInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *CatInfo) GetBreed() string {
	if x != nil {
		return x.Breed
	}
	return ""
}

func (x *CatInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *CatInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CatInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *CatInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *CatInfo) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *CatInfo) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

type PlaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Longitude   float32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude    float32 `protobuf:"fixed32,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	City        string  `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	CreatedTime int64   `protobuf:"varint,5,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64   `protobuf:"varint,6,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64   `protobuf:"varint,7,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	AlbumId     string  `protobuf:"bytes,8,opt,name=albumId,proto3" json:"albumId,omitempty"`
}

func (x *PlaceInfo) Reset() {
	*x = PlaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceInfo) ProtoMessage() {}

func (x *PlaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceInfo.ProtoReflect.Descriptor instead.
func (*PlaceInfo) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{4}
}

func (x *PlaceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlaceInfo) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *PlaceInfo) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *PlaceInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PlaceInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *PlaceInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *PlaceInfo) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *PlaceInfo) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

type MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Total       int32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Used        []int32 `protobuf:"varint,3,rep,packed,name=used,proto3" json:"used,omitempty"`
	CreatedTime int64   `protobuf:"varint,4,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64   `protobuf:"varint,5,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64   `protobuf:"varint,6,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{5}
}

func (x *MemoryInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MemoryInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemoryInfo) GetUsed() []int32 {
	if x != nil {
		return x.Used
	}
	return nil
}

func (x *MemoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *MemoryInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *MemoryInfo) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

type PointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Total       int32  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	CreatedTime int64  `protobuf:"varint,3,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64  `protobuf:"varint,4,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64  `protobuf:"varint,5,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	UserId      string `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *PointInfo) Reset() {
	*x = PointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointInfo) ProtoMessage() {}

func (x *PointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointInfo.ProtoReflect.Descriptor instead.
func (*PointInfo) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{6}
}

func (x *PointInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PointInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PointInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *PointInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *PointInfo) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *PointInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type MemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	CreatedTime int64  `protobuf:"varint,3,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64  `protobuf:"varint,4,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64  `protobuf:"varint,5,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	UserId      string `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *MemberInfo) Reset() {
	*x = MemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberInfo) ProtoMessage() {}

func (x *MemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberInfo.ProtoReflect.Descriptor instead.
func (*MemberInfo) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{7}
}

func (x *MemberInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MemberInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MemberInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *MemberInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *MemberInfo) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *MemberInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AchievementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedTime int64  `protobuf:"varint,2,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64  `protobuf:"varint,3,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64  `protobuf:"varint,4,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
	UserId      string `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AchievementInfo) Reset() {
	*x = AchievementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementInfo) ProtoMessage() {}

func (x *AchievementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementInfo.ProtoReflect.Descriptor instead.
func (*AchievementInfo) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{8}
}

func (x *AchievementInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AchievementInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *AchievementInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *AchievementInfo) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

func (x *AchievementInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type TeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Total       int32  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	CreateTotal int32  `protobuf:"varint,3,opt,name=createTotal,proto3" json:"createTotal,omitempty"`
	JoinTotal   int32  `protobuf:"varint,4,opt,name=joinTotal,proto3" json:"joinTotal,omitempty"`
	CreatedTime int64  `protobuf:"varint,5,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64  `protobuf:"varint,6,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64  `protobuf:"varint,7,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
}

func (x *TeamInfo) Reset() {
	*x = TeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamInfo) ProtoMessage() {}

func (x *TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamInfo.ProtoReflect.Descriptor instead.
func (*TeamInfo) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{9}
}

func (x *TeamInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TeamInfo) GetCreateTotal() int32 {
	if x != nil {
		return x.CreateTotal
	}
	return 0
}

func (x *TeamInfo) GetJoinTotal() int32 {
	if x != nil {
		return x.JoinTotal
	}
	return 0
}

func (x *TeamInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *TeamInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *TeamInfo) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Creator     string  `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Members     []int32 `protobuf:"varint,4,rep,packed,name=members,proto3" json:"members,omitempty"`
	TeamInfoId  int32   `protobuf:"varint,5,opt,name=teamInfoId,proto3" json:"teamInfoId,omitempty"`
	CreatedTime int64   `protobuf:"varint,6,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64   `protobuf:"varint,7,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	DeletedTime int64   `protobuf:"varint,8,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowcloud_content_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_meowcloud_content_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_meowcloud_content_common_proto_rawDescGZIP(), []int{10}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Team) GetMembers() []int32 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Team) GetTeamInfoId() int32 {
	if x != nil {
		return x.TeamInfoId
	}
	return 0
}

func (x *Team) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Team) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *Team) GetDeletedTime() int64 {
	if x != nil {
		return x.DeletedTime
	}
	return 0
}

var File_meowcloud_content_common_proto protoreflect.FileDescriptor

var file_meowcloud_content_common_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd1, 0x03, 0x0a, 0x05,
	0x41, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x6f, 0x77, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xf9, 0x02, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d,
	0x65, 0x6f, 0x77, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x73, 0x44, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x44, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x99, 0x02, 0x0a, 0x07,
	0x43, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xe4, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x2f, 0x0a, 0x09, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x10, 0x01, 0x2a, 0x2f, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x01, 0x42, 0x7d, 0x0a, 0x26, 0x63, 0x6f, 0x6d,
	0x2e, 0x78, 0x68, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x2e, 0x69, 0x64, 0x6c, 0x67, 0x65,
	0x6e, 0x2e, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78,
	0x68, 0x2d, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x69, 0x64, 0x6c, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x6b, 0x69, 0x74,
	0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meowcloud_content_common_proto_rawDescOnce sync.Once
	file_meowcloud_content_common_proto_rawDescData = file_meowcloud_content_common_proto_rawDesc
)

func file_meowcloud_content_common_proto_rawDescGZIP() []byte {
	file_meowcloud_content_common_proto_rawDescOnce.Do(func() {
		file_meowcloud_content_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_meowcloud_content_common_proto_rawDescData)
	})
	return file_meowcloud_content_common_proto_rawDescData
}

var file_meowcloud_content_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_meowcloud_content_common_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_meowcloud_content_common_proto_goTypes = []interface{}{
	(AlbumType)(0),          // 0: meowcloud.content.AlbumType
	(PhotoType)(0),          // 1: meowcloud.content.PhotoType
	(*AlbumInfo)(nil),       // 2: meowcloud.content.AlbumInfo
	(*Album)(nil),           // 3: meowcloud.content.Album
	(*Photo)(nil),           // 4: meowcloud.content.Photo
	(*CatInfo)(nil),         // 5: meowcloud.content.CatInfo
	(*PlaceInfo)(nil),       // 6: meowcloud.content.PlaceInfo
	(*MemoryInfo)(nil),      // 7: meowcloud.content.MemoryInfo
	(*PointInfo)(nil),       // 8: meowcloud.content.PointInfo
	(*MemberInfo)(nil),      // 9: meowcloud.content.MemberInfo
	(*AchievementInfo)(nil), // 10: meowcloud.content.AchievementInfo
	(*TeamInfo)(nil),        // 11: meowcloud.content.TeamInfo
	(*Team)(nil),            // 12: meowcloud.content.Team
}
var file_meowcloud_content_common_proto_depIdxs = []int32{
	0, // 0: meowcloud.content.Album.albumType:type_name -> meowcloud.content.AlbumType
	1, // 1: meowcloud.content.Photo.photoType:type_name -> meowcloud.content.PhotoType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_meowcloud_content_common_proto_init() }
func file_meowcloud_content_common_proto_init() {
	if File_meowcloud_content_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meowcloud_content_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Album); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Photo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowcloud_content_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meowcloud_content_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meowcloud_content_common_proto_goTypes,
		DependencyIndexes: file_meowcloud_content_common_proto_depIdxs,
		EnumInfos:         file_meowcloud_content_common_proto_enumTypes,
		MessageInfos:      file_meowcloud_content_common_proto_msgTypes,
	}.Build()
	File_meowcloud_content_common_proto = out.File
	file_meowcloud_content_common_proto_rawDesc = nil
	file_meowcloud_content_common_proto_goTypes = nil
	file_meowcloud_content_common_proto_depIdxs = nil
}

var _ context.Context
