// Code generated by Kitex v0.10.3. DO NOT EDIT.

package userinfoservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	content "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/content"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetMemoryInfo": kitex.NewMethodInfo(
		getMemoryInfoHandler,
		newGetMemoryInfoArgs,
		newGetMemoryInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetPointInfo": kitex.NewMethodInfo(
		getPointInfoHandler,
		newGetPointInfoArgs,
		newGetPointInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMemberInfo": kitex.NewMethodInfo(
		getMemberInfoHandler,
		newGetMemberInfoArgs,
		newGetMemberInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetAchievementInfo": kitex.NewMethodInfo(
		getAchievementInfoHandler,
		newGetAchievementInfoArgs,
		newGetAchievementInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	userInfoServiceServiceInfo                = NewServiceInfo()
	userInfoServiceServiceInfoForClient       = NewServiceInfoForClient()
	userInfoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userInfoServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userInfoServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userInfoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserInfoService"
	handlerType := (*content.UserInfoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowcloud.content",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func getMemoryInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetMemoryInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.UserInfoService).GetMemoryInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMemoryInfoArgs:
		success, err := handler.(content.UserInfoService).GetMemoryInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMemoryInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMemoryInfoArgs() interface{} {
	return &GetMemoryInfoArgs{}
}

func newGetMemoryInfoResult() interface{} {
	return &GetMemoryInfoResult{}
}

type GetMemoryInfoArgs struct {
	Req *content.GetMemoryInfoReq
}

func (p *GetMemoryInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetMemoryInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMemoryInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMemoryInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMemoryInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMemoryInfoArgs) Unmarshal(in []byte) error {
	msg := new(content.GetMemoryInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMemoryInfoArgs_Req_DEFAULT *content.GetMemoryInfoReq

func (p *GetMemoryInfoArgs) GetReq() *content.GetMemoryInfoReq {
	if !p.IsSetReq() {
		return GetMemoryInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMemoryInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMemoryInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMemoryInfoResult struct {
	Success *content.GetMemoryInfoResp
}

var GetMemoryInfoResult_Success_DEFAULT *content.GetMemoryInfoResp

func (p *GetMemoryInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetMemoryInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMemoryInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMemoryInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMemoryInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMemoryInfoResult) Unmarshal(in []byte) error {
	msg := new(content.GetMemoryInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMemoryInfoResult) GetSuccess() *content.GetMemoryInfoResp {
	if !p.IsSetSuccess() {
		return GetMemoryInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMemoryInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetMemoryInfoResp)
}

func (p *GetMemoryInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMemoryInfoResult) GetResult() interface{} {
	return p.Success
}

func getPointInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetPointInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.UserInfoService).GetPointInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetPointInfoArgs:
		success, err := handler.(content.UserInfoService).GetPointInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPointInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetPointInfoArgs() interface{} {
	return &GetPointInfoArgs{}
}

func newGetPointInfoResult() interface{} {
	return &GetPointInfoResult{}
}

type GetPointInfoArgs struct {
	Req *content.GetPointInfoReq
}

func (p *GetPointInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetPointInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPointInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPointInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPointInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetPointInfoArgs) Unmarshal(in []byte) error {
	msg := new(content.GetPointInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPointInfoArgs_Req_DEFAULT *content.GetPointInfoReq

func (p *GetPointInfoArgs) GetReq() *content.GetPointInfoReq {
	if !p.IsSetReq() {
		return GetPointInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPointInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetPointInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetPointInfoResult struct {
	Success *content.GetPointInfoResp
}

var GetPointInfoResult_Success_DEFAULT *content.GetPointInfoResp

func (p *GetPointInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetPointInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPointInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPointInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPointInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetPointInfoResult) Unmarshal(in []byte) error {
	msg := new(content.GetPointInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPointInfoResult) GetSuccess() *content.GetPointInfoResp {
	if !p.IsSetSuccess() {
		return GetPointInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPointInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetPointInfoResp)
}

func (p *GetPointInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPointInfoResult) GetResult() interface{} {
	return p.Success
}

func getMemberInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetMemberInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.UserInfoService).GetMemberInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMemberInfoArgs:
		success, err := handler.(content.UserInfoService).GetMemberInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMemberInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMemberInfoArgs() interface{} {
	return &GetMemberInfoArgs{}
}

func newGetMemberInfoResult() interface{} {
	return &GetMemberInfoResult{}
}

type GetMemberInfoArgs struct {
	Req *content.GetMemberInfoReq
}

func (p *GetMemberInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetMemberInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMemberInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMemberInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMemberInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMemberInfoArgs) Unmarshal(in []byte) error {
	msg := new(content.GetMemberInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMemberInfoArgs_Req_DEFAULT *content.GetMemberInfoReq

func (p *GetMemberInfoArgs) GetReq() *content.GetMemberInfoReq {
	if !p.IsSetReq() {
		return GetMemberInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMemberInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMemberInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMemberInfoResult struct {
	Success *content.GetMemberInfoResp
}

var GetMemberInfoResult_Success_DEFAULT *content.GetMemberInfoResp

func (p *GetMemberInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetMemberInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMemberInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMemberInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMemberInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMemberInfoResult) Unmarshal(in []byte) error {
	msg := new(content.GetMemberInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMemberInfoResult) GetSuccess() *content.GetMemberInfoResp {
	if !p.IsSetSuccess() {
		return GetMemberInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMemberInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetMemberInfoResp)
}

func (p *GetMemberInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMemberInfoResult) GetResult() interface{} {
	return p.Success
}

func getAchievementInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetAchievementInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.UserInfoService).GetAchievementInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAchievementInfoArgs:
		success, err := handler.(content.UserInfoService).GetAchievementInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAchievementInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAchievementInfoArgs() interface{} {
	return &GetAchievementInfoArgs{}
}

func newGetAchievementInfoResult() interface{} {
	return &GetAchievementInfoResult{}
}

type GetAchievementInfoArgs struct {
	Req *content.GetAchievementInfoReq
}

func (p *GetAchievementInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetAchievementInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAchievementInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAchievementInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAchievementInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAchievementInfoArgs) Unmarshal(in []byte) error {
	msg := new(content.GetAchievementInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAchievementInfoArgs_Req_DEFAULT *content.GetAchievementInfoReq

func (p *GetAchievementInfoArgs) GetReq() *content.GetAchievementInfoReq {
	if !p.IsSetReq() {
		return GetAchievementInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAchievementInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAchievementInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAchievementInfoResult struct {
	Success *content.GetAchievementInfoResp
}

var GetAchievementInfoResult_Success_DEFAULT *content.GetAchievementInfoResp

func (p *GetAchievementInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetAchievementInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAchievementInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAchievementInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAchievementInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAchievementInfoResult) Unmarshal(in []byte) error {
	msg := new(content.GetAchievementInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAchievementInfoResult) GetSuccess() *content.GetAchievementInfoResp {
	if !p.IsSetSuccess() {
		return GetAchievementInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAchievementInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetAchievementInfoResp)
}

func (p *GetAchievementInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAchievementInfoResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetMemoryInfo(ctx context.Context, Req *content.GetMemoryInfoReq) (r *content.GetMemoryInfoResp, err error) {
	var _args GetMemoryInfoArgs
	_args.Req = Req
	var _result GetMemoryInfoResult
	if err = p.c.Call(ctx, "GetMemoryInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPointInfo(ctx context.Context, Req *content.GetPointInfoReq) (r *content.GetPointInfoResp, err error) {
	var _args GetPointInfoArgs
	_args.Req = Req
	var _result GetPointInfoResult
	if err = p.c.Call(ctx, "GetPointInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMemberInfo(ctx context.Context, Req *content.GetMemberInfoReq) (r *content.GetMemberInfoResp, err error) {
	var _args GetMemberInfoArgs
	_args.Req = Req
	var _result GetMemberInfoResult
	if err = p.c.Call(ctx, "GetMemberInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAchievementInfo(ctx context.Context, Req *content.GetAchievementInfoReq) (r *content.GetAchievementInfoResp, err error) {
	var _args GetAchievementInfoArgs
	_args.Req = Req
	var _result GetAchievementInfoResult
	if err = p.c.Call(ctx, "GetAchievementInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
