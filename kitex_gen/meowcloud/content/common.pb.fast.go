// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package content

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CatAlbum) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CatAlbum[number], err)
}

func (x *CatAlbum) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CreatorId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AlbumName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Visibility = AlbumVisibility(v)
	return offset, nil
}

func (x *CatAlbum) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.TotalPhotos, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.AvailablePhotos, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.UpdatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.DeletedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.CreatedLocation, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.CreatedLocationLongitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.CreatedLocationLatitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CatAlbum) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	var v CatAlbum_CatInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CatInfo = &v
	return offset, nil
}

func (x *LocationAlbum) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LocationAlbum[number], err)
}

func (x *LocationAlbum) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LocationAlbum) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OwnerId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LocationAlbum) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Location, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LocationAlbum) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.TotalPhotos, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *LocationAlbum) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.AvailablePhotos, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *LocationAlbum) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.UpdatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LocationAlbum) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.DeletedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LocationAlbum) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Photo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Photo[number], err)
}

func (x *Photo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UpdatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.DeletedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CatAlbumId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.LocationAlbumId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.OwnerId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.IsFeatured, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Location, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.LocationLongitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.LocationLatitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Photo) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatAlbum_CatInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CatAlbum_CatInfo[number], err)
}

func (x *CatAlbum_CatInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatAlbum_CatInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Color, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatAlbum_CatInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Gender, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatAlbum_CatInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BirthDate, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CatAlbum) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *CatAlbum) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *CatAlbum) fastWriteField2(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetType())
	return offset
}

func (x *CatAlbum) fastWriteField3(buf []byte) (offset int) {
	if x.CreatorId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCreatorId())
	return offset
}

func (x *CatAlbum) fastWriteField4(buf []byte) (offset int) {
	if x.AlbumName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetAlbumName())
	return offset
}

func (x *CatAlbum) fastWriteField5(buf []byte) (offset int) {
	if x.Visibility == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetVisibility()))
	return offset
}

func (x *CatAlbum) fastWriteField6(buf []byte) (offset int) {
	if x.TotalPhotos == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, x.GetTotalPhotos())
	return offset
}

func (x *CatAlbum) fastWriteField7(buf []byte) (offset int) {
	if x.AvailablePhotos == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, x.GetAvailablePhotos())
	return offset
}

func (x *CatAlbum) fastWriteField8(buf []byte) (offset int) {
	if x.UpdatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetUpdatedAt())
	return offset
}

func (x *CatAlbum) fastWriteField9(buf []byte) (offset int) {
	if x.DeletedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetDeletedAt())
	return offset
}

func (x *CatAlbum) fastWriteField10(buf []byte) (offset int) {
	if x.CreatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetCreatedAt())
	return offset
}

func (x *CatAlbum) fastWriteField11(buf []byte) (offset int) {
	if x.CreatedLocation == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetCreatedLocation())
	return offset
}

func (x *CatAlbum) fastWriteField12(buf []byte) (offset int) {
	if x.CreatedLocationLongitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 12, x.GetCreatedLocationLongitude())
	return offset
}

func (x *CatAlbum) fastWriteField13(buf []byte) (offset int) {
	if x.CreatedLocationLatitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 13, x.GetCreatedLocationLatitude())
	return offset
}

func (x *CatAlbum) fastWriteField14(buf []byte) (offset int) {
	if x.CatInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 14, x.GetCatInfo())
	return offset
}

func (x *LocationAlbum) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *LocationAlbum) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *LocationAlbum) fastWriteField2(buf []byte) (offset int) {
	if x.OwnerId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOwnerId())
	return offset
}

func (x *LocationAlbum) fastWriteField3(buf []byte) (offset int) {
	if x.Location == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLocation())
	return offset
}

func (x *LocationAlbum) fastWriteField4(buf []byte) (offset int) {
	if x.TotalPhotos == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetTotalPhotos())
	return offset
}

func (x *LocationAlbum) fastWriteField5(buf []byte) (offset int) {
	if x.AvailablePhotos == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetAvailablePhotos())
	return offset
}

func (x *LocationAlbum) fastWriteField6(buf []byte) (offset int) {
	if x.UpdatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetUpdatedAt())
	return offset
}

func (x *LocationAlbum) fastWriteField7(buf []byte) (offset int) {
	if x.DeletedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetDeletedAt())
	return offset
}

func (x *LocationAlbum) fastWriteField8(buf []byte) (offset int) {
	if x.CreatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetCreatedAt())
	return offset
}

func (x *Photo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	return offset
}

func (x *Photo) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Photo) fastWriteField2(buf []byte) (offset int) {
	if x.CreatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCreatedAt())
	return offset
}

func (x *Photo) fastWriteField3(buf []byte) (offset int) {
	if x.UpdatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetUpdatedAt())
	return offset
}

func (x *Photo) fastWriteField4(buf []byte) (offset int) {
	if x.DeletedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetDeletedAt())
	return offset
}

func (x *Photo) fastWriteField5(buf []byte) (offset int) {
	if x.CatAlbumId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetCatAlbumId())
	return offset
}

func (x *Photo) fastWriteField6(buf []byte) (offset int) {
	if x.LocationAlbumId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetLocationAlbumId())
	return offset
}

func (x *Photo) fastWriteField7(buf []byte) (offset int) {
	if x.OwnerId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetOwnerId())
	return offset
}

func (x *Photo) fastWriteField8(buf []byte) (offset int) {
	if !x.IsFeatured {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 8, x.GetIsFeatured())
	return offset
}

func (x *Photo) fastWriteField9(buf []byte) (offset int) {
	if x.Location == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetLocation())
	return offset
}

func (x *Photo) fastWriteField10(buf []byte) (offset int) {
	if x.LocationLongitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 10, x.GetLocationLongitude())
	return offset
}

func (x *Photo) fastWriteField11(buf []byte) (offset int) {
	if x.LocationLatitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 11, x.GetLocationLatitude())
	return offset
}

func (x *Photo) fastWriteField12(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetDescription())
	return offset
}

func (x *Photo) fastWriteField13(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 13, x.GetUrl())
	return offset
}

func (x *CatAlbum_CatInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CatAlbum_CatInfo) fastWriteField1(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCoverUrl())
	return offset
}

func (x *CatAlbum_CatInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Color == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetColor())
	return offset
}

func (x *CatAlbum_CatInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Gender == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetGender())
	return offset
}

func (x *CatAlbum_CatInfo) fastWriteField4(buf []byte) (offset int) {
	if x.BirthDate == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetBirthDate())
	return offset
}

func (x *CatAlbum) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *CatAlbum) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *CatAlbum) sizeField2() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetType())
	return n
}

func (x *CatAlbum) sizeField3() (n int) {
	if x.CreatorId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCreatorId())
	return n
}

func (x *CatAlbum) sizeField4() (n int) {
	if x.AlbumName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetAlbumName())
	return n
}

func (x *CatAlbum) sizeField5() (n int) {
	if x.Visibility == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetVisibility()))
	return n
}

func (x *CatAlbum) sizeField6() (n int) {
	if x.TotalPhotos == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, x.GetTotalPhotos())
	return n
}

func (x *CatAlbum) sizeField7() (n int) {
	if x.AvailablePhotos == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, x.GetAvailablePhotos())
	return n
}

func (x *CatAlbum) sizeField8() (n int) {
	if x.UpdatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetUpdatedAt())
	return n
}

func (x *CatAlbum) sizeField9() (n int) {
	if x.DeletedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetDeletedAt())
	return n
}

func (x *CatAlbum) sizeField10() (n int) {
	if x.CreatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetCreatedAt())
	return n
}

func (x *CatAlbum) sizeField11() (n int) {
	if x.CreatedLocation == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetCreatedLocation())
	return n
}

func (x *CatAlbum) sizeField12() (n int) {
	if x.CreatedLocationLongitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(12, x.GetCreatedLocationLongitude())
	return n
}

func (x *CatAlbum) sizeField13() (n int) {
	if x.CreatedLocationLatitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(13, x.GetCreatedLocationLatitude())
	return n
}

func (x *CatAlbum) sizeField14() (n int) {
	if x.CatInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(14, x.GetCatInfo())
	return n
}

func (x *LocationAlbum) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *LocationAlbum) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *LocationAlbum) sizeField2() (n int) {
	if x.OwnerId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOwnerId())
	return n
}

func (x *LocationAlbum) sizeField3() (n int) {
	if x.Location == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLocation())
	return n
}

func (x *LocationAlbum) sizeField4() (n int) {
	if x.TotalPhotos == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetTotalPhotos())
	return n
}

func (x *LocationAlbum) sizeField5() (n int) {
	if x.AvailablePhotos == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetAvailablePhotos())
	return n
}

func (x *LocationAlbum) sizeField6() (n int) {
	if x.UpdatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetUpdatedAt())
	return n
}

func (x *LocationAlbum) sizeField7() (n int) {
	if x.DeletedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetDeletedAt())
	return n
}

func (x *LocationAlbum) sizeField8() (n int) {
	if x.CreatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetCreatedAt())
	return n
}

func (x *Photo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	return n
}

func (x *Photo) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Photo) sizeField2() (n int) {
	if x.CreatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCreatedAt())
	return n
}

func (x *Photo) sizeField3() (n int) {
	if x.UpdatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetUpdatedAt())
	return n
}

func (x *Photo) sizeField4() (n int) {
	if x.DeletedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetDeletedAt())
	return n
}

func (x *Photo) sizeField5() (n int) {
	if x.CatAlbumId == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetCatAlbumId())
	return n
}

func (x *Photo) sizeField6() (n int) {
	if x.LocationAlbumId == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetLocationAlbumId())
	return n
}

func (x *Photo) sizeField7() (n int) {
	if x.OwnerId == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetOwnerId())
	return n
}

func (x *Photo) sizeField8() (n int) {
	if !x.IsFeatured {
		return n
	}
	n += fastpb.SizeBool(8, x.GetIsFeatured())
	return n
}

func (x *Photo) sizeField9() (n int) {
	if x.Location == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetLocation())
	return n
}

func (x *Photo) sizeField10() (n int) {
	if x.LocationLongitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(10, x.GetLocationLongitude())
	return n
}

func (x *Photo) sizeField11() (n int) {
	if x.LocationLatitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(11, x.GetLocationLatitude())
	return n
}

func (x *Photo) sizeField12() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetDescription())
	return n
}

func (x *Photo) sizeField13() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(13, x.GetUrl())
	return n
}

func (x *CatAlbum_CatInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CatAlbum_CatInfo) sizeField1() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCoverUrl())
	return n
}

func (x *CatAlbum_CatInfo) sizeField2() (n int) {
	if x.Color == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetColor())
	return n
}

func (x *CatAlbum_CatInfo) sizeField3() (n int) {
	if x.Gender == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetGender())
	return n
}

func (x *CatAlbum_CatInfo) sizeField4() (n int) {
	if x.BirthDate == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetBirthDate())
	return n
}

var fieldIDToName_CatAlbum = map[int32]string{
	1:  "Id",
	2:  "Type",
	3:  "CreatorId",
	4:  "AlbumName",
	5:  "Visibility",
	6:  "TotalPhotos",
	7:  "AvailablePhotos",
	8:  "UpdatedAt",
	9:  "DeletedAt",
	10: "CreatedAt",
	11: "CreatedLocation",
	12: "CreatedLocationLongitude",
	13: "CreatedLocationLatitude",
	14: "CatInfo",
}

var fieldIDToName_LocationAlbum = map[int32]string{
	1: "Id",
	2: "OwnerId",
	3: "Location",
	4: "TotalPhotos",
	5: "AvailablePhotos",
	6: "UpdatedAt",
	7: "DeletedAt",
	8: "CreatedAt",
}

var fieldIDToName_Photo = map[int32]string{
	1:  "Id",
	2:  "CreatedAt",
	3:  "UpdatedAt",
	4:  "DeletedAt",
	5:  "CatAlbumId",
	6:  "LocationAlbumId",
	7:  "OwnerId",
	8:  "IsFeatured",
	9:  "Location",
	10: "LocationLongitude",
	11: "LocationLatitude",
	12: "Description",
	13: "Url",
}

var fieldIDToName_CatAlbum_CatInfo = map[int32]string{
	1: "CoverUrl",
	2: "Color",
	3: "Gender",
	4: "BirthDate",
}
