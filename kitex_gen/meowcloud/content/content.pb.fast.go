// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package content

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateAlbumReq[number], err)
}

func (x *CreateAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Album = &v
	return offset, nil
}

func (x *CreateAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateAlbumResp[number], err)
}

func (x *CreateAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Album = &v
	return offset, nil
}

func (x *RetrieveAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveAlbumReq[number], err)
}

func (x *RetrieveAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RetrieveAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveAlbumResp[number], err)
}

func (x *RetrieveAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Album = &v
	return offset, nil
}

func (x *UpdateAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateAlbumReq[number], err)
}

func (x *UpdateAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Album = &v
	return offset, nil
}

func (x *UpdateAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteAlbumReq[number], err)
}

func (x *DeleteAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *ListAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListAlbumReq[number], err)
}

func (x *ListAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *ListAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListAlbumResp[number], err)
}

func (x *ListAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Albums = append(x.Albums, &v)
	return offset, nil
}

func (x *ListAlbumResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreatePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreatePhotoReq[number], err)
}

func (x *CreatePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *CreatePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreatePhotoResp[number], err)
}

func (x *CreatePhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *RetrievePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrievePhotoReq[number], err)
}

func (x *RetrievePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RetrievePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrievePhotoResp[number], err)
}

func (x *RetrievePhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *UpdatePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePhotoReq[number], err)
}

func (x *UpdatePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *UpdatePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeletePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePhotoReq[number], err)
}

func (x *DeletePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeletePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *ListPhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListPhotoReq[number], err)
}

func (x *ListPhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AlbumId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListPhotoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *ListPhotoReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.OnlyFeatured = &tmp
	return offset, err
}

func (x *ListPhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListPhotoResp[number], err)
}

func (x *ListPhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photos = append(x.Photos, &v)
	return offset, nil
}

func (x *ListPhotoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Album == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbum())
	return offset
}

func (x *CreateAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.Album == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbum())
	return offset
}

func (x *RetrieveAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *RetrieveAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.Album == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbum())
	return offset
}

func (x *UpdateAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Album == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbum())
	return offset
}

func (x *UpdateAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *ListAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *ListAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.Albums == nil {
		return offset
	}
	for i := range x.GetAlbums() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbums()[i])
	}
	return offset
}

func (x *ListAlbumResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *CreatePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreatePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *CreatePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreatePhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *RetrievePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrievePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *RetrievePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrievePhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *UpdatePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdatePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *UpdatePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeletePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeletePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *ListPhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ListPhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.AlbumId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAlbumId())
	return offset
}

func (x *ListPhotoReq) fastWriteField2(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaginationOptions())
	return offset
}

func (x *ListPhotoReq) fastWriteField3(buf []byte) (offset int) {
	if x.OnlyFeatured == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetOnlyFeatured())
	return offset
}

func (x *ListPhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListPhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photos == nil {
		return offset
	}
	for i := range x.GetPhotos() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhotos()[i])
	}
	return offset
}

func (x *ListPhotoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *CreateAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateAlbumReq) sizeField1() (n int) {
	if x.Album == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAlbum())
	return n
}

func (x *CreateAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateAlbumResp) sizeField1() (n int) {
	if x.Album == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAlbum())
	return n
}

func (x *RetrieveAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveAlbumReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *RetrieveAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveAlbumResp) sizeField1() (n int) {
	if x.Album == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAlbum())
	return n
}

func (x *UpdateAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateAlbumReq) sizeField1() (n int) {
	if x.Album == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAlbum())
	return n
}

func (x *UpdateAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteAlbumReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *ListAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListAlbumReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *ListAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListAlbumResp) sizeField1() (n int) {
	if x.Albums == nil {
		return n
	}
	for i := range x.GetAlbums() {
		n += fastpb.SizeMessage(1, x.GetAlbums()[i])
	}
	return n
}

func (x *ListAlbumResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *CreatePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreatePhotoReq) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *CreatePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreatePhotoResp) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *RetrievePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrievePhotoReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *RetrievePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrievePhotoResp) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *UpdatePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdatePhotoReq) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *UpdatePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeletePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePhotoReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeletePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *ListPhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ListPhotoReq) sizeField1() (n int) {
	if x.AlbumId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAlbumId())
	return n
}

func (x *ListPhotoReq) sizeField2() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaginationOptions())
	return n
}

func (x *ListPhotoReq) sizeField3() (n int) {
	if x.OnlyFeatured == nil {
		return n
	}
	n += fastpb.SizeBool(3, x.GetOnlyFeatured())
	return n
}

func (x *ListPhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListPhotoResp) sizeField1() (n int) {
	if x.Photos == nil {
		return n
	}
	for i := range x.GetPhotos() {
		n += fastpb.SizeMessage(1, x.GetPhotos()[i])
	}
	return n
}

func (x *ListPhotoResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

var fieldIDToName_CreateAlbumReq = map[int32]string{
	1: "Album",
}

var fieldIDToName_CreateAlbumResp = map[int32]string{
	1: "Album",
}

var fieldIDToName_RetrieveAlbumReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_RetrieveAlbumResp = map[int32]string{
	1: "Album",
}

var fieldIDToName_UpdateAlbumReq = map[int32]string{
	1: "Album",
}

var fieldIDToName_UpdateAlbumResp = map[int32]string{}

var fieldIDToName_DeleteAlbumReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteAlbumResp = map[int32]string{}

var fieldIDToName_ListAlbumReq = map[int32]string{
	1: "PaginationOptions",
}

var fieldIDToName_ListAlbumResp = map[int32]string{
	1: "Albums",
	2: "Total",
}

var fieldIDToName_CreatePhotoReq = map[int32]string{
	1: "Photo",
}

var fieldIDToName_CreatePhotoResp = map[int32]string{
	1: "Photo",
}

var fieldIDToName_RetrievePhotoReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_RetrievePhotoResp = map[int32]string{
	1: "Photo",
}

var fieldIDToName_UpdatePhotoReq = map[int32]string{
	1: "Photo",
}

var fieldIDToName_UpdatePhotoResp = map[int32]string{}

var fieldIDToName_DeletePhotoReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeletePhotoResp = map[int32]string{}

var fieldIDToName_ListPhotoReq = map[int32]string{
	1: "AlbumId",
	2: "PaginationOptions",
	3: "OnlyFeatured",
}

var fieldIDToName_ListPhotoResp = map[int32]string{
	1: "Photos",
	2: "Total",
}

var _ = basic.File_basic_pagination_proto
