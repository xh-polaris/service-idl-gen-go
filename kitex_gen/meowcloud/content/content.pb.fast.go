// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package content

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateCatAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateCatAlbumReq[number], err)
}

func (x *CreateCatAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CatAlbum = &v
	return offset, nil
}

func (x *CreateCatAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateCatAlbumResp[number], err)
}

func (x *CreateCatAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CatAlbum = &v
	return offset, nil
}

func (x *RetrieveCatAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveCatAlbumReq[number], err)
}

func (x *RetrieveCatAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RetrieveCatAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveCatAlbumResp[number], err)
}

func (x *RetrieveCatAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CatAlbum = &v
	return offset, nil
}

func (x *UpdateCatAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateCatAlbumReq[number], err)
}

func (x *UpdateCatAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CatAlbum = &v
	return offset, nil
}

func (x *UpdateCatAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateCatAlbumResp[number], err)
}

func (x *UpdateCatAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CatAlbum = &v
	return offset, nil
}

func (x *DeleteCatAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCatAlbumReq[number], err)
}

func (x *DeleteCatAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteCatAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCatAlbumResp[number], err)
}

func (x *DeleteCatAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListCatAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCatAlbumReq[number], err)
}

func (x *ListCatAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *ListCatAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCatAlbumResp[number], err)
}

func (x *ListCatAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CatAlbums = append(x.CatAlbums, &v)
	return offset, nil
}

func (x *ListCatAlbumResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateLocationAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateLocationAlbumReq[number], err)
}

func (x *CreateLocationAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v LocationAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.LocationAlbum = &v
	return offset, nil
}

func (x *CreateLocationAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateLocationAlbumResp[number], err)
}

func (x *CreateLocationAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v LocationAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.LocationAlbum = &v
	return offset, nil
}

func (x *RetrieveLocationAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveLocationAlbumReq[number], err)
}

func (x *RetrieveLocationAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RetrieveLocationAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveLocationAlbumResp[number], err)
}

func (x *RetrieveLocationAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v LocationAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.LocationAlbum = &v
	return offset, nil
}

func (x *UpdateLocationAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateLocationAlbumReq[number], err)
}

func (x *UpdateLocationAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v LocationAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.LocationAlbum = &v
	return offset, nil
}

func (x *UpdateLocationAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateLocationAlbumResp[number], err)
}

func (x *UpdateLocationAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v LocationAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.LocationAlbum = &v
	return offset, nil
}

func (x *DeleteLocationAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteLocationAlbumReq[number], err)
}

func (x *DeleteLocationAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteLocationAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *ListLocationAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListLocationAlbumReq[number], err)
}

func (x *ListLocationAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *ListLocationAlbumReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = RetrieveLocationAlbumType(v).Enum()
	return offset, nil
}

func (x *ListLocationAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListLocationAlbumResp[number], err)
}

func (x *ListLocationAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v LocationAlbum
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.LocationAlbums = append(x.LocationAlbums, &v)
	return offset, nil
}

func (x *ListLocationAlbumResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreatePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreatePhotoReq[number], err)
}

func (x *CreatePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *CreatePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreatePhotoResp[number], err)
}

func (x *CreatePhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *RetrievePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrievePhotoReq[number], err)
}

func (x *RetrievePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RetrievePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrievePhotoResp[number], err)
}

func (x *RetrievePhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *UpdatePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePhotoReq[number], err)
}

func (x *UpdatePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *UpdatePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePhotoResp[number], err)
}

func (x *UpdatePhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *DeletePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePhotoReq[number], err)
}

func (x *DeletePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeletePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *ListPhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListPhotoReq[number], err)
}

func (x *ListPhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *ListPhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListPhotoResp[number], err)
}

func (x *ListPhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photos = append(x.Photos, &v)
	return offset, nil
}

func (x *ListPhotoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListFeaturedPhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListFeaturedPhotoReq[number], err)
}

func (x *ListFeaturedPhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *ListFeaturedPhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListFeaturedPhotoResp[number], err)
}

func (x *ListFeaturedPhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photos = append(x.Photos, &v)
	return offset, nil
}

func (x *ListFeaturedPhotoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateCatAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateCatAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCatAlbum())
	return offset
}

func (x *CreateCatAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateCatAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.CatAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCatAlbum())
	return offset
}

func (x *RetrieveCatAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveCatAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *RetrieveCatAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveCatAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.CatAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCatAlbum())
	return offset
}

func (x *UpdateCatAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateCatAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCatAlbum())
	return offset
}

func (x *UpdateCatAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateCatAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.CatAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCatAlbum())
	return offset
}

func (x *DeleteCatAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCatAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteCatAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCatAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMessage())
	return offset
}

func (x *ListCatAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListCatAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *ListCatAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListCatAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.CatAlbums == nil {
		return offset
	}
	for i := range x.GetCatAlbums() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCatAlbums()[i])
	}
	return offset
}

func (x *ListCatAlbumResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *CreateLocationAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateLocationAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.LocationAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLocationAlbum())
	return offset
}

func (x *CreateLocationAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateLocationAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.LocationAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLocationAlbum())
	return offset
}

func (x *RetrieveLocationAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveLocationAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *RetrieveLocationAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveLocationAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.LocationAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLocationAlbum())
	return offset
}

func (x *UpdateLocationAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateLocationAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.LocationAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLocationAlbum())
	return offset
}

func (x *UpdateLocationAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateLocationAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.LocationAlbum == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLocationAlbum())
	return offset
}

func (x *DeleteLocationAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteLocationAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteLocationAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *ListLocationAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListLocationAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *ListLocationAlbumReq) fastWriteField2(buf []byte) (offset int) {
	if x.Type == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetType()))
	return offset
}

func (x *ListLocationAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListLocationAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.LocationAlbums == nil {
		return offset
	}
	for i := range x.GetLocationAlbums() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLocationAlbums()[i])
	}
	return offset
}

func (x *ListLocationAlbumResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *CreatePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreatePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *CreatePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreatePhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *RetrievePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrievePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *RetrievePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrievePhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *UpdatePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdatePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *UpdatePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdatePhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *DeletePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeletePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *ListPhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListPhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *ListPhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListPhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photos == nil {
		return offset
	}
	for i := range x.GetPhotos() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhotos()[i])
	}
	return offset
}

func (x *ListPhotoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *ListFeaturedPhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListFeaturedPhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaginationOptions())
	return offset
}

func (x *ListFeaturedPhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListFeaturedPhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photos == nil {
		return offset
	}
	for i := range x.GetPhotos() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhotos()[i])
	}
	return offset
}

func (x *ListFeaturedPhotoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *CreateCatAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateCatAlbumReq) sizeField1() (n int) {
	if x.CatAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCatAlbum())
	return n
}

func (x *CreateCatAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateCatAlbumResp) sizeField1() (n int) {
	if x.CatAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCatAlbum())
	return n
}

func (x *RetrieveCatAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveCatAlbumReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *RetrieveCatAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveCatAlbumResp) sizeField1() (n int) {
	if x.CatAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCatAlbum())
	return n
}

func (x *UpdateCatAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateCatAlbumReq) sizeField1() (n int) {
	if x.CatAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCatAlbum())
	return n
}

func (x *UpdateCatAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateCatAlbumResp) sizeField1() (n int) {
	if x.CatAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCatAlbum())
	return n
}

func (x *DeleteCatAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCatAlbumReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteCatAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCatAlbumResp) sizeField1() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMessage())
	return n
}

func (x *ListCatAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListCatAlbumReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *ListCatAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListCatAlbumResp) sizeField1() (n int) {
	if x.CatAlbums == nil {
		return n
	}
	for i := range x.GetCatAlbums() {
		n += fastpb.SizeMessage(1, x.GetCatAlbums()[i])
	}
	return n
}

func (x *ListCatAlbumResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *CreateLocationAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateLocationAlbumReq) sizeField1() (n int) {
	if x.LocationAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLocationAlbum())
	return n
}

func (x *CreateLocationAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateLocationAlbumResp) sizeField1() (n int) {
	if x.LocationAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLocationAlbum())
	return n
}

func (x *RetrieveLocationAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveLocationAlbumReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *RetrieveLocationAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveLocationAlbumResp) sizeField1() (n int) {
	if x.LocationAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLocationAlbum())
	return n
}

func (x *UpdateLocationAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateLocationAlbumReq) sizeField1() (n int) {
	if x.LocationAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLocationAlbum())
	return n
}

func (x *UpdateLocationAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateLocationAlbumResp) sizeField1() (n int) {
	if x.LocationAlbum == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetLocationAlbum())
	return n
}

func (x *DeleteLocationAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteLocationAlbumReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteLocationAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *ListLocationAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListLocationAlbumReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *ListLocationAlbumReq) sizeField2() (n int) {
	if x.Type == nil {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetType()))
	return n
}

func (x *ListLocationAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListLocationAlbumResp) sizeField1() (n int) {
	if x.LocationAlbums == nil {
		return n
	}
	for i := range x.GetLocationAlbums() {
		n += fastpb.SizeMessage(1, x.GetLocationAlbums()[i])
	}
	return n
}

func (x *ListLocationAlbumResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *CreatePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreatePhotoReq) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *CreatePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreatePhotoResp) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *RetrievePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrievePhotoReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *RetrievePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrievePhotoResp) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *UpdatePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdatePhotoReq) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *UpdatePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdatePhotoResp) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *DeletePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePhotoReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeletePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *ListPhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListPhotoReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *ListPhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListPhotoResp) sizeField1() (n int) {
	if x.Photos == nil {
		return n
	}
	for i := range x.GetPhotos() {
		n += fastpb.SizeMessage(1, x.GetPhotos()[i])
	}
	return n
}

func (x *ListPhotoResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *ListFeaturedPhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListFeaturedPhotoReq) sizeField1() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaginationOptions())
	return n
}

func (x *ListFeaturedPhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListFeaturedPhotoResp) sizeField1() (n int) {
	if x.Photos == nil {
		return n
	}
	for i := range x.GetPhotos() {
		n += fastpb.SizeMessage(1, x.GetPhotos()[i])
	}
	return n
}

func (x *ListFeaturedPhotoResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

var fieldIDToName_CreateCatAlbumReq = map[int32]string{
	1: "CatAlbum",
}

var fieldIDToName_CreateCatAlbumResp = map[int32]string{
	1: "CatAlbum",
}

var fieldIDToName_RetrieveCatAlbumReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_RetrieveCatAlbumResp = map[int32]string{
	1: "CatAlbum",
}

var fieldIDToName_UpdateCatAlbumReq = map[int32]string{
	1: "CatAlbum",
}

var fieldIDToName_UpdateCatAlbumResp = map[int32]string{
	1: "CatAlbum",
}

var fieldIDToName_DeleteCatAlbumReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteCatAlbumResp = map[int32]string{
	1: "Message",
}

var fieldIDToName_ListCatAlbumReq = map[int32]string{
	1: "PaginationOptions",
}

var fieldIDToName_ListCatAlbumResp = map[int32]string{
	1: "CatAlbums",
	2: "Total",
}

var fieldIDToName_CreateLocationAlbumReq = map[int32]string{
	1: "LocationAlbum",
}

var fieldIDToName_CreateLocationAlbumResp = map[int32]string{
	1: "LocationAlbum",
}

var fieldIDToName_RetrieveLocationAlbumReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_RetrieveLocationAlbumResp = map[int32]string{
	1: "LocationAlbum",
}

var fieldIDToName_UpdateLocationAlbumReq = map[int32]string{
	1: "LocationAlbum",
}

var fieldIDToName_UpdateLocationAlbumResp = map[int32]string{
	1: "LocationAlbum",
}

var fieldIDToName_DeleteLocationAlbumReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteLocationAlbumResp = map[int32]string{}

var fieldIDToName_ListLocationAlbumReq = map[int32]string{
	1: "PaginationOptions",
	2: "Type",
}

var fieldIDToName_ListLocationAlbumResp = map[int32]string{
	1: "LocationAlbums",
	2: "Total",
}

var fieldIDToName_CreatePhotoReq = map[int32]string{
	1: "Photo",
}

var fieldIDToName_CreatePhotoResp = map[int32]string{
	1: "Photo",
}

var fieldIDToName_RetrievePhotoReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_RetrievePhotoResp = map[int32]string{
	1: "Photo",
}

var fieldIDToName_UpdatePhotoReq = map[int32]string{
	1: "Photo",
}

var fieldIDToName_UpdatePhotoResp = map[int32]string{
	1: "Photo",
}

var fieldIDToName_DeletePhotoReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeletePhotoResp = map[int32]string{}

var fieldIDToName_ListPhotoReq = map[int32]string{
	1: "PaginationOptions",
}

var fieldIDToName_ListPhotoResp = map[int32]string{
	1: "Photos",
	2: "Total",
}

var fieldIDToName_ListFeaturedPhotoReq = map[int32]string{
	1: "PaginationOptions",
}

var fieldIDToName_ListFeaturedPhotoResp = map[int32]string{
	1: "Photos",
	2: "Total",
}

var _ = basic.File_basic_pagination_proto
