// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package content

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateAlbumReq[number], err)
}

func (x *CreateAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Album = &v
	return offset, nil
}

func (x *CreateAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateAlbumResp[number], err)
}

func (x *CreateAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AlbumId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateAlbumReq[number], err)
}

func (x *UpdateAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Album = &v
	return offset, nil
}

func (x *UpdateAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAlbumReq[number], err)
}

func (x *GetAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAlbumResp[number], err)
}

func (x *GetAlbumResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Album = &v
	return offset, nil
}

func (x *ListAlbumsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListAlbumsReq[number], err)
}

func (x *ListAlbumsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Pagination = &v
	return offset, nil
}

func (x *ListAlbumsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListAlbumsResp[number], err)
}

func (x *ListAlbumsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Album
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Albums = append(x.Albums, &v)
	return offset, nil
}

func (x *DeleteAlbumReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteAlbumReq[number], err)
}

func (x *DeleteAlbumReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteAlbumResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *UploadPhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UploadPhotoReq[number], err)
}

func (x *UploadPhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *UploadPhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UploadPhotoResp[number], err)
}

func (x *UploadPhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PhotoId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePhotoReq[number], err)
}

func (x *UpdatePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *UpdatePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetPhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPhotoReq[number], err)
}

func (x *GetPhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPhotoResp[number], err)
}

func (x *GetPhotoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photo = &v
	return offset, nil
}

func (x *ListPhotosReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListPhotosReq[number], err)
}

func (x *ListPhotosReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Pagination = &v
	return offset, nil
}

func (x *ListPhotosResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListPhotosResp[number], err)
}

func (x *ListPhotosResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Photo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Photos = append(x.Photos, &v)
	return offset, nil
}

func (x *DeletePhotoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePhotoReq[number], err)
}

func (x *DeletePhotoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeletePhotoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *AddCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddCatReq[number], err)
}

func (x *AddCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cat = &v
	return offset, nil
}

func (x *AddCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddCatResp[number], err)
}

func (x *AddCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateCatReq[number], err)
}

func (x *UpdateCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cat = &v
	return offset, nil
}

func (x *UpdateCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCatReq[number], err)
}

func (x *GetCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AlbumId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCatResp[number], err)
}

func (x *GetCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cat = &v
	return offset, nil
}

func (x *DeleteCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCatReq[number], err)
}

func (x *DeleteCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *AddPlaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddPlaceReq[number], err)
}

func (x *AddPlaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PlaceInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Place = &v
	return offset, nil
}

func (x *AddPlaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddPlaceResp[number], err)
}

func (x *AddPlaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PlaceId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePlaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePlaceReq[number], err)
}

func (x *UpdatePlaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PlaceInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Place = &v
	return offset, nil
}

func (x *UpdatePlaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetPlaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPlaceReq[number], err)
}

func (x *GetPlaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AlbumId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPlaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPlaceResp[number], err)
}

func (x *GetPlaceResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PlaceInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Place = &v
	return offset, nil
}

func (x *DeletePlaceReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePlaceReq[number], err)
}

func (x *DeletePlaceReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeletePlaceResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *AddTeamReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddTeamReq[number], err)
}

func (x *AddTeamReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Team
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Team = &v
	return offset, nil
}

func (x *AddTeamReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *AddTeamResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddTeamResp[number], err)
}

func (x *AddTeamResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TeamId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateTeamReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateTeamReq[number], err)
}

func (x *UpdateTeamReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Team
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Team = &v
	return offset, nil
}

func (x *UpdateTeamResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetTeamReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTeamReq[number], err)
}

func (x *GetTeamReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetTeamResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTeamResp[number], err)
}

func (x *GetTeamResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Team
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Team = &v
	return offset, nil
}

func (x *DeleteTeamReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteTeamReq[number], err)
}

func (x *DeleteTeamReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteTeamResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *JoinTeamReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_JoinTeamReq[number], err)
}

func (x *JoinTeamReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TeamId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *JoinTeamReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *JoinTeamResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *LeaveTeamReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LeaveTeamReq[number], err)
}

func (x *LeaveTeamReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TeamId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LeaveTeamReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *LeaveTeamResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *ListTeamReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListTeamReq[number], err)
}

func (x *ListTeamReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *ListTeamResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListTeamResp[number], err)
}

func (x *ListTeamResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Team
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Teams = append(x.Teams, &v)
	return offset, nil
}

func (x *GetTeamInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTeamInfoReq[number], err)
}

func (x *GetTeamInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *GetTeamInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTeamInfoResp[number], err)
}

func (x *GetTeamInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v TeamInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TeamInfo = &v
	return offset, nil
}

func (x *GetMemoryInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMemoryInfoReq[number], err)
}

func (x *GetMemoryInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *GetMemoryInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMemoryInfoResp[number], err)
}

func (x *GetMemoryInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v MemoryInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.MemoryInfo = &v
	return offset, nil
}

func (x *GetPointInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPointInfoReq[number], err)
}

func (x *GetPointInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *GetPointInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPointInfoResp[number], err)
}

func (x *GetPointInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PointInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PointInfo = &v
	return offset, nil
}

func (x *GetMemberInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMemberInfoReq[number], err)
}

func (x *GetMemberInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *GetMemberInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMemberInfoResp[number], err)
}

func (x *GetMemberInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v MemberInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.MemberInfo = &v
	return offset, nil
}

func (x *GetAchievementInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAchievementInfoReq[number], err)
}

func (x *GetAchievementInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *GetAchievementInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAchievementInfoResp[number], err)
}

func (x *GetAchievementInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v AchievementInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.AchievementInfo = &v
	return offset, nil
}

func (x *CreateAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Album == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbum())
	return offset
}

func (x *CreateAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.AlbumId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAlbumId())
	return offset
}

func (x *UpdateAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Album == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbum())
	return offset
}

func (x *UpdateAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAlbumResp) fastWriteField1(buf []byte) (offset int) {
	if x.Album == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbum())
	return offset
}

func (x *ListAlbumsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListAlbumsReq) fastWriteField1(buf []byte) (offset int) {
	if x.Pagination == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPagination())
	return offset
}

func (x *ListAlbumsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListAlbumsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Albums == nil {
		return offset
	}
	for i := range x.GetAlbums() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAlbums()[i])
	}
	return offset
}

func (x *DeleteAlbumReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteAlbumReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteAlbumResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *UploadPhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UploadPhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *UploadPhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UploadPhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.PhotoId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPhotoId())
	return offset
}

func (x *UpdatePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdatePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *UpdatePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetPhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetPhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPhotoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhoto())
	return offset
}

func (x *ListPhotosReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListPhotosReq) fastWriteField1(buf []byte) (offset int) {
	if x.Pagination == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPagination())
	return offset
}

func (x *ListPhotosResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListPhotosResp) fastWriteField1(buf []byte) (offset int) {
	if x.Photos == nil {
		return offset
	}
	for i := range x.GetPhotos() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPhotos()[i])
	}
	return offset
}

func (x *DeletePhotoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePhotoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeletePhotoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *AddCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.Cat == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCat())
	return offset
}

func (x *AddCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *UpdateCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.Cat == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCat())
	return offset
}

func (x *UpdateCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.AlbumId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAlbumId())
	return offset
}

func (x *GetCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cat == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCat())
	return offset
}

func (x *DeleteCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *AddPlaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddPlaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Place == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPlace())
	return offset
}

func (x *AddPlaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddPlaceResp) fastWriteField1(buf []byte) (offset int) {
	if x.PlaceId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPlaceId())
	return offset
}

func (x *UpdatePlaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdatePlaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Place == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPlace())
	return offset
}

func (x *UpdatePlaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetPlaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPlaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.AlbumId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAlbumId())
	return offset
}

func (x *GetPlaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPlaceResp) fastWriteField1(buf []byte) (offset int) {
	if x.Place == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPlace())
	return offset
}

func (x *DeletePlaceReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePlaceReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeletePlaceResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *AddTeamReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AddTeamReq) fastWriteField1(buf []byte) (offset int) {
	if x.Team == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetTeam())
	return offset
}

func (x *AddTeamReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetUserMeta())
	return offset
}

func (x *AddTeamResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddTeamResp) fastWriteField1(buf []byte) (offset int) {
	if x.TeamId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTeamId())
	return offset
}

func (x *UpdateTeamReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateTeamReq) fastWriteField1(buf []byte) (offset int) {
	if x.Team == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetTeam())
	return offset
}

func (x *UpdateTeamResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetTeamReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetTeamReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetTeamResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetTeamResp) fastWriteField1(buf []byte) (offset int) {
	if x.Team == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetTeam())
	return offset
}

func (x *DeleteTeamReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteTeamReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteTeamResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *JoinTeamReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *JoinTeamReq) fastWriteField1(buf []byte) (offset int) {
	if x.TeamId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTeamId())
	return offset
}

func (x *JoinTeamReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetUserMeta())
	return offset
}

func (x *JoinTeamResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *LeaveTeamReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LeaveTeamReq) fastWriteField1(buf []byte) (offset int) {
	if x.TeamId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTeamId())
	return offset
}

func (x *LeaveTeamReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetUserMeta())
	return offset
}

func (x *LeaveTeamResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *ListTeamReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListTeamReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserMeta())
	return offset
}

func (x *ListTeamResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListTeamResp) fastWriteField1(buf []byte) (offset int) {
	if x.Teams == nil {
		return offset
	}
	for i := range x.GetTeams() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetTeams()[i])
	}
	return offset
}

func (x *GetTeamInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetTeamInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserMeta())
	return offset
}

func (x *GetTeamInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetTeamInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.TeamInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetTeamInfo())
	return offset
}

func (x *GetMemoryInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetMemoryInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserMeta())
	return offset
}

func (x *GetMemoryInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetMemoryInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.MemoryInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMemoryInfo())
	return offset
}

func (x *GetPointInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPointInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserMeta())
	return offset
}

func (x *GetPointInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPointInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.PointInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPointInfo())
	return offset
}

func (x *GetMemberInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetMemberInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserMeta())
	return offset
}

func (x *GetMemberInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetMemberInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.MemberInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMemberInfo())
	return offset
}

func (x *GetAchievementInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAchievementInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserMeta())
	return offset
}

func (x *GetAchievementInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAchievementInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.AchievementInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAchievementInfo())
	return offset
}

func (x *CreateAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateAlbumReq) sizeField1() (n int) {
	if x.Album == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAlbum())
	return n
}

func (x *CreateAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateAlbumResp) sizeField1() (n int) {
	if x.AlbumId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAlbumId())
	return n
}

func (x *UpdateAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateAlbumReq) sizeField1() (n int) {
	if x.Album == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAlbum())
	return n
}

func (x *UpdateAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAlbumReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAlbumResp) sizeField1() (n int) {
	if x.Album == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAlbum())
	return n
}

func (x *ListAlbumsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListAlbumsReq) sizeField1() (n int) {
	if x.Pagination == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPagination())
	return n
}

func (x *ListAlbumsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListAlbumsResp) sizeField1() (n int) {
	if x.Albums == nil {
		return n
	}
	for i := range x.GetAlbums() {
		n += fastpb.SizeMessage(1, x.GetAlbums()[i])
	}
	return n
}

func (x *DeleteAlbumReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteAlbumReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteAlbumResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *UploadPhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UploadPhotoReq) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *UploadPhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UploadPhotoResp) sizeField1() (n int) {
	if x.PhotoId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPhotoId())
	return n
}

func (x *UpdatePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdatePhotoReq) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *UpdatePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetPhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPhotoReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetPhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPhotoResp) sizeField1() (n int) {
	if x.Photo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPhoto())
	return n
}

func (x *ListPhotosReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListPhotosReq) sizeField1() (n int) {
	if x.Pagination == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPagination())
	return n
}

func (x *ListPhotosResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListPhotosResp) sizeField1() (n int) {
	if x.Photos == nil {
		return n
	}
	for i := range x.GetPhotos() {
		n += fastpb.SizeMessage(1, x.GetPhotos()[i])
	}
	return n
}

func (x *DeletePhotoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePhotoReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeletePhotoResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *AddCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddCatReq) sizeField1() (n int) {
	if x.Cat == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCat())
	return n
}

func (x *AddCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddCatResp) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *UpdateCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateCatReq) sizeField1() (n int) {
	if x.Cat == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCat())
	return n
}

func (x *UpdateCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCatReq) sizeField1() (n int) {
	if x.AlbumId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAlbumId())
	return n
}

func (x *GetCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCatResp) sizeField1() (n int) {
	if x.Cat == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCat())
	return n
}

func (x *DeleteCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCatReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *AddPlaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddPlaceReq) sizeField1() (n int) {
	if x.Place == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPlace())
	return n
}

func (x *AddPlaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddPlaceResp) sizeField1() (n int) {
	if x.PlaceId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPlaceId())
	return n
}

func (x *UpdatePlaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdatePlaceReq) sizeField1() (n int) {
	if x.Place == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPlace())
	return n
}

func (x *UpdatePlaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetPlaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPlaceReq) sizeField1() (n int) {
	if x.AlbumId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAlbumId())
	return n
}

func (x *GetPlaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPlaceResp) sizeField1() (n int) {
	if x.Place == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPlace())
	return n
}

func (x *DeletePlaceReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePlaceReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeletePlaceResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *AddTeamReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AddTeamReq) sizeField1() (n int) {
	if x.Team == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetTeam())
	return n
}

func (x *AddTeamReq) sizeField2() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetUserMeta())
	return n
}

func (x *AddTeamResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddTeamResp) sizeField1() (n int) {
	if x.TeamId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTeamId())
	return n
}

func (x *UpdateTeamReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateTeamReq) sizeField1() (n int) {
	if x.Team == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetTeam())
	return n
}

func (x *UpdateTeamResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetTeamReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetTeamReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetTeamResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetTeamResp) sizeField1() (n int) {
	if x.Team == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetTeam())
	return n
}

func (x *DeleteTeamReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteTeamReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteTeamResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *JoinTeamReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *JoinTeamReq) sizeField1() (n int) {
	if x.TeamId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTeamId())
	return n
}

func (x *JoinTeamReq) sizeField2() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetUserMeta())
	return n
}

func (x *JoinTeamResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *LeaveTeamReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LeaveTeamReq) sizeField1() (n int) {
	if x.TeamId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTeamId())
	return n
}

func (x *LeaveTeamReq) sizeField2() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetUserMeta())
	return n
}

func (x *LeaveTeamResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *ListTeamReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListTeamReq) sizeField1() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserMeta())
	return n
}

func (x *ListTeamResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListTeamResp) sizeField1() (n int) {
	if x.Teams == nil {
		return n
	}
	for i := range x.GetTeams() {
		n += fastpb.SizeMessage(1, x.GetTeams()[i])
	}
	return n
}

func (x *GetTeamInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetTeamInfoReq) sizeField1() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserMeta())
	return n
}

func (x *GetTeamInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetTeamInfoResp) sizeField1() (n int) {
	if x.TeamInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetTeamInfo())
	return n
}

func (x *GetMemoryInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetMemoryInfoReq) sizeField1() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserMeta())
	return n
}

func (x *GetMemoryInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetMemoryInfoResp) sizeField1() (n int) {
	if x.MemoryInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMemoryInfo())
	return n
}

func (x *GetPointInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPointInfoReq) sizeField1() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserMeta())
	return n
}

func (x *GetPointInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPointInfoResp) sizeField1() (n int) {
	if x.PointInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPointInfo())
	return n
}

func (x *GetMemberInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetMemberInfoReq) sizeField1() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserMeta())
	return n
}

func (x *GetMemberInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetMemberInfoResp) sizeField1() (n int) {
	if x.MemberInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMemberInfo())
	return n
}

func (x *GetAchievementInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAchievementInfoReq) sizeField1() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserMeta())
	return n
}

func (x *GetAchievementInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAchievementInfoResp) sizeField1() (n int) {
	if x.AchievementInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAchievementInfo())
	return n
}

var fieldIDToName_CreateAlbumReq = map[int32]string{
	1: "Album",
}

var fieldIDToName_CreateAlbumResp = map[int32]string{
	1: "AlbumId",
}

var fieldIDToName_UpdateAlbumReq = map[int32]string{
	1: "Album",
}

var fieldIDToName_UpdateAlbumResp = map[int32]string{}

var fieldIDToName_GetAlbumReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetAlbumResp = map[int32]string{
	1: "Album",
}

var fieldIDToName_ListAlbumsReq = map[int32]string{
	1: "Pagination",
}

var fieldIDToName_ListAlbumsResp = map[int32]string{
	1: "Albums",
}

var fieldIDToName_DeleteAlbumReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteAlbumResp = map[int32]string{}

var fieldIDToName_UploadPhotoReq = map[int32]string{
	1: "Photo",
}

var fieldIDToName_UploadPhotoResp = map[int32]string{
	1: "PhotoId",
}

var fieldIDToName_UpdatePhotoReq = map[int32]string{
	1: "Photo",
}

var fieldIDToName_UpdatePhotoResp = map[int32]string{}

var fieldIDToName_GetPhotoReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetPhotoResp = map[int32]string{
	1: "Photo",
}

var fieldIDToName_ListPhotosReq = map[int32]string{
	1: "Pagination",
}

var fieldIDToName_ListPhotosResp = map[int32]string{
	1: "Photos",
}

var fieldIDToName_DeletePhotoReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeletePhotoResp = map[int32]string{}

var fieldIDToName_AddCatReq = map[int32]string{
	1: "Cat",
}

var fieldIDToName_AddCatResp = map[int32]string{
	1: "CatId",
}

var fieldIDToName_UpdateCatReq = map[int32]string{
	1: "Cat",
}

var fieldIDToName_UpdateCatResp = map[int32]string{}

var fieldIDToName_GetCatReq = map[int32]string{
	1: "AlbumId",
}

var fieldIDToName_GetCatResp = map[int32]string{
	1: "Cat",
}

var fieldIDToName_DeleteCatReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteCatResp = map[int32]string{}

var fieldIDToName_AddPlaceReq = map[int32]string{
	1: "Place",
}

var fieldIDToName_AddPlaceResp = map[int32]string{
	1: "PlaceId",
}

var fieldIDToName_UpdatePlaceReq = map[int32]string{
	1: "Place",
}

var fieldIDToName_UpdatePlaceResp = map[int32]string{}

var fieldIDToName_GetPlaceReq = map[int32]string{
	1: "AlbumId",
}

var fieldIDToName_GetPlaceResp = map[int32]string{
	1: "Place",
}

var fieldIDToName_DeletePlaceReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeletePlaceResp = map[int32]string{}

var fieldIDToName_AddTeamReq = map[int32]string{
	1: "Team",
	2: "UserMeta",
}

var fieldIDToName_AddTeamResp = map[int32]string{
	1: "TeamId",
}

var fieldIDToName_UpdateTeamReq = map[int32]string{
	1: "Team",
}

var fieldIDToName_UpdateTeamResp = map[int32]string{}

var fieldIDToName_GetTeamReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetTeamResp = map[int32]string{
	1: "Team",
}

var fieldIDToName_DeleteTeamReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteTeamResp = map[int32]string{}

var fieldIDToName_JoinTeamReq = map[int32]string{
	1: "TeamId",
	2: "UserMeta",
}

var fieldIDToName_JoinTeamResp = map[int32]string{}

var fieldIDToName_LeaveTeamReq = map[int32]string{
	1: "TeamId",
	2: "UserMeta",
}

var fieldIDToName_LeaveTeamResp = map[int32]string{}

var fieldIDToName_ListTeamReq = map[int32]string{
	1: "UserMeta",
}

var fieldIDToName_ListTeamResp = map[int32]string{
	1: "Teams",
}

var fieldIDToName_GetTeamInfoReq = map[int32]string{
	1: "UserMeta",
}

var fieldIDToName_GetTeamInfoResp = map[int32]string{
	1: "TeamInfo",
}

var fieldIDToName_GetMemoryInfoReq = map[int32]string{
	1: "UserMeta",
}

var fieldIDToName_GetMemoryInfoResp = map[int32]string{
	1: "MemoryInfo",
}

var fieldIDToName_GetPointInfoReq = map[int32]string{
	1: "UserMeta",
}

var fieldIDToName_GetPointInfoResp = map[int32]string{
	1: "PointInfo",
}

var fieldIDToName_GetMemberInfoReq = map[int32]string{
	1: "UserMeta",
}

var fieldIDToName_GetMemberInfoResp = map[int32]string{
	1: "MemberInfo",
}

var fieldIDToName_GetAchievementInfoReq = map[int32]string{
	1: "UserMeta",
}

var fieldIDToName_GetAchievementInfoResp = map[int32]string{
	1: "AchievementInfo",
}

var _ = basic.File_basic_pagination_proto
var _ = basic.File_basic_user_proto
