// Code generated by Kitex v0.10.3. DO NOT EDIT.

package catservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	content "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/content"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddCat": kitex.NewMethodInfo(
		addCatHandler,
		newAddCatArgs,
		newAddCatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateCat": kitex.NewMethodInfo(
		updateCatHandler,
		newUpdateCatArgs,
		newUpdateCatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetCat": kitex.NewMethodInfo(
		getCatHandler,
		newGetCatArgs,
		newGetCatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteCat": kitex.NewMethodInfo(
		deleteCatHandler,
		newDeleteCatArgs,
		newDeleteCatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	catServiceServiceInfo                = NewServiceInfo()
	catServiceServiceInfoForClient       = NewServiceInfoForClient()
	catServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return catServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return catServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return catServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CatService"
	handlerType := (*content.CatService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowcloud.content",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func addCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.AddCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.CatService).AddCat(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddCatArgs:
		success, err := handler.(content.CatService).AddCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddCatResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddCatArgs() interface{} {
	return &AddCatArgs{}
}

func newAddCatResult() interface{} {
	return &AddCatResult{}
}

type AddCatArgs struct {
	Req *content.AddCatReq
}

func (p *AddCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.AddCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddCatArgs) Unmarshal(in []byte) error {
	msg := new(content.AddCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddCatArgs_Req_DEFAULT *content.AddCatReq

func (p *AddCatArgs) GetReq() *content.AddCatReq {
	if !p.IsSetReq() {
		return AddCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddCatResult struct {
	Success *content.AddCatResp
}

var AddCatResult_Success_DEFAULT *content.AddCatResp

func (p *AddCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.AddCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddCatResult) Unmarshal(in []byte) error {
	msg := new(content.AddCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddCatResult) GetSuccess() *content.AddCatResp {
	if !p.IsSetSuccess() {
		return AddCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.AddCatResp)
}

func (p *AddCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddCatResult) GetResult() interface{} {
	return p.Success
}

func updateCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.CatService).UpdateCat(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateCatArgs:
		success, err := handler.(content.CatService).UpdateCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCatResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateCatArgs() interface{} {
	return &UpdateCatArgs{}
}

func newUpdateCatResult() interface{} {
	return &UpdateCatResult{}
}

type UpdateCatArgs struct {
	Req *content.UpdateCatReq
}

func (p *UpdateCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCatArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCatArgs_Req_DEFAULT *content.UpdateCatReq

func (p *UpdateCatArgs) GetReq() *content.UpdateCatReq {
	if !p.IsSetReq() {
		return UpdateCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCatResult struct {
	Success *content.UpdateCatResp
}

var UpdateCatResult_Success_DEFAULT *content.UpdateCatResp

func (p *UpdateCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCatResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCatResult) GetSuccess() *content.UpdateCatResp {
	if !p.IsSetSuccess() {
		return UpdateCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateCatResp)
}

func (p *UpdateCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCatResult) GetResult() interface{} {
	return p.Success
}

func getCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.CatService).GetCat(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetCatArgs:
		success, err := handler.(content.CatService).GetCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCatResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetCatArgs() interface{} {
	return &GetCatArgs{}
}

func newGetCatResult() interface{} {
	return &GetCatResult{}
}

type GetCatArgs struct {
	Req *content.GetCatReq
}

func (p *GetCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCatArgs) Unmarshal(in []byte) error {
	msg := new(content.GetCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCatArgs_Req_DEFAULT *content.GetCatReq

func (p *GetCatArgs) GetReq() *content.GetCatReq {
	if !p.IsSetReq() {
		return GetCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCatResult struct {
	Success *content.GetCatResp
}

var GetCatResult_Success_DEFAULT *content.GetCatResp

func (p *GetCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCatResult) Unmarshal(in []byte) error {
	msg := new(content.GetCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCatResult) GetSuccess() *content.GetCatResp {
	if !p.IsSetSuccess() {
		return GetCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetCatResp)
}

func (p *GetCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCatResult) GetResult() interface{} {
	return p.Success
}

func deleteCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.CatService).DeleteCat(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteCatArgs:
		success, err := handler.(content.CatService).DeleteCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCatResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteCatArgs() interface{} {
	return &DeleteCatArgs{}
}

func newDeleteCatResult() interface{} {
	return &DeleteCatResult{}
}

type DeleteCatArgs struct {
	Req *content.DeleteCatReq
}

func (p *DeleteCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCatArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCatArgs_Req_DEFAULT *content.DeleteCatReq

func (p *DeleteCatArgs) GetReq() *content.DeleteCatReq {
	if !p.IsSetReq() {
		return DeleteCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCatResult struct {
	Success *content.DeleteCatResp
}

var DeleteCatResult_Success_DEFAULT *content.DeleteCatResp

func (p *DeleteCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCatResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCatResult) GetSuccess() *content.DeleteCatResp {
	if !p.IsSetSuccess() {
		return DeleteCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteCatResp)
}

func (p *DeleteCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCatResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddCat(ctx context.Context, Req *content.AddCatReq) (r *content.AddCatResp, err error) {
	var _args AddCatArgs
	_args.Req = Req
	var _result AddCatResult
	if err = p.c.Call(ctx, "AddCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCat(ctx context.Context, Req *content.UpdateCatReq) (r *content.UpdateCatResp, err error) {
	var _args UpdateCatArgs
	_args.Req = Req
	var _result UpdateCatResult
	if err = p.c.Call(ctx, "UpdateCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCat(ctx context.Context, Req *content.GetCatReq) (r *content.GetCatResp, err error) {
	var _args GetCatArgs
	_args.Req = Req
	var _result GetCatResult
	if err = p.c.Call(ctx, "GetCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCat(ctx context.Context, Req *content.DeleteCatReq) (r *content.DeleteCatResp, err error) {
	var _args DeleteCatArgs
	_args.Req = Req
	var _result DeleteCatResult
	if err = p.c.Call(ctx, "DeleteCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
