// Code generated by Kitex v0.10.3. DO NOT EDIT.

package teamservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	content "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/content"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddTeam": kitex.NewMethodInfo(
		addTeamHandler,
		newAddTeamArgs,
		newAddTeamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateTeam": kitex.NewMethodInfo(
		updateTeamHandler,
		newUpdateTeamArgs,
		newUpdateTeamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetTeam": kitex.NewMethodInfo(
		getTeamHandler,
		newGetTeamArgs,
		newGetTeamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteTeam": kitex.NewMethodInfo(
		deleteTeamHandler,
		newDeleteTeamArgs,
		newDeleteTeamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"JoinTeam": kitex.NewMethodInfo(
		joinTeamHandler,
		newJoinTeamArgs,
		newJoinTeamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"LeaveTeam": kitex.NewMethodInfo(
		leaveTeamHandler,
		newLeaveTeamArgs,
		newLeaveTeamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListTeam": kitex.NewMethodInfo(
		listTeamHandler,
		newListTeamArgs,
		newListTeamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetTeamInfo": kitex.NewMethodInfo(
		getTeamInfoHandler,
		newGetTeamInfoArgs,
		newGetTeamInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	teamServiceServiceInfo                = NewServiceInfo()
	teamServiceServiceInfoForClient       = NewServiceInfoForClient()
	teamServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return teamServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return teamServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return teamServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "TeamService"
	handlerType := (*content.TeamService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowcloud.content",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func addTeamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.AddTeamReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.TeamService).AddTeam(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddTeamArgs:
		success, err := handler.(content.TeamService).AddTeam(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddTeamResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddTeamArgs() interface{} {
	return &AddTeamArgs{}
}

func newAddTeamResult() interface{} {
	return &AddTeamResult{}
}

type AddTeamArgs struct {
	Req *content.AddTeamReq
}

func (p *AddTeamArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.AddTeamReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddTeamArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddTeamArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddTeamArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddTeamArgs) Unmarshal(in []byte) error {
	msg := new(content.AddTeamReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddTeamArgs_Req_DEFAULT *content.AddTeamReq

func (p *AddTeamArgs) GetReq() *content.AddTeamReq {
	if !p.IsSetReq() {
		return AddTeamArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddTeamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddTeamArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddTeamResult struct {
	Success *content.AddTeamResp
}

var AddTeamResult_Success_DEFAULT *content.AddTeamResp

func (p *AddTeamResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.AddTeamResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddTeamResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddTeamResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddTeamResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddTeamResult) Unmarshal(in []byte) error {
	msg := new(content.AddTeamResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddTeamResult) GetSuccess() *content.AddTeamResp {
	if !p.IsSetSuccess() {
		return AddTeamResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddTeamResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.AddTeamResp)
}

func (p *AddTeamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddTeamResult) GetResult() interface{} {
	return p.Success
}

func updateTeamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.UpdateTeamReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.TeamService).UpdateTeam(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateTeamArgs:
		success, err := handler.(content.TeamService).UpdateTeam(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateTeamResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateTeamArgs() interface{} {
	return &UpdateTeamArgs{}
}

func newUpdateTeamResult() interface{} {
	return &UpdateTeamResult{}
}

type UpdateTeamArgs struct {
	Req *content.UpdateTeamReq
}

func (p *UpdateTeamArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.UpdateTeamReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateTeamArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateTeamArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateTeamArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateTeamArgs) Unmarshal(in []byte) error {
	msg := new(content.UpdateTeamReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateTeamArgs_Req_DEFAULT *content.UpdateTeamReq

func (p *UpdateTeamArgs) GetReq() *content.UpdateTeamReq {
	if !p.IsSetReq() {
		return UpdateTeamArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateTeamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateTeamArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateTeamResult struct {
	Success *content.UpdateTeamResp
}

var UpdateTeamResult_Success_DEFAULT *content.UpdateTeamResp

func (p *UpdateTeamResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.UpdateTeamResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateTeamResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateTeamResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateTeamResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateTeamResult) Unmarshal(in []byte) error {
	msg := new(content.UpdateTeamResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateTeamResult) GetSuccess() *content.UpdateTeamResp {
	if !p.IsSetSuccess() {
		return UpdateTeamResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateTeamResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.UpdateTeamResp)
}

func (p *UpdateTeamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateTeamResult) GetResult() interface{} {
	return p.Success
}

func getTeamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetTeamReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.TeamService).GetTeam(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetTeamArgs:
		success, err := handler.(content.TeamService).GetTeam(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTeamResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetTeamArgs() interface{} {
	return &GetTeamArgs{}
}

func newGetTeamResult() interface{} {
	return &GetTeamResult{}
}

type GetTeamArgs struct {
	Req *content.GetTeamReq
}

func (p *GetTeamArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetTeamReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetTeamArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetTeamArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetTeamArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetTeamArgs) Unmarshal(in []byte) error {
	msg := new(content.GetTeamReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTeamArgs_Req_DEFAULT *content.GetTeamReq

func (p *GetTeamArgs) GetReq() *content.GetTeamReq {
	if !p.IsSetReq() {
		return GetTeamArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTeamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetTeamArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetTeamResult struct {
	Success *content.GetTeamResp
}

var GetTeamResult_Success_DEFAULT *content.GetTeamResp

func (p *GetTeamResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetTeamResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetTeamResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetTeamResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetTeamResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetTeamResult) Unmarshal(in []byte) error {
	msg := new(content.GetTeamResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTeamResult) GetSuccess() *content.GetTeamResp {
	if !p.IsSetSuccess() {
		return GetTeamResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTeamResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetTeamResp)
}

func (p *GetTeamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTeamResult) GetResult() interface{} {
	return p.Success
}

func deleteTeamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.DeleteTeamReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.TeamService).DeleteTeam(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteTeamArgs:
		success, err := handler.(content.TeamService).DeleteTeam(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteTeamResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteTeamArgs() interface{} {
	return &DeleteTeamArgs{}
}

func newDeleteTeamResult() interface{} {
	return &DeleteTeamResult{}
}

type DeleteTeamArgs struct {
	Req *content.DeleteTeamReq
}

func (p *DeleteTeamArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.DeleteTeamReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteTeamArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteTeamArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteTeamArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteTeamArgs) Unmarshal(in []byte) error {
	msg := new(content.DeleteTeamReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteTeamArgs_Req_DEFAULT *content.DeleteTeamReq

func (p *DeleteTeamArgs) GetReq() *content.DeleteTeamReq {
	if !p.IsSetReq() {
		return DeleteTeamArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteTeamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteTeamArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteTeamResult struct {
	Success *content.DeleteTeamResp
}

var DeleteTeamResult_Success_DEFAULT *content.DeleteTeamResp

func (p *DeleteTeamResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.DeleteTeamResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteTeamResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteTeamResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteTeamResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteTeamResult) Unmarshal(in []byte) error {
	msg := new(content.DeleteTeamResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteTeamResult) GetSuccess() *content.DeleteTeamResp {
	if !p.IsSetSuccess() {
		return DeleteTeamResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteTeamResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.DeleteTeamResp)
}

func (p *DeleteTeamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteTeamResult) GetResult() interface{} {
	return p.Success
}

func joinTeamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.JoinTeamReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.TeamService).JoinTeam(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *JoinTeamArgs:
		success, err := handler.(content.TeamService).JoinTeam(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*JoinTeamResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newJoinTeamArgs() interface{} {
	return &JoinTeamArgs{}
}

func newJoinTeamResult() interface{} {
	return &JoinTeamResult{}
}

type JoinTeamArgs struct {
	Req *content.JoinTeamReq
}

func (p *JoinTeamArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.JoinTeamReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *JoinTeamArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *JoinTeamArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *JoinTeamArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *JoinTeamArgs) Unmarshal(in []byte) error {
	msg := new(content.JoinTeamReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var JoinTeamArgs_Req_DEFAULT *content.JoinTeamReq

func (p *JoinTeamArgs) GetReq() *content.JoinTeamReq {
	if !p.IsSetReq() {
		return JoinTeamArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *JoinTeamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *JoinTeamArgs) GetFirstArgument() interface{} {
	return p.Req
}

type JoinTeamResult struct {
	Success *content.JoinTeamResp
}

var JoinTeamResult_Success_DEFAULT *content.JoinTeamResp

func (p *JoinTeamResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.JoinTeamResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *JoinTeamResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *JoinTeamResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *JoinTeamResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *JoinTeamResult) Unmarshal(in []byte) error {
	msg := new(content.JoinTeamResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *JoinTeamResult) GetSuccess() *content.JoinTeamResp {
	if !p.IsSetSuccess() {
		return JoinTeamResult_Success_DEFAULT
	}
	return p.Success
}

func (p *JoinTeamResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.JoinTeamResp)
}

func (p *JoinTeamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *JoinTeamResult) GetResult() interface{} {
	return p.Success
}

func leaveTeamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.LeaveTeamReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.TeamService).LeaveTeam(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LeaveTeamArgs:
		success, err := handler.(content.TeamService).LeaveTeam(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LeaveTeamResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLeaveTeamArgs() interface{} {
	return &LeaveTeamArgs{}
}

func newLeaveTeamResult() interface{} {
	return &LeaveTeamResult{}
}

type LeaveTeamArgs struct {
	Req *content.LeaveTeamReq
}

func (p *LeaveTeamArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.LeaveTeamReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LeaveTeamArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LeaveTeamArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LeaveTeamArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LeaveTeamArgs) Unmarshal(in []byte) error {
	msg := new(content.LeaveTeamReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LeaveTeamArgs_Req_DEFAULT *content.LeaveTeamReq

func (p *LeaveTeamArgs) GetReq() *content.LeaveTeamReq {
	if !p.IsSetReq() {
		return LeaveTeamArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LeaveTeamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LeaveTeamArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LeaveTeamResult struct {
	Success *content.LeaveTeamResp
}

var LeaveTeamResult_Success_DEFAULT *content.LeaveTeamResp

func (p *LeaveTeamResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.LeaveTeamResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LeaveTeamResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LeaveTeamResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LeaveTeamResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LeaveTeamResult) Unmarshal(in []byte) error {
	msg := new(content.LeaveTeamResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LeaveTeamResult) GetSuccess() *content.LeaveTeamResp {
	if !p.IsSetSuccess() {
		return LeaveTeamResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LeaveTeamResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.LeaveTeamResp)
}

func (p *LeaveTeamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LeaveTeamResult) GetResult() interface{} {
	return p.Success
}

func listTeamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.ListTeamReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.TeamService).ListTeam(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListTeamArgs:
		success, err := handler.(content.TeamService).ListTeam(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListTeamResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListTeamArgs() interface{} {
	return &ListTeamArgs{}
}

func newListTeamResult() interface{} {
	return &ListTeamResult{}
}

type ListTeamArgs struct {
	Req *content.ListTeamReq
}

func (p *ListTeamArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.ListTeamReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListTeamArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListTeamArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListTeamArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListTeamArgs) Unmarshal(in []byte) error {
	msg := new(content.ListTeamReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListTeamArgs_Req_DEFAULT *content.ListTeamReq

func (p *ListTeamArgs) GetReq() *content.ListTeamReq {
	if !p.IsSetReq() {
		return ListTeamArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListTeamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListTeamArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListTeamResult struct {
	Success *content.ListTeamResp
}

var ListTeamResult_Success_DEFAULT *content.ListTeamResp

func (p *ListTeamResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.ListTeamResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListTeamResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListTeamResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListTeamResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListTeamResult) Unmarshal(in []byte) error {
	msg := new(content.ListTeamResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListTeamResult) GetSuccess() *content.ListTeamResp {
	if !p.IsSetSuccess() {
		return ListTeamResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListTeamResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.ListTeamResp)
}

func (p *ListTeamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListTeamResult) GetResult() interface{} {
	return p.Success
}

func getTeamInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(content.GetTeamInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(content.TeamService).GetTeamInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetTeamInfoArgs:
		success, err := handler.(content.TeamService).GetTeamInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTeamInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetTeamInfoArgs() interface{} {
	return &GetTeamInfoArgs{}
}

func newGetTeamInfoResult() interface{} {
	return &GetTeamInfoResult{}
}

type GetTeamInfoArgs struct {
	Req *content.GetTeamInfoReq
}

func (p *GetTeamInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(content.GetTeamInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetTeamInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetTeamInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetTeamInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetTeamInfoArgs) Unmarshal(in []byte) error {
	msg := new(content.GetTeamInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTeamInfoArgs_Req_DEFAULT *content.GetTeamInfoReq

func (p *GetTeamInfoArgs) GetReq() *content.GetTeamInfoReq {
	if !p.IsSetReq() {
		return GetTeamInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTeamInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetTeamInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetTeamInfoResult struct {
	Success *content.GetTeamInfoResp
}

var GetTeamInfoResult_Success_DEFAULT *content.GetTeamInfoResp

func (p *GetTeamInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(content.GetTeamInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetTeamInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetTeamInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetTeamInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetTeamInfoResult) Unmarshal(in []byte) error {
	msg := new(content.GetTeamInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTeamInfoResult) GetSuccess() *content.GetTeamInfoResp {
	if !p.IsSetSuccess() {
		return GetTeamInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTeamInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*content.GetTeamInfoResp)
}

func (p *GetTeamInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTeamInfoResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddTeam(ctx context.Context, Req *content.AddTeamReq) (r *content.AddTeamResp, err error) {
	var _args AddTeamArgs
	_args.Req = Req
	var _result AddTeamResult
	if err = p.c.Call(ctx, "AddTeam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTeam(ctx context.Context, Req *content.UpdateTeamReq) (r *content.UpdateTeamResp, err error) {
	var _args UpdateTeamArgs
	_args.Req = Req
	var _result UpdateTeamResult
	if err = p.c.Call(ctx, "UpdateTeam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTeam(ctx context.Context, Req *content.GetTeamReq) (r *content.GetTeamResp, err error) {
	var _args GetTeamArgs
	_args.Req = Req
	var _result GetTeamResult
	if err = p.c.Call(ctx, "GetTeam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTeam(ctx context.Context, Req *content.DeleteTeamReq) (r *content.DeleteTeamResp, err error) {
	var _args DeleteTeamArgs
	_args.Req = Req
	var _result DeleteTeamResult
	if err = p.c.Call(ctx, "DeleteTeam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) JoinTeam(ctx context.Context, Req *content.JoinTeamReq) (r *content.JoinTeamResp, err error) {
	var _args JoinTeamArgs
	_args.Req = Req
	var _result JoinTeamResult
	if err = p.c.Call(ctx, "JoinTeam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LeaveTeam(ctx context.Context, Req *content.LeaveTeamReq) (r *content.LeaveTeamResp, err error) {
	var _args LeaveTeamArgs
	_args.Req = Req
	var _result LeaveTeamResult
	if err = p.c.Call(ctx, "LeaveTeam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTeam(ctx context.Context, Req *content.ListTeamReq) (r *content.ListTeamResp, err error) {
	var _args ListTeamArgs
	_args.Req = Req
	var _result ListTeamResult
	if err = p.c.Call(ctx, "ListTeam", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTeamInfo(ctx context.Context, Req *content.GetTeamInfoReq) (r *content.GetTeamInfoResp, err error) {
	var _args GetTeamInfoArgs
	_args.Req = Req
	var _result GetTeamInfoResult
	if err = p.c.Call(ctx, "GetTeamInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
