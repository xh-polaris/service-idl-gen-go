// Code generated by Kitex v0.10.3. DO NOT EDIT.

package teamservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	content "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowcloud/content"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddTeam(ctx context.Context, Req *content.AddTeamReq, callOptions ...callopt.Option) (r *content.AddTeamResp, err error)
	UpdateTeam(ctx context.Context, Req *content.UpdateTeamReq, callOptions ...callopt.Option) (r *content.UpdateTeamResp, err error)
	GetTeam(ctx context.Context, Req *content.GetTeamReq, callOptions ...callopt.Option) (r *content.GetTeamResp, err error)
	DeleteTeam(ctx context.Context, Req *content.DeleteTeamReq, callOptions ...callopt.Option) (r *content.DeleteTeamResp, err error)
	JoinTeam(ctx context.Context, Req *content.JoinTeamReq, callOptions ...callopt.Option) (r *content.JoinTeamResp, err error)
	LeaveTeam(ctx context.Context, Req *content.LeaveTeamReq, callOptions ...callopt.Option) (r *content.LeaveTeamResp, err error)
	ListTeam(ctx context.Context, Req *content.ListTeamReq, callOptions ...callopt.Option) (r *content.ListTeamResp, err error)
	GetTeamInfo(ctx context.Context, Req *content.GetTeamInfoReq, callOptions ...callopt.Option) (r *content.GetTeamInfoResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTeamServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTeamServiceClient struct {
	*kClient
}

func (p *kTeamServiceClient) AddTeam(ctx context.Context, Req *content.AddTeamReq, callOptions ...callopt.Option) (r *content.AddTeamResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddTeam(ctx, Req)
}

func (p *kTeamServiceClient) UpdateTeam(ctx context.Context, Req *content.UpdateTeamReq, callOptions ...callopt.Option) (r *content.UpdateTeamResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateTeam(ctx, Req)
}

func (p *kTeamServiceClient) GetTeam(ctx context.Context, Req *content.GetTeamReq, callOptions ...callopt.Option) (r *content.GetTeamResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTeam(ctx, Req)
}

func (p *kTeamServiceClient) DeleteTeam(ctx context.Context, Req *content.DeleteTeamReq, callOptions ...callopt.Option) (r *content.DeleteTeamResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteTeam(ctx, Req)
}

func (p *kTeamServiceClient) JoinTeam(ctx context.Context, Req *content.JoinTeamReq, callOptions ...callopt.Option) (r *content.JoinTeamResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.JoinTeam(ctx, Req)
}

func (p *kTeamServiceClient) LeaveTeam(ctx context.Context, Req *content.LeaveTeamReq, callOptions ...callopt.Option) (r *content.LeaveTeamResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LeaveTeam(ctx, Req)
}

func (p *kTeamServiceClient) ListTeam(ctx context.Context, Req *content.ListTeamReq, callOptions ...callopt.Option) (r *content.ListTeamResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListTeam(ctx, Req)
}

func (p *kTeamServiceClient) GetTeamInfo(ctx context.Context, Req *content.GetTeamInfoReq, callOptions ...callopt.Option) (r *content.GetTeamInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTeamInfo(ctx, Req)
}
