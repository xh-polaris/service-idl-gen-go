// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package user

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *MeowUser) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MeowUser[number], err)
}

func (x *MeowUser) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.UserMeta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserMeta = &v
	return offset, nil
}

func (x *MeowUser) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Signature, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.MemberId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.AlbumInfoId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.TeamInfoId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.MemoryInfoId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.PointInfoId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.AchievementInfoId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CreatedTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.UpdatedTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.DeletedTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MeowUser) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MeowUser) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *MeowUser) fastWriteField1(buf []byte) (offset int) {
	if x.UserMeta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserMeta())
	return offset
}

func (x *MeowUser) fastWriteField2(buf []byte) (offset int) {
	if x.Signature == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSignature())
	return offset
}

func (x *MeowUser) fastWriteField3(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAvatar())
	return offset
}

func (x *MeowUser) fastWriteField4(buf []byte) (offset int) {
	if x.MemberId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetMemberId())
	return offset
}

func (x *MeowUser) fastWriteField5(buf []byte) (offset int) {
	if x.AlbumInfoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetAlbumInfoId())
	return offset
}

func (x *MeowUser) fastWriteField6(buf []byte) (offset int) {
	if x.TeamInfoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, x.GetTeamInfoId())
	return offset
}

func (x *MeowUser) fastWriteField7(buf []byte) (offset int) {
	if x.MemoryInfoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, x.GetMemoryInfoId())
	return offset
}

func (x *MeowUser) fastWriteField8(buf []byte) (offset int) {
	if x.PointInfoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 8, x.GetPointInfoId())
	return offset
}

func (x *MeowUser) fastWriteField9(buf []byte) (offset int) {
	if x.AchievementInfoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, x.GetAchievementInfoId())
	return offset
}

func (x *MeowUser) fastWriteField10(buf []byte) (offset int) {
	if x.CreatedTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetCreatedTime())
	return offset
}

func (x *MeowUser) fastWriteField11(buf []byte) (offset int) {
	if x.UpdatedTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetUpdatedTime())
	return offset
}

func (x *MeowUser) fastWriteField12(buf []byte) (offset int) {
	if x.DeletedTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetDeletedTime())
	return offset
}

func (x *MeowUser) fastWriteField13(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 13, x.GetId())
	return offset
}

func (x *MeowUser) fastWriteField14(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetUsername())
	return offset
}

func (x *MeowUser) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *MeowUser) sizeField1() (n int) {
	if x.UserMeta == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserMeta())
	return n
}

func (x *MeowUser) sizeField2() (n int) {
	if x.Signature == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSignature())
	return n
}

func (x *MeowUser) sizeField3() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAvatar())
	return n
}

func (x *MeowUser) sizeField4() (n int) {
	if x.MemberId == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetMemberId())
	return n
}

func (x *MeowUser) sizeField5() (n int) {
	if x.AlbumInfoId == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetAlbumInfoId())
	return n
}

func (x *MeowUser) sizeField6() (n int) {
	if x.TeamInfoId == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, x.GetTeamInfoId())
	return n
}

func (x *MeowUser) sizeField7() (n int) {
	if x.MemoryInfoId == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, x.GetMemoryInfoId())
	return n
}

func (x *MeowUser) sizeField8() (n int) {
	if x.PointInfoId == 0 {
		return n
	}
	n += fastpb.SizeInt32(8, x.GetPointInfoId())
	return n
}

func (x *MeowUser) sizeField9() (n int) {
	if x.AchievementInfoId == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, x.GetAchievementInfoId())
	return n
}

func (x *MeowUser) sizeField10() (n int) {
	if x.CreatedTime == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetCreatedTime())
	return n
}

func (x *MeowUser) sizeField11() (n int) {
	if x.UpdatedTime == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetUpdatedTime())
	return n
}

func (x *MeowUser) sizeField12() (n int) {
	if x.DeletedTime == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetDeletedTime())
	return n
}

func (x *MeowUser) sizeField13() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(13, x.GetId())
	return n
}

func (x *MeowUser) sizeField14() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetUsername())
	return n
}

var fieldIDToName_MeowUser = map[int32]string{
	1:  "UserMeta",
	2:  "Signature",
	3:  "Avatar",
	4:  "MemberId",
	5:  "AlbumInfoId",
	6:  "TeamInfoId",
	7:  "MemoryInfoId",
	8:  "PointInfoId",
	9:  "AchievementInfoId",
	10: "CreatedTime",
	11: "UpdatedTime",
	12: "DeletedTime",
	13: "Id",
	14: "Username",
}

var _ = basic.File_basic_user_proto
