// Code generated by Kitex v0.6.1. DO NOT EDIT.

package systemrpc

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	system "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/system"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return systemRpcServiceInfo
}

var systemRpcServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "system_rpc"
	handlerType := (*system.SystemRpc)(nil)
	methods := map[string]kitex.MethodInfo{
		"RetrieveNotice":    kitex.NewMethodInfo(retrieveNoticeHandler, newRetrieveNoticeArgs, newRetrieveNoticeResult, false),
		"ListNotice":        kitex.NewMethodInfo(listNoticeHandler, newListNoticeArgs, newListNoticeResult, false),
		"CreateNotice":      kitex.NewMethodInfo(createNoticeHandler, newCreateNoticeArgs, newCreateNoticeResult, false),
		"UpdateNotice":      kitex.NewMethodInfo(updateNoticeHandler, newUpdateNoticeArgs, newUpdateNoticeResult, false),
		"DeleteNotice":      kitex.NewMethodInfo(deleteNoticeHandler, newDeleteNoticeArgs, newDeleteNoticeResult, false),
		"RetrieveNews":      kitex.NewMethodInfo(retrieveNewsHandler, newRetrieveNewsArgs, newRetrieveNewsResult, false),
		"ListNews":          kitex.NewMethodInfo(listNewsHandler, newListNewsArgs, newListNewsResult, false),
		"CreateNews":        kitex.NewMethodInfo(createNewsHandler, newCreateNewsArgs, newCreateNewsResult, false),
		"UpdateNews":        kitex.NewMethodInfo(updateNewsHandler, newUpdateNewsArgs, newUpdateNewsResult, false),
		"DeleteNews":        kitex.NewMethodInfo(deleteNewsHandler, newDeleteNewsArgs, newDeleteNewsResult, false),
		"RetrieveAdmin":     kitex.NewMethodInfo(retrieveAdminHandler, newRetrieveAdminArgs, newRetrieveAdminResult, false),
		"ListAdmin":         kitex.NewMethodInfo(listAdminHandler, newListAdminArgs, newListAdminResult, false),
		"CreateAdmin":       kitex.NewMethodInfo(createAdminHandler, newCreateAdminArgs, newCreateAdminResult, false),
		"UpdateAdmin":       kitex.NewMethodInfo(updateAdminHandler, newUpdateAdminArgs, newUpdateAdminResult, false),
		"DeleteAdmin":       kitex.NewMethodInfo(deleteAdminHandler, newDeleteAdminArgs, newDeleteAdminResult, false),
		"RetrieveUserRole":  kitex.NewMethodInfo(retrieveUserRoleHandler, newRetrieveUserRoleArgs, newRetrieveUserRoleResult, false),
		"UpdateUserRole":    kitex.NewMethodInfo(updateUserRoleHandler, newUpdateUserRoleArgs, newUpdateUserRoleResult, false),
		"ContainsRole":      kitex.NewMethodInfo(containsRoleHandler, newContainsRoleArgs, newContainsRoleResult, false),
		"RetrieveCommunity": kitex.NewMethodInfo(retrieveCommunityHandler, newRetrieveCommunityArgs, newRetrieveCommunityResult, false),
		"ListCommunity":     kitex.NewMethodInfo(listCommunityHandler, newListCommunityArgs, newListCommunityResult, false),
		"CreateCommunity":   kitex.NewMethodInfo(createCommunityHandler, newCreateCommunityArgs, newCreateCommunityResult, false),
		"UpdateCommunity":   kitex.NewMethodInfo(updateCommunityHandler, newUpdateCommunityArgs, newUpdateCommunityResult, false),
		"DeleteCommunity":   kitex.NewMethodInfo(deleteCommunityHandler, newDeleteCommunityArgs, newDeleteCommunityResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "meowchat.system",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func retrieveNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.RetrieveNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).RetrieveNotice(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RetrieveNoticeArgs:
		success, err := handler.(system.SystemRpc).RetrieveNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveNoticeResult)
		realResult.Success = success
	}
	return nil
}
func newRetrieveNoticeArgs() interface{} {
	return &RetrieveNoticeArgs{}
}

func newRetrieveNoticeResult() interface{} {
	return &RetrieveNoticeResult{}
}

type RetrieveNoticeArgs struct {
	Req *system.RetrieveNoticeReq
}

func (p *RetrieveNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.RetrieveNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RetrieveNoticeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveNoticeArgs) Unmarshal(in []byte) error {
	msg := new(system.RetrieveNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveNoticeArgs_Req_DEFAULT *system.RetrieveNoticeReq

func (p *RetrieveNoticeArgs) GetReq() *system.RetrieveNoticeReq {
	if !p.IsSetReq() {
		return RetrieveNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveNoticeResult struct {
	Success *system.RetrieveNoticeResp
}

var RetrieveNoticeResult_Success_DEFAULT *system.RetrieveNoticeResp

func (p *RetrieveNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.RetrieveNoticeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RetrieveNoticeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveNoticeResult) Unmarshal(in []byte) error {
	msg := new(system.RetrieveNoticeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveNoticeResult) GetSuccess() *system.RetrieveNoticeResp {
	if !p.IsSetSuccess() {
		return RetrieveNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.RetrieveNoticeResp)
}

func (p *RetrieveNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveNoticeResult) GetResult() interface{} {
	return p.Success
}

func listNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ListNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).ListNotice(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListNoticeArgs:
		success, err := handler.(system.SystemRpc).ListNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListNoticeResult)
		realResult.Success = success
	}
	return nil
}
func newListNoticeArgs() interface{} {
	return &ListNoticeArgs{}
}

func newListNoticeResult() interface{} {
	return &ListNoticeResult{}
}

type ListNoticeArgs struct {
	Req *system.ListNoticeReq
}

func (p *ListNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ListNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListNoticeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListNoticeArgs) Unmarshal(in []byte) error {
	msg := new(system.ListNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListNoticeArgs_Req_DEFAULT *system.ListNoticeReq

func (p *ListNoticeArgs) GetReq() *system.ListNoticeReq {
	if !p.IsSetReq() {
		return ListNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListNoticeResult struct {
	Success *system.ListNoticeResp
}

var ListNoticeResult_Success_DEFAULT *system.ListNoticeResp

func (p *ListNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ListNoticeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListNoticeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListNoticeResult) Unmarshal(in []byte) error {
	msg := new(system.ListNoticeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListNoticeResult) GetSuccess() *system.ListNoticeResp {
	if !p.IsSetSuccess() {
		return ListNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ListNoticeResp)
}

func (p *ListNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListNoticeResult) GetResult() interface{} {
	return p.Success
}

func createNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CreateNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).CreateNotice(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateNoticeArgs:
		success, err := handler.(system.SystemRpc).CreateNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateNoticeResult)
		realResult.Success = success
	}
	return nil
}
func newCreateNoticeArgs() interface{} {
	return &CreateNoticeArgs{}
}

func newCreateNoticeResult() interface{} {
	return &CreateNoticeResult{}
}

type CreateNoticeArgs struct {
	Req *system.CreateNoticeReq
}

func (p *CreateNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CreateNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateNoticeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateNoticeArgs) Unmarshal(in []byte) error {
	msg := new(system.CreateNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateNoticeArgs_Req_DEFAULT *system.CreateNoticeReq

func (p *CreateNoticeArgs) GetReq() *system.CreateNoticeReq {
	if !p.IsSetReq() {
		return CreateNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateNoticeResult struct {
	Success *system.CreateNoticeResp
}

var CreateNoticeResult_Success_DEFAULT *system.CreateNoticeResp

func (p *CreateNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.CreateNoticeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateNoticeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateNoticeResult) Unmarshal(in []byte) error {
	msg := new(system.CreateNoticeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateNoticeResult) GetSuccess() *system.CreateNoticeResp {
	if !p.IsSetSuccess() {
		return CreateNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.CreateNoticeResp)
}

func (p *CreateNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateNoticeResult) GetResult() interface{} {
	return p.Success
}

func updateNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).UpdateNotice(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateNoticeArgs:
		success, err := handler.(system.SystemRpc).UpdateNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateNoticeResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateNoticeArgs() interface{} {
	return &UpdateNoticeArgs{}
}

func newUpdateNoticeResult() interface{} {
	return &UpdateNoticeResult{}
}

type UpdateNoticeArgs struct {
	Req *system.UpdateNoticeReq
}

func (p *UpdateNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateNoticeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateNoticeArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateNoticeArgs_Req_DEFAULT *system.UpdateNoticeReq

func (p *UpdateNoticeArgs) GetReq() *system.UpdateNoticeReq {
	if !p.IsSetReq() {
		return UpdateNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateNoticeResult struct {
	Success *system.UpdateNoticeResp
}

var UpdateNoticeResult_Success_DEFAULT *system.UpdateNoticeResp

func (p *UpdateNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.UpdateNoticeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateNoticeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateNoticeResult) Unmarshal(in []byte) error {
	msg := new(system.UpdateNoticeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateNoticeResult) GetSuccess() *system.UpdateNoticeResp {
	if !p.IsSetSuccess() {
		return UpdateNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.UpdateNoticeResp)
}

func (p *UpdateNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateNoticeResult) GetResult() interface{} {
	return p.Success
}

func deleteNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.DeleteNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).DeleteNotice(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteNoticeArgs:
		success, err := handler.(system.SystemRpc).DeleteNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteNoticeResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteNoticeArgs() interface{} {
	return &DeleteNoticeArgs{}
}

func newDeleteNoticeResult() interface{} {
	return &DeleteNoticeResult{}
}

type DeleteNoticeArgs struct {
	Req *system.DeleteNoticeReq
}

func (p *DeleteNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.DeleteNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteNoticeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteNoticeArgs) Unmarshal(in []byte) error {
	msg := new(system.DeleteNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteNoticeArgs_Req_DEFAULT *system.DeleteNoticeReq

func (p *DeleteNoticeArgs) GetReq() *system.DeleteNoticeReq {
	if !p.IsSetReq() {
		return DeleteNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteNoticeResult struct {
	Success *system.DeleteNoticeResp
}

var DeleteNoticeResult_Success_DEFAULT *system.DeleteNoticeResp

func (p *DeleteNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.DeleteNoticeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteNoticeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteNoticeResult) Unmarshal(in []byte) error {
	msg := new(system.DeleteNoticeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteNoticeResult) GetSuccess() *system.DeleteNoticeResp {
	if !p.IsSetSuccess() {
		return DeleteNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.DeleteNoticeResp)
}

func (p *DeleteNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteNoticeResult) GetResult() interface{} {
	return p.Success
}

func retrieveNewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.RetrieveNewsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).RetrieveNews(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RetrieveNewsArgs:
		success, err := handler.(system.SystemRpc).RetrieveNews(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveNewsResult)
		realResult.Success = success
	}
	return nil
}
func newRetrieveNewsArgs() interface{} {
	return &RetrieveNewsArgs{}
}

func newRetrieveNewsResult() interface{} {
	return &RetrieveNewsResult{}
}

type RetrieveNewsArgs struct {
	Req *system.RetrieveNewsReq
}

func (p *RetrieveNewsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.RetrieveNewsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveNewsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveNewsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveNewsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RetrieveNewsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveNewsArgs) Unmarshal(in []byte) error {
	msg := new(system.RetrieveNewsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveNewsArgs_Req_DEFAULT *system.RetrieveNewsReq

func (p *RetrieveNewsArgs) GetReq() *system.RetrieveNewsReq {
	if !p.IsSetReq() {
		return RetrieveNewsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveNewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveNewsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveNewsResult struct {
	Success *system.RetrieveNewsResp
}

var RetrieveNewsResult_Success_DEFAULT *system.RetrieveNewsResp

func (p *RetrieveNewsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.RetrieveNewsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveNewsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveNewsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveNewsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RetrieveNewsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveNewsResult) Unmarshal(in []byte) error {
	msg := new(system.RetrieveNewsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveNewsResult) GetSuccess() *system.RetrieveNewsResp {
	if !p.IsSetSuccess() {
		return RetrieveNewsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveNewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.RetrieveNewsResp)
}

func (p *RetrieveNewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveNewsResult) GetResult() interface{} {
	return p.Success
}

func listNewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ListNewsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).ListNews(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListNewsArgs:
		success, err := handler.(system.SystemRpc).ListNews(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListNewsResult)
		realResult.Success = success
	}
	return nil
}
func newListNewsArgs() interface{} {
	return &ListNewsArgs{}
}

func newListNewsResult() interface{} {
	return &ListNewsResult{}
}

type ListNewsArgs struct {
	Req *system.ListNewsReq
}

func (p *ListNewsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ListNewsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListNewsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListNewsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListNewsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListNewsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListNewsArgs) Unmarshal(in []byte) error {
	msg := new(system.ListNewsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListNewsArgs_Req_DEFAULT *system.ListNewsReq

func (p *ListNewsArgs) GetReq() *system.ListNewsReq {
	if !p.IsSetReq() {
		return ListNewsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListNewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListNewsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListNewsResult struct {
	Success *system.ListNewsResp
}

var ListNewsResult_Success_DEFAULT *system.ListNewsResp

func (p *ListNewsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ListNewsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListNewsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListNewsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListNewsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListNewsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListNewsResult) Unmarshal(in []byte) error {
	msg := new(system.ListNewsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListNewsResult) GetSuccess() *system.ListNewsResp {
	if !p.IsSetSuccess() {
		return ListNewsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListNewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ListNewsResp)
}

func (p *ListNewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListNewsResult) GetResult() interface{} {
	return p.Success
}

func createNewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CreateNewsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).CreateNews(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateNewsArgs:
		success, err := handler.(system.SystemRpc).CreateNews(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateNewsResult)
		realResult.Success = success
	}
	return nil
}
func newCreateNewsArgs() interface{} {
	return &CreateNewsArgs{}
}

func newCreateNewsResult() interface{} {
	return &CreateNewsResult{}
}

type CreateNewsArgs struct {
	Req *system.CreateNewsReq
}

func (p *CreateNewsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CreateNewsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateNewsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateNewsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateNewsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateNewsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateNewsArgs) Unmarshal(in []byte) error {
	msg := new(system.CreateNewsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateNewsArgs_Req_DEFAULT *system.CreateNewsReq

func (p *CreateNewsArgs) GetReq() *system.CreateNewsReq {
	if !p.IsSetReq() {
		return CreateNewsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateNewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateNewsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateNewsResult struct {
	Success *system.CreateNewsResp
}

var CreateNewsResult_Success_DEFAULT *system.CreateNewsResp

func (p *CreateNewsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.CreateNewsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateNewsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateNewsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateNewsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateNewsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateNewsResult) Unmarshal(in []byte) error {
	msg := new(system.CreateNewsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateNewsResult) GetSuccess() *system.CreateNewsResp {
	if !p.IsSetSuccess() {
		return CreateNewsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateNewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.CreateNewsResp)
}

func (p *CreateNewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateNewsResult) GetResult() interface{} {
	return p.Success
}

func updateNewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateNewsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).UpdateNews(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateNewsArgs:
		success, err := handler.(system.SystemRpc).UpdateNews(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateNewsResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateNewsArgs() interface{} {
	return &UpdateNewsArgs{}
}

func newUpdateNewsResult() interface{} {
	return &UpdateNewsResult{}
}

type UpdateNewsArgs struct {
	Req *system.UpdateNewsReq
}

func (p *UpdateNewsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateNewsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateNewsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateNewsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateNewsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateNewsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateNewsArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateNewsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateNewsArgs_Req_DEFAULT *system.UpdateNewsReq

func (p *UpdateNewsArgs) GetReq() *system.UpdateNewsReq {
	if !p.IsSetReq() {
		return UpdateNewsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateNewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateNewsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateNewsResult struct {
	Success *system.UpdateNewsResp
}

var UpdateNewsResult_Success_DEFAULT *system.UpdateNewsResp

func (p *UpdateNewsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.UpdateNewsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateNewsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateNewsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateNewsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateNewsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateNewsResult) Unmarshal(in []byte) error {
	msg := new(system.UpdateNewsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateNewsResult) GetSuccess() *system.UpdateNewsResp {
	if !p.IsSetSuccess() {
		return UpdateNewsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateNewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.UpdateNewsResp)
}

func (p *UpdateNewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateNewsResult) GetResult() interface{} {
	return p.Success
}

func deleteNewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.DeleteNewsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).DeleteNews(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteNewsArgs:
		success, err := handler.(system.SystemRpc).DeleteNews(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteNewsResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteNewsArgs() interface{} {
	return &DeleteNewsArgs{}
}

func newDeleteNewsResult() interface{} {
	return &DeleteNewsResult{}
}

type DeleteNewsArgs struct {
	Req *system.DeleteNewsReq
}

func (p *DeleteNewsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.DeleteNewsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteNewsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteNewsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteNewsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteNewsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteNewsArgs) Unmarshal(in []byte) error {
	msg := new(system.DeleteNewsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteNewsArgs_Req_DEFAULT *system.DeleteNewsReq

func (p *DeleteNewsArgs) GetReq() *system.DeleteNewsReq {
	if !p.IsSetReq() {
		return DeleteNewsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteNewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteNewsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteNewsResult struct {
	Success *system.DeleteNewsResp
}

var DeleteNewsResult_Success_DEFAULT *system.DeleteNewsResp

func (p *DeleteNewsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.DeleteNewsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteNewsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteNewsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteNewsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteNewsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteNewsResult) Unmarshal(in []byte) error {
	msg := new(system.DeleteNewsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteNewsResult) GetSuccess() *system.DeleteNewsResp {
	if !p.IsSetSuccess() {
		return DeleteNewsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteNewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.DeleteNewsResp)
}

func (p *DeleteNewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteNewsResult) GetResult() interface{} {
	return p.Success
}

func retrieveAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.RetrieveAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).RetrieveAdmin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RetrieveAdminArgs:
		success, err := handler.(system.SystemRpc).RetrieveAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveAdminResult)
		realResult.Success = success
	}
	return nil
}
func newRetrieveAdminArgs() interface{} {
	return &RetrieveAdminArgs{}
}

func newRetrieveAdminResult() interface{} {
	return &RetrieveAdminResult{}
}

type RetrieveAdminArgs struct {
	Req *system.RetrieveAdminReq
}

func (p *RetrieveAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.RetrieveAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RetrieveAdminArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveAdminArgs) Unmarshal(in []byte) error {
	msg := new(system.RetrieveAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveAdminArgs_Req_DEFAULT *system.RetrieveAdminReq

func (p *RetrieveAdminArgs) GetReq() *system.RetrieveAdminReq {
	if !p.IsSetReq() {
		return RetrieveAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveAdminResult struct {
	Success *system.RetrieveAdminResp
}

var RetrieveAdminResult_Success_DEFAULT *system.RetrieveAdminResp

func (p *RetrieveAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.RetrieveAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RetrieveAdminResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveAdminResult) Unmarshal(in []byte) error {
	msg := new(system.RetrieveAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveAdminResult) GetSuccess() *system.RetrieveAdminResp {
	if !p.IsSetSuccess() {
		return RetrieveAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.RetrieveAdminResp)
}

func (p *RetrieveAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveAdminResult) GetResult() interface{} {
	return p.Success
}

func listAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ListAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).ListAdmin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListAdminArgs:
		success, err := handler.(system.SystemRpc).ListAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListAdminResult)
		realResult.Success = success
	}
	return nil
}
func newListAdminArgs() interface{} {
	return &ListAdminArgs{}
}

func newListAdminResult() interface{} {
	return &ListAdminResult{}
}

type ListAdminArgs struct {
	Req *system.ListAdminReq
}

func (p *ListAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ListAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListAdminArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListAdminArgs) Unmarshal(in []byte) error {
	msg := new(system.ListAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListAdminArgs_Req_DEFAULT *system.ListAdminReq

func (p *ListAdminArgs) GetReq() *system.ListAdminReq {
	if !p.IsSetReq() {
		return ListAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListAdminResult struct {
	Success *system.ListAdminResp
}

var ListAdminResult_Success_DEFAULT *system.ListAdminResp

func (p *ListAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ListAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListAdminResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListAdminResult) Unmarshal(in []byte) error {
	msg := new(system.ListAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListAdminResult) GetSuccess() *system.ListAdminResp {
	if !p.IsSetSuccess() {
		return ListAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ListAdminResp)
}

func (p *ListAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListAdminResult) GetResult() interface{} {
	return p.Success
}

func createAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CreateAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).CreateAdmin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateAdminArgs:
		success, err := handler.(system.SystemRpc).CreateAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateAdminResult)
		realResult.Success = success
	}
	return nil
}
func newCreateAdminArgs() interface{} {
	return &CreateAdminArgs{}
}

func newCreateAdminResult() interface{} {
	return &CreateAdminResult{}
}

type CreateAdminArgs struct {
	Req *system.CreateAdminReq
}

func (p *CreateAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CreateAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateAdminArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateAdminArgs) Unmarshal(in []byte) error {
	msg := new(system.CreateAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateAdminArgs_Req_DEFAULT *system.CreateAdminReq

func (p *CreateAdminArgs) GetReq() *system.CreateAdminReq {
	if !p.IsSetReq() {
		return CreateAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateAdminResult struct {
	Success *system.CreateAdminResp
}

var CreateAdminResult_Success_DEFAULT *system.CreateAdminResp

func (p *CreateAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.CreateAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateAdminResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateAdminResult) Unmarshal(in []byte) error {
	msg := new(system.CreateAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateAdminResult) GetSuccess() *system.CreateAdminResp {
	if !p.IsSetSuccess() {
		return CreateAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.CreateAdminResp)
}

func (p *CreateAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateAdminResult) GetResult() interface{} {
	return p.Success
}

func updateAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).UpdateAdmin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateAdminArgs:
		success, err := handler.(system.SystemRpc).UpdateAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateAdminResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateAdminArgs() interface{} {
	return &UpdateAdminArgs{}
}

func newUpdateAdminResult() interface{} {
	return &UpdateAdminResult{}
}

type UpdateAdminArgs struct {
	Req *system.UpdateAdminReq
}

func (p *UpdateAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateAdminArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateAdminArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateAdminArgs_Req_DEFAULT *system.UpdateAdminReq

func (p *UpdateAdminArgs) GetReq() *system.UpdateAdminReq {
	if !p.IsSetReq() {
		return UpdateAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateAdminResult struct {
	Success *system.UpdateAdminResp
}

var UpdateAdminResult_Success_DEFAULT *system.UpdateAdminResp

func (p *UpdateAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.UpdateAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateAdminResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateAdminResult) Unmarshal(in []byte) error {
	msg := new(system.UpdateAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateAdminResult) GetSuccess() *system.UpdateAdminResp {
	if !p.IsSetSuccess() {
		return UpdateAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.UpdateAdminResp)
}

func (p *UpdateAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateAdminResult) GetResult() interface{} {
	return p.Success
}

func deleteAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.DeleteAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).DeleteAdmin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteAdminArgs:
		success, err := handler.(system.SystemRpc).DeleteAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteAdminResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteAdminArgs() interface{} {
	return &DeleteAdminArgs{}
}

func newDeleteAdminResult() interface{} {
	return &DeleteAdminResult{}
}

type DeleteAdminArgs struct {
	Req *system.DeleteAdminReq
}

func (p *DeleteAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.DeleteAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteAdminArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteAdminArgs) Unmarshal(in []byte) error {
	msg := new(system.DeleteAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteAdminArgs_Req_DEFAULT *system.DeleteAdminReq

func (p *DeleteAdminArgs) GetReq() *system.DeleteAdminReq {
	if !p.IsSetReq() {
		return DeleteAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteAdminResult struct {
	Success *system.DeleteAdminResp
}

var DeleteAdminResult_Success_DEFAULT *system.DeleteAdminResp

func (p *DeleteAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.DeleteAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteAdminResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteAdminResult) Unmarshal(in []byte) error {
	msg := new(system.DeleteAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteAdminResult) GetSuccess() *system.DeleteAdminResp {
	if !p.IsSetSuccess() {
		return DeleteAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.DeleteAdminResp)
}

func (p *DeleteAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteAdminResult) GetResult() interface{} {
	return p.Success
}

func retrieveUserRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.RetrieveUserRoleReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).RetrieveUserRole(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RetrieveUserRoleArgs:
		success, err := handler.(system.SystemRpc).RetrieveUserRole(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveUserRoleResult)
		realResult.Success = success
	}
	return nil
}
func newRetrieveUserRoleArgs() interface{} {
	return &RetrieveUserRoleArgs{}
}

func newRetrieveUserRoleResult() interface{} {
	return &RetrieveUserRoleResult{}
}

type RetrieveUserRoleArgs struct {
	Req *system.RetrieveUserRoleReq
}

func (p *RetrieveUserRoleArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.RetrieveUserRoleReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveUserRoleArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveUserRoleArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveUserRoleArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RetrieveUserRoleArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveUserRoleArgs) Unmarshal(in []byte) error {
	msg := new(system.RetrieveUserRoleReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveUserRoleArgs_Req_DEFAULT *system.RetrieveUserRoleReq

func (p *RetrieveUserRoleArgs) GetReq() *system.RetrieveUserRoleReq {
	if !p.IsSetReq() {
		return RetrieveUserRoleArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveUserRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveUserRoleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveUserRoleResult struct {
	Success *system.RetrieveUserRoleResp
}

var RetrieveUserRoleResult_Success_DEFAULT *system.RetrieveUserRoleResp

func (p *RetrieveUserRoleResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.RetrieveUserRoleResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveUserRoleResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveUserRoleResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveUserRoleResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RetrieveUserRoleResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveUserRoleResult) Unmarshal(in []byte) error {
	msg := new(system.RetrieveUserRoleResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveUserRoleResult) GetSuccess() *system.RetrieveUserRoleResp {
	if !p.IsSetSuccess() {
		return RetrieveUserRoleResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveUserRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.RetrieveUserRoleResp)
}

func (p *RetrieveUserRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveUserRoleResult) GetResult() interface{} {
	return p.Success
}

func updateUserRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateUserRoleReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).UpdateUserRole(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateUserRoleArgs:
		success, err := handler.(system.SystemRpc).UpdateUserRole(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserRoleResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateUserRoleArgs() interface{} {
	return &UpdateUserRoleArgs{}
}

func newUpdateUserRoleResult() interface{} {
	return &UpdateUserRoleResult{}
}

type UpdateUserRoleArgs struct {
	Req *system.UpdateUserRoleReq
}

func (p *UpdateUserRoleArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateUserRoleReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserRoleArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserRoleArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserRoleArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateUserRoleArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserRoleArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateUserRoleReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserRoleArgs_Req_DEFAULT *system.UpdateUserRoleReq

func (p *UpdateUserRoleArgs) GetReq() *system.UpdateUserRoleReq {
	if !p.IsSetReq() {
		return UpdateUserRoleArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserRoleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserRoleResult struct {
	Success *system.UpdateUserRoleResp
}

var UpdateUserRoleResult_Success_DEFAULT *system.UpdateUserRoleResp

func (p *UpdateUserRoleResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.UpdateUserRoleResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserRoleResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserRoleResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserRoleResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateUserRoleResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserRoleResult) Unmarshal(in []byte) error {
	msg := new(system.UpdateUserRoleResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserRoleResult) GetSuccess() *system.UpdateUserRoleResp {
	if !p.IsSetSuccess() {
		return UpdateUserRoleResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.UpdateUserRoleResp)
}

func (p *UpdateUserRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserRoleResult) GetResult() interface{} {
	return p.Success
}

func containsRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ContainsRoleReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).ContainsRole(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ContainsRoleArgs:
		success, err := handler.(system.SystemRpc).ContainsRole(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ContainsRoleResult)
		realResult.Success = success
	}
	return nil
}
func newContainsRoleArgs() interface{} {
	return &ContainsRoleArgs{}
}

func newContainsRoleResult() interface{} {
	return &ContainsRoleResult{}
}

type ContainsRoleArgs struct {
	Req *system.ContainsRoleReq
}

func (p *ContainsRoleArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ContainsRoleReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ContainsRoleArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ContainsRoleArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ContainsRoleArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ContainsRoleArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ContainsRoleArgs) Unmarshal(in []byte) error {
	msg := new(system.ContainsRoleReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ContainsRoleArgs_Req_DEFAULT *system.ContainsRoleReq

func (p *ContainsRoleArgs) GetReq() *system.ContainsRoleReq {
	if !p.IsSetReq() {
		return ContainsRoleArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ContainsRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ContainsRoleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ContainsRoleResult struct {
	Success *system.ContainsRoleResp
}

var ContainsRoleResult_Success_DEFAULT *system.ContainsRoleResp

func (p *ContainsRoleResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ContainsRoleResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ContainsRoleResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ContainsRoleResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ContainsRoleResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ContainsRoleResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ContainsRoleResult) Unmarshal(in []byte) error {
	msg := new(system.ContainsRoleResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ContainsRoleResult) GetSuccess() *system.ContainsRoleResp {
	if !p.IsSetSuccess() {
		return ContainsRoleResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ContainsRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ContainsRoleResp)
}

func (p *ContainsRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContainsRoleResult) GetResult() interface{} {
	return p.Success
}

func retrieveCommunityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.RetrieveCommunityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).RetrieveCommunity(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RetrieveCommunityArgs:
		success, err := handler.(system.SystemRpc).RetrieveCommunity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveCommunityResult)
		realResult.Success = success
	}
	return nil
}
func newRetrieveCommunityArgs() interface{} {
	return &RetrieveCommunityArgs{}
}

func newRetrieveCommunityResult() interface{} {
	return &RetrieveCommunityResult{}
}

type RetrieveCommunityArgs struct {
	Req *system.RetrieveCommunityReq
}

func (p *RetrieveCommunityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.RetrieveCommunityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveCommunityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveCommunityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveCommunityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RetrieveCommunityArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveCommunityArgs) Unmarshal(in []byte) error {
	msg := new(system.RetrieveCommunityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveCommunityArgs_Req_DEFAULT *system.RetrieveCommunityReq

func (p *RetrieveCommunityArgs) GetReq() *system.RetrieveCommunityReq {
	if !p.IsSetReq() {
		return RetrieveCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveCommunityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveCommunityResult struct {
	Success *system.RetrieveCommunityResp
}

var RetrieveCommunityResult_Success_DEFAULT *system.RetrieveCommunityResp

func (p *RetrieveCommunityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.RetrieveCommunityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveCommunityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveCommunityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveCommunityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RetrieveCommunityResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveCommunityResult) Unmarshal(in []byte) error {
	msg := new(system.RetrieveCommunityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveCommunityResult) GetSuccess() *system.RetrieveCommunityResp {
	if !p.IsSetSuccess() {
		return RetrieveCommunityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveCommunityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.RetrieveCommunityResp)
}

func (p *RetrieveCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveCommunityResult) GetResult() interface{} {
	return p.Success
}

func listCommunityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ListCommunityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).ListCommunity(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListCommunityArgs:
		success, err := handler.(system.SystemRpc).ListCommunity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListCommunityResult)
		realResult.Success = success
	}
	return nil
}
func newListCommunityArgs() interface{} {
	return &ListCommunityArgs{}
}

func newListCommunityResult() interface{} {
	return &ListCommunityResult{}
}

type ListCommunityArgs struct {
	Req *system.ListCommunityReq
}

func (p *ListCommunityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ListCommunityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListCommunityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListCommunityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListCommunityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListCommunityArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListCommunityArgs) Unmarshal(in []byte) error {
	msg := new(system.ListCommunityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListCommunityArgs_Req_DEFAULT *system.ListCommunityReq

func (p *ListCommunityArgs) GetReq() *system.ListCommunityReq {
	if !p.IsSetReq() {
		return ListCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListCommunityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListCommunityResult struct {
	Success *system.ListCommunityResp
}

var ListCommunityResult_Success_DEFAULT *system.ListCommunityResp

func (p *ListCommunityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ListCommunityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListCommunityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListCommunityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListCommunityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListCommunityResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListCommunityResult) Unmarshal(in []byte) error {
	msg := new(system.ListCommunityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListCommunityResult) GetSuccess() *system.ListCommunityResp {
	if !p.IsSetSuccess() {
		return ListCommunityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListCommunityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ListCommunityResp)
}

func (p *ListCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListCommunityResult) GetResult() interface{} {
	return p.Success
}

func createCommunityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CreateCommunityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).CreateCommunity(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateCommunityArgs:
		success, err := handler.(system.SystemRpc).CreateCommunity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateCommunityResult)
		realResult.Success = success
	}
	return nil
}
func newCreateCommunityArgs() interface{} {
	return &CreateCommunityArgs{}
}

func newCreateCommunityResult() interface{} {
	return &CreateCommunityResult{}
}

type CreateCommunityArgs struct {
	Req *system.CreateCommunityReq
}

func (p *CreateCommunityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CreateCommunityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateCommunityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateCommunityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateCommunityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateCommunityArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateCommunityArgs) Unmarshal(in []byte) error {
	msg := new(system.CreateCommunityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateCommunityArgs_Req_DEFAULT *system.CreateCommunityReq

func (p *CreateCommunityArgs) GetReq() *system.CreateCommunityReq {
	if !p.IsSetReq() {
		return CreateCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateCommunityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateCommunityResult struct {
	Success *system.CreateCommunityResp
}

var CreateCommunityResult_Success_DEFAULT *system.CreateCommunityResp

func (p *CreateCommunityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.CreateCommunityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateCommunityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateCommunityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateCommunityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateCommunityResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateCommunityResult) Unmarshal(in []byte) error {
	msg := new(system.CreateCommunityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateCommunityResult) GetSuccess() *system.CreateCommunityResp {
	if !p.IsSetSuccess() {
		return CreateCommunityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateCommunityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.CreateCommunityResp)
}

func (p *CreateCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateCommunityResult) GetResult() interface{} {
	return p.Success
}

func updateCommunityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateCommunityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).UpdateCommunity(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateCommunityArgs:
		success, err := handler.(system.SystemRpc).UpdateCommunity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCommunityResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateCommunityArgs() interface{} {
	return &UpdateCommunityArgs{}
}

func newUpdateCommunityResult() interface{} {
	return &UpdateCommunityResult{}
}

type UpdateCommunityArgs struct {
	Req *system.UpdateCommunityReq
}

func (p *UpdateCommunityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateCommunityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCommunityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCommunityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCommunityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateCommunityArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCommunityArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateCommunityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCommunityArgs_Req_DEFAULT *system.UpdateCommunityReq

func (p *UpdateCommunityArgs) GetReq() *system.UpdateCommunityReq {
	if !p.IsSetReq() {
		return UpdateCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCommunityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCommunityResult struct {
	Success *system.UpdateCommunityResp
}

var UpdateCommunityResult_Success_DEFAULT *system.UpdateCommunityResp

func (p *UpdateCommunityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.UpdateCommunityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCommunityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCommunityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCommunityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateCommunityResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCommunityResult) Unmarshal(in []byte) error {
	msg := new(system.UpdateCommunityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCommunityResult) GetSuccess() *system.UpdateCommunityResp {
	if !p.IsSetSuccess() {
		return UpdateCommunityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCommunityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.UpdateCommunityResp)
}

func (p *UpdateCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCommunityResult) GetResult() interface{} {
	return p.Success
}

func deleteCommunityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.DeleteCommunityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemRpc).DeleteCommunity(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCommunityArgs:
		success, err := handler.(system.SystemRpc).DeleteCommunity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommunityResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCommunityArgs() interface{} {
	return &DeleteCommunityArgs{}
}

func newDeleteCommunityResult() interface{} {
	return &DeleteCommunityResult{}
}

type DeleteCommunityArgs struct {
	Req *system.DeleteCommunityReq
}

func (p *DeleteCommunityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.DeleteCommunityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCommunityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCommunityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCommunityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteCommunityArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommunityArgs) Unmarshal(in []byte) error {
	msg := new(system.DeleteCommunityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommunityArgs_Req_DEFAULT *system.DeleteCommunityReq

func (p *DeleteCommunityArgs) GetReq() *system.DeleteCommunityReq {
	if !p.IsSetReq() {
		return DeleteCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCommunityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCommunityResult struct {
	Success *system.DeleteCommunityResp
}

var DeleteCommunityResult_Success_DEFAULT *system.DeleteCommunityResp

func (p *DeleteCommunityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.DeleteCommunityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCommunityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCommunityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCommunityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteCommunityResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommunityResult) Unmarshal(in []byte) error {
	msg := new(system.DeleteCommunityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommunityResult) GetSuccess() *system.DeleteCommunityResp {
	if !p.IsSetSuccess() {
		return DeleteCommunityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommunityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.DeleteCommunityResp)
}

func (p *DeleteCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCommunityResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RetrieveNotice(ctx context.Context, Req *system.RetrieveNoticeReq) (r *system.RetrieveNoticeResp, err error) {
	var _args RetrieveNoticeArgs
	_args.Req = Req
	var _result RetrieveNoticeResult
	if err = p.c.Call(ctx, "RetrieveNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNotice(ctx context.Context, Req *system.ListNoticeReq) (r *system.ListNoticeResp, err error) {
	var _args ListNoticeArgs
	_args.Req = Req
	var _result ListNoticeResult
	if err = p.c.Call(ctx, "ListNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateNotice(ctx context.Context, Req *system.CreateNoticeReq) (r *system.CreateNoticeResp, err error) {
	var _args CreateNoticeArgs
	_args.Req = Req
	var _result CreateNoticeResult
	if err = p.c.Call(ctx, "CreateNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNotice(ctx context.Context, Req *system.UpdateNoticeReq) (r *system.UpdateNoticeResp, err error) {
	var _args UpdateNoticeArgs
	_args.Req = Req
	var _result UpdateNoticeResult
	if err = p.c.Call(ctx, "UpdateNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNotice(ctx context.Context, Req *system.DeleteNoticeReq) (r *system.DeleteNoticeResp, err error) {
	var _args DeleteNoticeArgs
	_args.Req = Req
	var _result DeleteNoticeResult
	if err = p.c.Call(ctx, "DeleteNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrieveNews(ctx context.Context, Req *system.RetrieveNewsReq) (r *system.RetrieveNewsResp, err error) {
	var _args RetrieveNewsArgs
	_args.Req = Req
	var _result RetrieveNewsResult
	if err = p.c.Call(ctx, "RetrieveNews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNews(ctx context.Context, Req *system.ListNewsReq) (r *system.ListNewsResp, err error) {
	var _args ListNewsArgs
	_args.Req = Req
	var _result ListNewsResult
	if err = p.c.Call(ctx, "ListNews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateNews(ctx context.Context, Req *system.CreateNewsReq) (r *system.CreateNewsResp, err error) {
	var _args CreateNewsArgs
	_args.Req = Req
	var _result CreateNewsResult
	if err = p.c.Call(ctx, "CreateNews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNews(ctx context.Context, Req *system.UpdateNewsReq) (r *system.UpdateNewsResp, err error) {
	var _args UpdateNewsArgs
	_args.Req = Req
	var _result UpdateNewsResult
	if err = p.c.Call(ctx, "UpdateNews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNews(ctx context.Context, Req *system.DeleteNewsReq) (r *system.DeleteNewsResp, err error) {
	var _args DeleteNewsArgs
	_args.Req = Req
	var _result DeleteNewsResult
	if err = p.c.Call(ctx, "DeleteNews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrieveAdmin(ctx context.Context, Req *system.RetrieveAdminReq) (r *system.RetrieveAdminResp, err error) {
	var _args RetrieveAdminArgs
	_args.Req = Req
	var _result RetrieveAdminResult
	if err = p.c.Call(ctx, "RetrieveAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAdmin(ctx context.Context, Req *system.ListAdminReq) (r *system.ListAdminResp, err error) {
	var _args ListAdminArgs
	_args.Req = Req
	var _result ListAdminResult
	if err = p.c.Call(ctx, "ListAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateAdmin(ctx context.Context, Req *system.CreateAdminReq) (r *system.CreateAdminResp, err error) {
	var _args CreateAdminArgs
	_args.Req = Req
	var _result CreateAdminResult
	if err = p.c.Call(ctx, "CreateAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateAdmin(ctx context.Context, Req *system.UpdateAdminReq) (r *system.UpdateAdminResp, err error) {
	var _args UpdateAdminArgs
	_args.Req = Req
	var _result UpdateAdminResult
	if err = p.c.Call(ctx, "UpdateAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAdmin(ctx context.Context, Req *system.DeleteAdminReq) (r *system.DeleteAdminResp, err error) {
	var _args DeleteAdminArgs
	_args.Req = Req
	var _result DeleteAdminResult
	if err = p.c.Call(ctx, "DeleteAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrieveUserRole(ctx context.Context, Req *system.RetrieveUserRoleReq) (r *system.RetrieveUserRoleResp, err error) {
	var _args RetrieveUserRoleArgs
	_args.Req = Req
	var _result RetrieveUserRoleResult
	if err = p.c.Call(ctx, "RetrieveUserRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserRole(ctx context.Context, Req *system.UpdateUserRoleReq) (r *system.UpdateUserRoleResp, err error) {
	var _args UpdateUserRoleArgs
	_args.Req = Req
	var _result UpdateUserRoleResult
	if err = p.c.Call(ctx, "UpdateUserRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ContainsRole(ctx context.Context, Req *system.ContainsRoleReq) (r *system.ContainsRoleResp, err error) {
	var _args ContainsRoleArgs
	_args.Req = Req
	var _result ContainsRoleResult
	if err = p.c.Call(ctx, "ContainsRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrieveCommunity(ctx context.Context, Req *system.RetrieveCommunityReq) (r *system.RetrieveCommunityResp, err error) {
	var _args RetrieveCommunityArgs
	_args.Req = Req
	var _result RetrieveCommunityResult
	if err = p.c.Call(ctx, "RetrieveCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCommunity(ctx context.Context, Req *system.ListCommunityReq) (r *system.ListCommunityResp, err error) {
	var _args ListCommunityArgs
	_args.Req = Req
	var _result ListCommunityResult
	if err = p.c.Call(ctx, "ListCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCommunity(ctx context.Context, Req *system.CreateCommunityReq) (r *system.CreateCommunityResp, err error) {
	var _args CreateCommunityArgs
	_args.Req = Req
	var _result CreateCommunityResult
	if err = p.c.Call(ctx, "CreateCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCommunity(ctx context.Context, Req *system.UpdateCommunityReq) (r *system.UpdateCommunityResp, err error) {
	var _args UpdateCommunityArgs
	_args.Req = Req
	var _result UpdateCommunityResult
	if err = p.c.Call(ctx, "UpdateCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCommunity(ctx context.Context, Req *system.DeleteCommunityReq) (r *system.DeleteCommunityResp, err error) {
	var _args DeleteCommunityArgs
	_args.Req = Req
	var _result DeleteCommunityResult
	if err = p.c.Call(ctx, "DeleteCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
