// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package like

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "github.com/xh-polaris/service-idl-gen-go/kitex_gen/base"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *DoLikeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DoLikeReq[number], err)
}

func (x *DoLikeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DoLikeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TargetId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DoLikeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DoLikeReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AssociatedId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DoLikeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DoLikeResp[number], err)
}

func (x *DoLikeResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *GetUserLikedReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserLikedReq[number], err)
}

func (x *GetUserLikedReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserLikedReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TargetId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserLikedReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserLikedResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserLikedResp[number], err)
}

func (x *GetUserLikedResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Liked, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetUserLikedResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *GetTargetLikesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTargetLikesReq[number], err)
}

func (x *GetTargetLikesReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TargetId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetTargetLikesReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTargetLikesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTargetLikesResp[number], err)
}

func (x *GetTargetLikesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTargetLikesResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *GetUserLikesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserLikesReq[number], err)
}

func (x *GetUserLikesReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserLikesReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TargetType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserLikesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserLikesResp[number], err)
}

func (x *GetUserLikesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Like
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Likes = append(x.Likes, &v)
	return offset, nil
}

func (x *GetUserLikesResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *GetLikedUsersReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLikedUsersReq[number], err)
}

func (x *GetLikedUsersReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TargetId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetLikedUsersReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TargetType, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetLikedUsersResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLikedUsersResp[number], err)
}

func (x *GetLikedUsersResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.UserIds = append(x.UserIds, v)
	return offset, err
}

func (x *GetLikedUsersResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *GetTopKReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTopKReq[number], err)
}

func (x *GetTopKReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.K, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTopKReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetTopKReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Range, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ItemScore) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ItemScore[number], err)
}

func (x *ItemScore) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ItemScore) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Score, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTopKResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTopKResp[number], err)
}

func (x *GetTopKResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ItemScore
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Item = append(x.Item, &v)
	return offset, nil
}

func (x *GetTopKResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *AddScoreReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddScoreReq[number], err)
}

func (x *AddScoreReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddScoreReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddScoreReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Val, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AddScoreResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddScoreResp[number], err)
}

func (x *AddScoreResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Val, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AddScoreResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *DailyUpdateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DailyUpdateResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DailyUpdateResp[number], err)
}

func (x *DailyUpdateResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *ListCatPopularityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCatPopularityReq[number], err)
}

func (x *ListCatPopularityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.CatId = append(x.CatId, v)
	return offset, err
}

func (x *CatPop) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CatPop[number], err)
}

func (x *CatPop) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatPop) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Popularity, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCatPopularityResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCatPopularityResp[number], err)
}

func (x *ListCatPopularityResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatPop
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cats = append(x.Cats, &v)
	return offset, nil
}

func (x *ListCatPopularityResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *AddCatPopularityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddCatPopularityReq[number], err)
}

func (x *AddCatPopularityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddCatPopularityReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Val, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AddCatPopularityResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddCatPopularityResp[number], err)
}

func (x *AddCatPopularityResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *ListTopCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListTopCatReq[number], err)
}

func (x *ListTopCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.K, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListTopCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListTopCatResp[number], err)
}

func (x *ListTopCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatPop
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cats = append(x.Cats, &v)
	return offset, nil
}

func (x *ListTopCatResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *DoLikeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *DoLikeReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *DoLikeReq) fastWriteField2(buf []byte) (offset int) {
	if x.TargetId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTargetId())
	return offset
}

func (x *DoLikeReq) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetType())
	return offset
}

func (x *DoLikeReq) fastWriteField4(buf []byte) (offset int) {
	if x.AssociatedId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetAssociatedId())
	return offset
}

func (x *DoLikeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *DoLikeResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *GetUserLikedReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetUserLikedReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetUserLikedReq) fastWriteField2(buf []byte) (offset int) {
	if x.TargetId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTargetId())
	return offset
}

func (x *GetUserLikedReq) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetType())
	return offset
}

func (x *GetUserLikedResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *GetUserLikedResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Liked {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetLiked())
	return offset
}

func (x *GetUserLikedResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *GetTargetLikesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetTargetLikesReq) fastWriteField1(buf []byte) (offset int) {
	if x.TargetId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTargetId())
	return offset
}

func (x *GetTargetLikesReq) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetType())
	return offset
}

func (x *GetTargetLikesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *GetTargetLikesResp) fastWriteField1(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCount())
	return offset
}

func (x *GetTargetLikesResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *GetUserLikesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetUserLikesReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetUserLikesReq) fastWriteField2(buf []byte) (offset int) {
	if x.TargetType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTargetType())
	return offset
}

func (x *GetUserLikesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *GetUserLikesResp) fastWriteField1(buf []byte) (offset int) {
	if x.Likes == nil {
		return offset
	}
	for i := range x.GetLikes() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLikes()[i])
	}
	return offset
}

func (x *GetUserLikesResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *GetLikedUsersReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetLikedUsersReq) fastWriteField1(buf []byte) (offset int) {
	if x.TargetId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTargetId())
	return offset
}

func (x *GetLikedUsersReq) fastWriteField2(buf []byte) (offset int) {
	if x.TargetType == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTargetType())
	return offset
}

func (x *GetLikedUsersResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *GetLikedUsersResp) fastWriteField1(buf []byte) (offset int) {
	if len(x.UserIds) == 0 {
		return offset
	}
	for i := range x.GetUserIds() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetUserIds()[i])
	}
	return offset
}

func (x *GetLikedUsersResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *GetTopKReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetTopKReq) fastWriteField1(buf []byte) (offset int) {
	if x.K == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetK())
	return offset
}

func (x *GetTopKReq) fastWriteField2(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetType())
	return offset
}

func (x *GetTopKReq) fastWriteField3(buf []byte) (offset int) {
	if x.Range == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetRange())
	return offset
}

func (x *ItemScore) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ItemScore) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ItemScore) fastWriteField2(buf []byte) (offset int) {
	if x.Score == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetScore())
	return offset
}

func (x *GetTopKResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *GetTopKResp) fastWriteField1(buf []byte) (offset int) {
	if x.Item == nil {
		return offset
	}
	for i := range x.GetItem() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetItem()[i])
	}
	return offset
}

func (x *GetTopKResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *AddScoreReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *AddScoreReq) fastWriteField1(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetType())
	return offset
}

func (x *AddScoreReq) fastWriteField2(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetId())
	return offset
}

func (x *AddScoreReq) fastWriteField3(buf []byte) (offset int) {
	if x.Val == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetVal())
	return offset
}

func (x *AddScoreResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *AddScoreResp) fastWriteField1(buf []byte) (offset int) {
	if x.Val == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetVal())
	return offset
}

func (x *AddScoreResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *DailyUpdateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DailyUpdateResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *DailyUpdateResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *ListCatPopularityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListCatPopularityReq) fastWriteField1(buf []byte) (offset int) {
	if len(x.CatId) == 0 {
		return offset
	}
	for i := range x.GetCatId() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId()[i])
	}
	return offset
}

func (x *CatPop) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CatPop) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *CatPop) fastWriteField2(buf []byte) (offset int) {
	if x.Popularity == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPopularity())
	return offset
}

func (x *ListCatPopularityResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *ListCatPopularityResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cats == nil {
		return offset
	}
	for i := range x.GetCats() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCats()[i])
	}
	return offset
}

func (x *ListCatPopularityResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *AddCatPopularityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AddCatPopularityReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *AddCatPopularityReq) fastWriteField2(buf []byte) (offset int) {
	if x.Val == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetVal())
	return offset
}

func (x *AddCatPopularityResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *AddCatPopularityResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *ListTopCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListTopCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.K == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetK())
	return offset
}

func (x *ListTopCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *ListTopCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cats == nil {
		return offset
	}
	for i := range x.GetCats() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCats()[i])
	}
	return offset
}

func (x *ListTopCatResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *DoLikeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *DoLikeReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *DoLikeReq) sizeField2() (n int) {
	if x.TargetId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTargetId())
	return n
}

func (x *DoLikeReq) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetType())
	return n
}

func (x *DoLikeReq) sizeField4() (n int) {
	if x.AssociatedId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetAssociatedId())
	return n
}

func (x *DoLikeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField255()
	return n
}

func (x *DoLikeResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *GetUserLikedReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetUserLikedReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetUserLikedReq) sizeField2() (n int) {
	if x.TargetId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTargetId())
	return n
}

func (x *GetUserLikedReq) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetType())
	return n
}

func (x *GetUserLikedResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *GetUserLikedResp) sizeField1() (n int) {
	if !x.Liked {
		return n
	}
	n += fastpb.SizeBool(1, x.GetLiked())
	return n
}

func (x *GetUserLikedResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *GetTargetLikesReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetTargetLikesReq) sizeField1() (n int) {
	if x.TargetId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTargetId())
	return n
}

func (x *GetTargetLikesReq) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetType())
	return n
}

func (x *GetTargetLikesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *GetTargetLikesResp) sizeField1() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCount())
	return n
}

func (x *GetTargetLikesResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *GetUserLikesReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetUserLikesReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetUserLikesReq) sizeField2() (n int) {
	if x.TargetType == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTargetType())
	return n
}

func (x *GetUserLikesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *GetUserLikesResp) sizeField1() (n int) {
	if x.Likes == nil {
		return n
	}
	for i := range x.GetLikes() {
		n += fastpb.SizeMessage(1, x.GetLikes()[i])
	}
	return n
}

func (x *GetUserLikesResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *GetLikedUsersReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetLikedUsersReq) sizeField1() (n int) {
	if x.TargetId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTargetId())
	return n
}

func (x *GetLikedUsersReq) sizeField2() (n int) {
	if x.TargetType == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTargetType())
	return n
}

func (x *GetLikedUsersResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *GetLikedUsersResp) sizeField1() (n int) {
	if len(x.UserIds) == 0 {
		return n
	}
	for i := range x.GetUserIds() {
		n += fastpb.SizeString(1, x.GetUserIds()[i])
	}
	return n
}

func (x *GetLikedUsersResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *GetTopKReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetTopKReq) sizeField1() (n int) {
	if x.K == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetK())
	return n
}

func (x *GetTopKReq) sizeField2() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetType())
	return n
}

func (x *GetTopKReq) sizeField3() (n int) {
	if x.Range == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetRange())
	return n
}

func (x *ItemScore) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ItemScore) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *ItemScore) sizeField2() (n int) {
	if x.Score == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetScore())
	return n
}

func (x *GetTopKResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *GetTopKResp) sizeField1() (n int) {
	if x.Item == nil {
		return n
	}
	for i := range x.GetItem() {
		n += fastpb.SizeMessage(1, x.GetItem()[i])
	}
	return n
}

func (x *GetTopKResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *AddScoreReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *AddScoreReq) sizeField1() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetType())
	return n
}

func (x *AddScoreReq) sizeField2() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetId())
	return n
}

func (x *AddScoreReq) sizeField3() (n int) {
	if x.Val == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetVal())
	return n
}

func (x *AddScoreResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *AddScoreResp) sizeField1() (n int) {
	if x.Val == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetVal())
	return n
}

func (x *AddScoreResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *DailyUpdateReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DailyUpdateResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField255()
	return n
}

func (x *DailyUpdateResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *ListCatPopularityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListCatPopularityReq) sizeField1() (n int) {
	if len(x.CatId) == 0 {
		return n
	}
	for i := range x.GetCatId() {
		n += fastpb.SizeString(1, x.GetCatId()[i])
	}
	return n
}

func (x *CatPop) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CatPop) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *CatPop) sizeField2() (n int) {
	if x.Popularity == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPopularity())
	return n
}

func (x *ListCatPopularityResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *ListCatPopularityResp) sizeField1() (n int) {
	if x.Cats == nil {
		return n
	}
	for i := range x.GetCats() {
		n += fastpb.SizeMessage(1, x.GetCats()[i])
	}
	return n
}

func (x *ListCatPopularityResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *AddCatPopularityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AddCatPopularityReq) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *AddCatPopularityReq) sizeField2() (n int) {
	if x.Val == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetVal())
	return n
}

func (x *AddCatPopularityResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField255()
	return n
}

func (x *AddCatPopularityResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *ListTopCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListTopCatReq) sizeField1() (n int) {
	if x.K == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetK())
	return n
}

func (x *ListTopCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *ListTopCatResp) sizeField1() (n int) {
	if x.Cats == nil {
		return n
	}
	for i := range x.GetCats() {
		n += fastpb.SizeMessage(1, x.GetCats()[i])
	}
	return n
}

func (x *ListTopCatResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

var fieldIDToName_DoLikeReq = map[int32]string{
	1: "UserId",
	2: "TargetId",
	3: "Type",
	4: "AssociatedId",
}

var fieldIDToName_DoLikeResp = map[int32]string{
	255: "Status",
}

var fieldIDToName_GetUserLikedReq = map[int32]string{
	1: "UserId",
	2: "TargetId",
	3: "Type",
}

var fieldIDToName_GetUserLikedResp = map[int32]string{
	1:   "Liked",
	255: "Status",
}

var fieldIDToName_GetTargetLikesReq = map[int32]string{
	1: "TargetId",
	2: "Type",
}

var fieldIDToName_GetTargetLikesResp = map[int32]string{
	1:   "Count",
	255: "Status",
}

var fieldIDToName_GetUserLikesReq = map[int32]string{
	1: "UserId",
	2: "TargetType",
}

var fieldIDToName_GetUserLikesResp = map[int32]string{
	1:   "Likes",
	255: "Status",
}

var fieldIDToName_GetLikedUsersReq = map[int32]string{
	1: "TargetId",
	2: "TargetType",
}

var fieldIDToName_GetLikedUsersResp = map[int32]string{
	1:   "UserIds",
	255: "Status",
}

var fieldIDToName_GetTopKReq = map[int32]string{
	1: "K",
	2: "Type",
	3: "Range",
}

var fieldIDToName_ItemScore = map[int32]string{
	1: "Id",
	2: "Score",
}

var fieldIDToName_GetTopKResp = map[int32]string{
	1:   "Item",
	255: "Status",
}

var fieldIDToName_AddScoreReq = map[int32]string{
	1: "Type",
	2: "Id",
	3: "Val",
}

var fieldIDToName_AddScoreResp = map[int32]string{
	1:   "Val",
	255: "Status",
}

var fieldIDToName_DailyUpdateReq = map[int32]string{}

var fieldIDToName_DailyUpdateResp = map[int32]string{
	255: "Status",
}

var fieldIDToName_ListCatPopularityReq = map[int32]string{
	1: "CatId",
}

var fieldIDToName_CatPop = map[int32]string{
	1: "CatId",
	2: "Popularity",
}

var fieldIDToName_ListCatPopularityResp = map[int32]string{
	1:   "Cats",
	255: "Status",
}

var fieldIDToName_AddCatPopularityReq = map[int32]string{
	1: "CatId",
	2: "Val",
}

var fieldIDToName_AddCatPopularityResp = map[int32]string{
	255: "Status",
}

var fieldIDToName_ListTopCatReq = map[int32]string{
	1: "K",
}

var fieldIDToName_ListTopCatResp = map[int32]string{
	1:   "Cats",
	255: "Status",
}

var _ = base.File_base_status_proto
