// Code generated by Kitex v0.6.2. DO NOT EDIT.

package likeservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	like "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/like"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return likeServiceServiceInfo
}

var likeServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LikeService"
	handlerType := (*like.LikeService)(nil)
	methods := map[string]kitex.MethodInfo{
		"DoLike":            kitex.NewMethodInfo(doLikeHandler, newDoLikeArgs, newDoLikeResult, false),
		"GetUserLike":       kitex.NewMethodInfo(getUserLikeHandler, newGetUserLikeArgs, newGetUserLikeResult, false),
		"GetTargetLikes":    kitex.NewMethodInfo(getTargetLikesHandler, newGetTargetLikesArgs, newGetTargetLikesResult, false),
		"GetUserLikes":      kitex.NewMethodInfo(getUserLikesHandler, newGetUserLikesArgs, newGetUserLikesResult, false),
		"GetLikedUsers":     kitex.NewMethodInfo(getLikedUsersHandler, newGetLikedUsersArgs, newGetLikedUsersResult, false),
		"GetTopK":           kitex.NewMethodInfo(getTopKHandler, newGetTopKArgs, newGetTopKResult, false),
		"AddScore":          kitex.NewMethodInfo(addScoreHandler, newAddScoreArgs, newAddScoreResult, false),
		"DailyUpdate":       kitex.NewMethodInfo(dailyUpdateHandler, newDailyUpdateArgs, newDailyUpdateResult, false),
		"ListCatPopularity": kitex.NewMethodInfo(listCatPopularityHandler, newListCatPopularityArgs, newListCatPopularityResult, false),
		"AddCatPopularity":  kitex.NewMethodInfo(addCatPopularityHandler, newAddCatPopularityArgs, newAddCatPopularityResult, false),
		"ListTopCat":        kitex.NewMethodInfo(listTopCatHandler, newListTopCatArgs, newListTopCatResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "meowchat.like",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func doLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.DoLikeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).DoLike(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DoLikeArgs:
		success, err := handler.(like.LikeService).DoLike(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoLikeResult)
		realResult.Success = success
	}
	return nil
}
func newDoLikeArgs() interface{} {
	return &DoLikeArgs{}
}

func newDoLikeResult() interface{} {
	return &DoLikeResult{}
}

type DoLikeArgs struct {
	Req *like.DoLikeReq
}

func (p *DoLikeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.DoLikeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoLikeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoLikeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoLikeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DoLikeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DoLikeArgs) Unmarshal(in []byte) error {
	msg := new(like.DoLikeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoLikeArgs_Req_DEFAULT *like.DoLikeReq

func (p *DoLikeArgs) GetReq() *like.DoLikeReq {
	if !p.IsSetReq() {
		return DoLikeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoLikeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoLikeResult struct {
	Success *like.DoLikeResp
}

var DoLikeResult_Success_DEFAULT *like.DoLikeResp

func (p *DoLikeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.DoLikeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoLikeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoLikeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoLikeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DoLikeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DoLikeResult) Unmarshal(in []byte) error {
	msg := new(like.DoLikeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoLikeResult) GetSuccess() *like.DoLikeResp {
	if !p.IsSetSuccess() {
		return DoLikeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.DoLikeResp)
}

func (p *DoLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoLikeResult) GetResult() interface{} {
	return p.Success
}

func getUserLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.GetUserLikedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).GetUserLike(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserLikeArgs:
		success, err := handler.(like.LikeService).GetUserLike(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserLikeResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserLikeArgs() interface{} {
	return &GetUserLikeArgs{}
}

func newGetUserLikeResult() interface{} {
	return &GetUserLikeResult{}
}

type GetUserLikeArgs struct {
	Req *like.GetUserLikedReq
}

func (p *GetUserLikeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.GetUserLikedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserLikeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserLikeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserLikeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserLikeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserLikeArgs) Unmarshal(in []byte) error {
	msg := new(like.GetUserLikedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserLikeArgs_Req_DEFAULT *like.GetUserLikedReq

func (p *GetUserLikeArgs) GetReq() *like.GetUserLikedReq {
	if !p.IsSetReq() {
		return GetUserLikeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserLikeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserLikeResult struct {
	Success *like.GetUserLikedResp
}

var GetUserLikeResult_Success_DEFAULT *like.GetUserLikedResp

func (p *GetUserLikeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.GetUserLikedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserLikeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserLikeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserLikeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserLikeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserLikeResult) Unmarshal(in []byte) error {
	msg := new(like.GetUserLikedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserLikeResult) GetSuccess() *like.GetUserLikedResp {
	if !p.IsSetSuccess() {
		return GetUserLikeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.GetUserLikedResp)
}

func (p *GetUserLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserLikeResult) GetResult() interface{} {
	return p.Success
}

func getTargetLikesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.GetTargetLikesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).GetTargetLikes(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetTargetLikesArgs:
		success, err := handler.(like.LikeService).GetTargetLikes(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTargetLikesResult)
		realResult.Success = success
	}
	return nil
}
func newGetTargetLikesArgs() interface{} {
	return &GetTargetLikesArgs{}
}

func newGetTargetLikesResult() interface{} {
	return &GetTargetLikesResult{}
}

type GetTargetLikesArgs struct {
	Req *like.GetTargetLikesReq
}

func (p *GetTargetLikesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.GetTargetLikesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetTargetLikesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetTargetLikesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetTargetLikesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetTargetLikesArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetTargetLikesArgs) Unmarshal(in []byte) error {
	msg := new(like.GetTargetLikesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTargetLikesArgs_Req_DEFAULT *like.GetTargetLikesReq

func (p *GetTargetLikesArgs) GetReq() *like.GetTargetLikesReq {
	if !p.IsSetReq() {
		return GetTargetLikesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTargetLikesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetTargetLikesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetTargetLikesResult struct {
	Success *like.GetTargetLikesResp
}

var GetTargetLikesResult_Success_DEFAULT *like.GetTargetLikesResp

func (p *GetTargetLikesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.GetTargetLikesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetTargetLikesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetTargetLikesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetTargetLikesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetTargetLikesResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetTargetLikesResult) Unmarshal(in []byte) error {
	msg := new(like.GetTargetLikesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTargetLikesResult) GetSuccess() *like.GetTargetLikesResp {
	if !p.IsSetSuccess() {
		return GetTargetLikesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTargetLikesResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.GetTargetLikesResp)
}

func (p *GetTargetLikesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTargetLikesResult) GetResult() interface{} {
	return p.Success
}

func getUserLikesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.GetUserLikesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).GetUserLikes(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserLikesArgs:
		success, err := handler.(like.LikeService).GetUserLikes(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserLikesResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserLikesArgs() interface{} {
	return &GetUserLikesArgs{}
}

func newGetUserLikesResult() interface{} {
	return &GetUserLikesResult{}
}

type GetUserLikesArgs struct {
	Req *like.GetUserLikesReq
}

func (p *GetUserLikesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.GetUserLikesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserLikesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserLikesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserLikesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserLikesArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserLikesArgs) Unmarshal(in []byte) error {
	msg := new(like.GetUserLikesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserLikesArgs_Req_DEFAULT *like.GetUserLikesReq

func (p *GetUserLikesArgs) GetReq() *like.GetUserLikesReq {
	if !p.IsSetReq() {
		return GetUserLikesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserLikesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserLikesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserLikesResult struct {
	Success *like.GetUserLikesResp
}

var GetUserLikesResult_Success_DEFAULT *like.GetUserLikesResp

func (p *GetUserLikesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.GetUserLikesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserLikesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserLikesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserLikesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserLikesResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserLikesResult) Unmarshal(in []byte) error {
	msg := new(like.GetUserLikesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserLikesResult) GetSuccess() *like.GetUserLikesResp {
	if !p.IsSetSuccess() {
		return GetUserLikesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserLikesResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.GetUserLikesResp)
}

func (p *GetUserLikesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserLikesResult) GetResult() interface{} {
	return p.Success
}

func getLikedUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.GetLikedUsersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).GetLikedUsers(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLikedUsersArgs:
		success, err := handler.(like.LikeService).GetLikedUsers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLikedUsersResult)
		realResult.Success = success
	}
	return nil
}
func newGetLikedUsersArgs() interface{} {
	return &GetLikedUsersArgs{}
}

func newGetLikedUsersResult() interface{} {
	return &GetLikedUsersResult{}
}

type GetLikedUsersArgs struct {
	Req *like.GetLikedUsersReq
}

func (p *GetLikedUsersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.GetLikedUsersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLikedUsersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLikedUsersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLikedUsersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetLikedUsersArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetLikedUsersArgs) Unmarshal(in []byte) error {
	msg := new(like.GetLikedUsersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLikedUsersArgs_Req_DEFAULT *like.GetLikedUsersReq

func (p *GetLikedUsersArgs) GetReq() *like.GetLikedUsersReq {
	if !p.IsSetReq() {
		return GetLikedUsersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLikedUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLikedUsersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLikedUsersResult struct {
	Success *like.GetLikedUsersResp
}

var GetLikedUsersResult_Success_DEFAULT *like.GetLikedUsersResp

func (p *GetLikedUsersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.GetLikedUsersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLikedUsersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLikedUsersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLikedUsersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetLikedUsersResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetLikedUsersResult) Unmarshal(in []byte) error {
	msg := new(like.GetLikedUsersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLikedUsersResult) GetSuccess() *like.GetLikedUsersResp {
	if !p.IsSetSuccess() {
		return GetLikedUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLikedUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.GetLikedUsersResp)
}

func (p *GetLikedUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLikedUsersResult) GetResult() interface{} {
	return p.Success
}

func getTopKHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.GetTopKReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).GetTopK(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetTopKArgs:
		success, err := handler.(like.LikeService).GetTopK(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTopKResult)
		realResult.Success = success
	}
	return nil
}
func newGetTopKArgs() interface{} {
	return &GetTopKArgs{}
}

func newGetTopKResult() interface{} {
	return &GetTopKResult{}
}

type GetTopKArgs struct {
	Req *like.GetTopKReq
}

func (p *GetTopKArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.GetTopKReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetTopKArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetTopKArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetTopKArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetTopKArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetTopKArgs) Unmarshal(in []byte) error {
	msg := new(like.GetTopKReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTopKArgs_Req_DEFAULT *like.GetTopKReq

func (p *GetTopKArgs) GetReq() *like.GetTopKReq {
	if !p.IsSetReq() {
		return GetTopKArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTopKArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetTopKArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetTopKResult struct {
	Success *like.GetTopKResp
}

var GetTopKResult_Success_DEFAULT *like.GetTopKResp

func (p *GetTopKResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.GetTopKResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetTopKResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetTopKResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetTopKResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetTopKResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetTopKResult) Unmarshal(in []byte) error {
	msg := new(like.GetTopKResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTopKResult) GetSuccess() *like.GetTopKResp {
	if !p.IsSetSuccess() {
		return GetTopKResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTopKResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.GetTopKResp)
}

func (p *GetTopKResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTopKResult) GetResult() interface{} {
	return p.Success
}

func addScoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.AddScoreReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).AddScore(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddScoreArgs:
		success, err := handler.(like.LikeService).AddScore(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddScoreResult)
		realResult.Success = success
	}
	return nil
}
func newAddScoreArgs() interface{} {
	return &AddScoreArgs{}
}

func newAddScoreResult() interface{} {
	return &AddScoreResult{}
}

type AddScoreArgs struct {
	Req *like.AddScoreReq
}

func (p *AddScoreArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.AddScoreReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddScoreArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddScoreArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddScoreArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddScoreArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddScoreArgs) Unmarshal(in []byte) error {
	msg := new(like.AddScoreReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddScoreArgs_Req_DEFAULT *like.AddScoreReq

func (p *AddScoreArgs) GetReq() *like.AddScoreReq {
	if !p.IsSetReq() {
		return AddScoreArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddScoreArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddScoreArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddScoreResult struct {
	Success *like.AddScoreResp
}

var AddScoreResult_Success_DEFAULT *like.AddScoreResp

func (p *AddScoreResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.AddScoreResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddScoreResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddScoreResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddScoreResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddScoreResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddScoreResult) Unmarshal(in []byte) error {
	msg := new(like.AddScoreResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddScoreResult) GetSuccess() *like.AddScoreResp {
	if !p.IsSetSuccess() {
		return AddScoreResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddScoreResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.AddScoreResp)
}

func (p *AddScoreResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddScoreResult) GetResult() interface{} {
	return p.Success
}

func dailyUpdateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.DailyUpdateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).DailyUpdate(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DailyUpdateArgs:
		success, err := handler.(like.LikeService).DailyUpdate(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DailyUpdateResult)
		realResult.Success = success
	}
	return nil
}
func newDailyUpdateArgs() interface{} {
	return &DailyUpdateArgs{}
}

func newDailyUpdateResult() interface{} {
	return &DailyUpdateResult{}
}

type DailyUpdateArgs struct {
	Req *like.DailyUpdateReq
}

func (p *DailyUpdateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.DailyUpdateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DailyUpdateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DailyUpdateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DailyUpdateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DailyUpdateArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DailyUpdateArgs) Unmarshal(in []byte) error {
	msg := new(like.DailyUpdateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DailyUpdateArgs_Req_DEFAULT *like.DailyUpdateReq

func (p *DailyUpdateArgs) GetReq() *like.DailyUpdateReq {
	if !p.IsSetReq() {
		return DailyUpdateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DailyUpdateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DailyUpdateArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DailyUpdateResult struct {
	Success *like.DailyUpdateResp
}

var DailyUpdateResult_Success_DEFAULT *like.DailyUpdateResp

func (p *DailyUpdateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.DailyUpdateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DailyUpdateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DailyUpdateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DailyUpdateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DailyUpdateResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DailyUpdateResult) Unmarshal(in []byte) error {
	msg := new(like.DailyUpdateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DailyUpdateResult) GetSuccess() *like.DailyUpdateResp {
	if !p.IsSetSuccess() {
		return DailyUpdateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DailyUpdateResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.DailyUpdateResp)
}

func (p *DailyUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DailyUpdateResult) GetResult() interface{} {
	return p.Success
}

func listCatPopularityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.ListCatPopularityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).ListCatPopularity(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListCatPopularityArgs:
		success, err := handler.(like.LikeService).ListCatPopularity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListCatPopularityResult)
		realResult.Success = success
	}
	return nil
}
func newListCatPopularityArgs() interface{} {
	return &ListCatPopularityArgs{}
}

func newListCatPopularityResult() interface{} {
	return &ListCatPopularityResult{}
}

type ListCatPopularityArgs struct {
	Req *like.ListCatPopularityReq
}

func (p *ListCatPopularityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.ListCatPopularityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListCatPopularityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListCatPopularityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListCatPopularityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListCatPopularityArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListCatPopularityArgs) Unmarshal(in []byte) error {
	msg := new(like.ListCatPopularityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListCatPopularityArgs_Req_DEFAULT *like.ListCatPopularityReq

func (p *ListCatPopularityArgs) GetReq() *like.ListCatPopularityReq {
	if !p.IsSetReq() {
		return ListCatPopularityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListCatPopularityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListCatPopularityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListCatPopularityResult struct {
	Success *like.ListCatPopularityResp
}

var ListCatPopularityResult_Success_DEFAULT *like.ListCatPopularityResp

func (p *ListCatPopularityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.ListCatPopularityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListCatPopularityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListCatPopularityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListCatPopularityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListCatPopularityResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListCatPopularityResult) Unmarshal(in []byte) error {
	msg := new(like.ListCatPopularityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListCatPopularityResult) GetSuccess() *like.ListCatPopularityResp {
	if !p.IsSetSuccess() {
		return ListCatPopularityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListCatPopularityResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.ListCatPopularityResp)
}

func (p *ListCatPopularityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListCatPopularityResult) GetResult() interface{} {
	return p.Success
}

func addCatPopularityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.AddCatPopularityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).AddCatPopularity(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddCatPopularityArgs:
		success, err := handler.(like.LikeService).AddCatPopularity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddCatPopularityResult)
		realResult.Success = success
	}
	return nil
}
func newAddCatPopularityArgs() interface{} {
	return &AddCatPopularityArgs{}
}

func newAddCatPopularityResult() interface{} {
	return &AddCatPopularityResult{}
}

type AddCatPopularityArgs struct {
	Req *like.AddCatPopularityReq
}

func (p *AddCatPopularityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.AddCatPopularityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddCatPopularityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddCatPopularityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddCatPopularityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddCatPopularityArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddCatPopularityArgs) Unmarshal(in []byte) error {
	msg := new(like.AddCatPopularityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddCatPopularityArgs_Req_DEFAULT *like.AddCatPopularityReq

func (p *AddCatPopularityArgs) GetReq() *like.AddCatPopularityReq {
	if !p.IsSetReq() {
		return AddCatPopularityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddCatPopularityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddCatPopularityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddCatPopularityResult struct {
	Success *like.AddCatPopularityResp
}

var AddCatPopularityResult_Success_DEFAULT *like.AddCatPopularityResp

func (p *AddCatPopularityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.AddCatPopularityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddCatPopularityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddCatPopularityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddCatPopularityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddCatPopularityResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddCatPopularityResult) Unmarshal(in []byte) error {
	msg := new(like.AddCatPopularityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddCatPopularityResult) GetSuccess() *like.AddCatPopularityResp {
	if !p.IsSetSuccess() {
		return AddCatPopularityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddCatPopularityResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.AddCatPopularityResp)
}

func (p *AddCatPopularityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddCatPopularityResult) GetResult() interface{} {
	return p.Success
}

func listTopCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(like.ListTopCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(like.LikeService).ListTopCat(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListTopCatArgs:
		success, err := handler.(like.LikeService).ListTopCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListTopCatResult)
		realResult.Success = success
	}
	return nil
}
func newListTopCatArgs() interface{} {
	return &ListTopCatArgs{}
}

func newListTopCatResult() interface{} {
	return &ListTopCatResult{}
}

type ListTopCatArgs struct {
	Req *like.ListTopCatReq
}

func (p *ListTopCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(like.ListTopCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListTopCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListTopCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListTopCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListTopCatArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListTopCatArgs) Unmarshal(in []byte) error {
	msg := new(like.ListTopCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListTopCatArgs_Req_DEFAULT *like.ListTopCatReq

func (p *ListTopCatArgs) GetReq() *like.ListTopCatReq {
	if !p.IsSetReq() {
		return ListTopCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListTopCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListTopCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListTopCatResult struct {
	Success *like.ListTopCatResp
}

var ListTopCatResult_Success_DEFAULT *like.ListTopCatResp

func (p *ListTopCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(like.ListTopCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListTopCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListTopCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListTopCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListTopCatResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListTopCatResult) Unmarshal(in []byte) error {
	msg := new(like.ListTopCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListTopCatResult) GetSuccess() *like.ListTopCatResp {
	if !p.IsSetSuccess() {
		return ListTopCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListTopCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*like.ListTopCatResp)
}

func (p *ListTopCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListTopCatResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DoLike(ctx context.Context, Req *like.DoLikeReq) (r *like.DoLikeResp, err error) {
	var _args DoLikeArgs
	_args.Req = Req
	var _result DoLikeResult
	if err = p.c.Call(ctx, "DoLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserLike(ctx context.Context, Req *like.GetUserLikedReq) (r *like.GetUserLikedResp, err error) {
	var _args GetUserLikeArgs
	_args.Req = Req
	var _result GetUserLikeResult
	if err = p.c.Call(ctx, "GetUserLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTargetLikes(ctx context.Context, Req *like.GetTargetLikesReq) (r *like.GetTargetLikesResp, err error) {
	var _args GetTargetLikesArgs
	_args.Req = Req
	var _result GetTargetLikesResult
	if err = p.c.Call(ctx, "GetTargetLikes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserLikes(ctx context.Context, Req *like.GetUserLikesReq) (r *like.GetUserLikesResp, err error) {
	var _args GetUserLikesArgs
	_args.Req = Req
	var _result GetUserLikesResult
	if err = p.c.Call(ctx, "GetUserLikes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikedUsers(ctx context.Context, Req *like.GetLikedUsersReq) (r *like.GetLikedUsersResp, err error) {
	var _args GetLikedUsersArgs
	_args.Req = Req
	var _result GetLikedUsersResult
	if err = p.c.Call(ctx, "GetLikedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTopK(ctx context.Context, Req *like.GetTopKReq) (r *like.GetTopKResp, err error) {
	var _args GetTopKArgs
	_args.Req = Req
	var _result GetTopKResult
	if err = p.c.Call(ctx, "GetTopK", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddScore(ctx context.Context, Req *like.AddScoreReq) (r *like.AddScoreResp, err error) {
	var _args AddScoreArgs
	_args.Req = Req
	var _result AddScoreResult
	if err = p.c.Call(ctx, "AddScore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DailyUpdate(ctx context.Context, Req *like.DailyUpdateReq) (r *like.DailyUpdateResp, err error) {
	var _args DailyUpdateArgs
	_args.Req = Req
	var _result DailyUpdateResult
	if err = p.c.Call(ctx, "DailyUpdate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCatPopularity(ctx context.Context, Req *like.ListCatPopularityReq) (r *like.ListCatPopularityResp, err error) {
	var _args ListCatPopularityArgs
	_args.Req = Req
	var _result ListCatPopularityResult
	if err = p.c.Call(ctx, "ListCatPopularity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddCatPopularity(ctx context.Context, Req *like.AddCatPopularityReq) (r *like.AddCatPopularityResp, err error) {
	var _args AddCatPopularityArgs
	_args.Req = Req
	var _result AddCatPopularityResult
	if err = p.c.Call(ctx, "AddCatPopularity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTopCat(ctx context.Context, Req *like.ListTopCatReq) (r *like.ListTopCatResp, err error) {
	var _args ListTopCatArgs
	_args.Req = Req
	var _result ListTopCatResult
	if err = p.c.Call(ctx, "ListTopCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
