// Code generated by Kitex v0.6.2. DO NOT EDIT.

package likeservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	like "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/like"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	DoLike(ctx context.Context, Req *like.DoLikeReq, callOptions ...callopt.Option) (r *like.DoLikeResp, err error)
	GetUserLike(ctx context.Context, Req *like.GetUserLikedReq, callOptions ...callopt.Option) (r *like.GetUserLikedResp, err error)
	GetTargetLikes(ctx context.Context, Req *like.GetTargetLikesReq, callOptions ...callopt.Option) (r *like.GetTargetLikesResp, err error)
	GetUserLikes(ctx context.Context, Req *like.GetUserLikesReq, callOptions ...callopt.Option) (r *like.GetUserLikesResp, err error)
	GetLikedUsers(ctx context.Context, Req *like.GetLikedUsersReq, callOptions ...callopt.Option) (r *like.GetLikedUsersResp, err error)
	GetTopK(ctx context.Context, Req *like.GetTopKReq, callOptions ...callopt.Option) (r *like.GetTopKResp, err error)
	AddScore(ctx context.Context, Req *like.AddScoreReq, callOptions ...callopt.Option) (r *like.AddScoreResp, err error)
	DailyUpdate(ctx context.Context, Req *like.DailyUpdateReq, callOptions ...callopt.Option) (r *like.DailyUpdateResp, err error)
	ListCatPopularity(ctx context.Context, Req *like.ListCatPopularityReq, callOptions ...callopt.Option) (r *like.ListCatPopularityResp, err error)
	AddCatPopularity(ctx context.Context, Req *like.AddCatPopularityReq, callOptions ...callopt.Option) (r *like.AddCatPopularityResp, err error)
	ListTopCat(ctx context.Context, Req *like.ListTopCatReq, callOptions ...callopt.Option) (r *like.ListTopCatResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kLikeServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLikeServiceClient struct {
	*kClient
}

func (p *kLikeServiceClient) DoLike(ctx context.Context, Req *like.DoLikeReq, callOptions ...callopt.Option) (r *like.DoLikeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DoLike(ctx, Req)
}

func (p *kLikeServiceClient) GetUserLike(ctx context.Context, Req *like.GetUserLikedReq, callOptions ...callopt.Option) (r *like.GetUserLikedResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserLike(ctx, Req)
}

func (p *kLikeServiceClient) GetTargetLikes(ctx context.Context, Req *like.GetTargetLikesReq, callOptions ...callopt.Option) (r *like.GetTargetLikesResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTargetLikes(ctx, Req)
}

func (p *kLikeServiceClient) GetUserLikes(ctx context.Context, Req *like.GetUserLikesReq, callOptions ...callopt.Option) (r *like.GetUserLikesResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserLikes(ctx, Req)
}

func (p *kLikeServiceClient) GetLikedUsers(ctx context.Context, Req *like.GetLikedUsersReq, callOptions ...callopt.Option) (r *like.GetLikedUsersResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLikedUsers(ctx, Req)
}

func (p *kLikeServiceClient) GetTopK(ctx context.Context, Req *like.GetTopKReq, callOptions ...callopt.Option) (r *like.GetTopKResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTopK(ctx, Req)
}

func (p *kLikeServiceClient) AddScore(ctx context.Context, Req *like.AddScoreReq, callOptions ...callopt.Option) (r *like.AddScoreResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddScore(ctx, Req)
}

func (p *kLikeServiceClient) DailyUpdate(ctx context.Context, Req *like.DailyUpdateReq, callOptions ...callopt.Option) (r *like.DailyUpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DailyUpdate(ctx, Req)
}

func (p *kLikeServiceClient) ListCatPopularity(ctx context.Context, Req *like.ListCatPopularityReq, callOptions ...callopt.Option) (r *like.ListCatPopularityResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCatPopularity(ctx, Req)
}

func (p *kLikeServiceClient) AddCatPopularity(ctx context.Context, Req *like.AddCatPopularityReq, callOptions ...callopt.Option) (r *like.AddCatPopularityResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddCatPopularity(ctx, Req)
}

func (p *kLikeServiceClient) ListTopCat(ctx context.Context, Req *like.ListTopCatReq, callOptions ...callopt.Option) (r *like.ListTopCatResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListTopCat(ctx, Req)
}
