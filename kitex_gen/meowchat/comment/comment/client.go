// Code generated by Kitex v0.6.2. DO NOT EDIT.

package comment

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	comment "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/comment"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateComment(ctx context.Context, Req *comment.CreateCommentRequest, callOptions ...callopt.Option) (r *comment.CreateCommentResponse, err error)
	UpdateComment(ctx context.Context, Req *comment.UpdateCommentRequest, callOptions ...callopt.Option) (r *comment.UpdateCommentResponse, err error)
	DeleteComment(ctx context.Context, Req *comment.DeleteCommentByIdRequest, callOptions ...callopt.Option) (r *comment.DeleteCommentByIdResponse, err error)
	ListCommentByParent(ctx context.Context, Req *comment.ListCommentByParentRequest, callOptions ...callopt.Option) (r *comment.ListCommentByParentResponse, err error)
	CountCommentByParent(ctx context.Context, Req *comment.CountCommentByParentRequest, callOptions ...callopt.Option) (r *comment.CountCommentByParentResponse, err error)
	RetrieveCommentById(ctx context.Context, Req *comment.RetrieveCommentByIdRequest, callOptions ...callopt.Option) (r *comment.RetrieveCommentByIdResponse, err error)
	ListCommentByAuthorIdAndType(ctx context.Context, Req *comment.ListCommentByAuthorIdAndTypeRequest, callOptions ...callopt.Option) (r *comment.ListCommentByAuthorIdAndTypeResponse, err error)
	ListCommentByReplyToAndType(ctx context.Context, Req *comment.ListCommentByReplyToAndTypeRequest, callOptions ...callopt.Option) (r *comment.ListCommentByReplyToAndTypeResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kCommentClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCommentClient struct {
	*kClient
}

func (p *kCommentClient) CreateComment(ctx context.Context, Req *comment.CreateCommentRequest, callOptions ...callopt.Option) (r *comment.CreateCommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateComment(ctx, Req)
}

func (p *kCommentClient) UpdateComment(ctx context.Context, Req *comment.UpdateCommentRequest, callOptions ...callopt.Option) (r *comment.UpdateCommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateComment(ctx, Req)
}

func (p *kCommentClient) DeleteComment(ctx context.Context, Req *comment.DeleteCommentByIdRequest, callOptions ...callopt.Option) (r *comment.DeleteCommentByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteComment(ctx, Req)
}

func (p *kCommentClient) ListCommentByParent(ctx context.Context, Req *comment.ListCommentByParentRequest, callOptions ...callopt.Option) (r *comment.ListCommentByParentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCommentByParent(ctx, Req)
}

func (p *kCommentClient) CountCommentByParent(ctx context.Context, Req *comment.CountCommentByParentRequest, callOptions ...callopt.Option) (r *comment.CountCommentByParentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CountCommentByParent(ctx, Req)
}

func (p *kCommentClient) RetrieveCommentById(ctx context.Context, Req *comment.RetrieveCommentByIdRequest, callOptions ...callopt.Option) (r *comment.RetrieveCommentByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RetrieveCommentById(ctx, Req)
}

func (p *kCommentClient) ListCommentByAuthorIdAndType(ctx context.Context, Req *comment.ListCommentByAuthorIdAndTypeRequest, callOptions ...callopt.Option) (r *comment.ListCommentByAuthorIdAndTypeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCommentByAuthorIdAndType(ctx, Req)
}

func (p *kCommentClient) ListCommentByReplyToAndType(ctx context.Context, Req *comment.ListCommentByReplyToAndTypeRequest, callOptions ...callopt.Option) (r *comment.ListCommentByReplyToAndTypeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCommentByReplyToAndType(ctx, Req)
}
