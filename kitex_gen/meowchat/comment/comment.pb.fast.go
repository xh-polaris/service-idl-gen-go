// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package comment

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "github.com/xh-polaris/service-idl-gen-go/kitex_gen/base"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Comment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Comment[number], err)
}

func (x *Comment) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AuthorId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ReplyTo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ParentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.UpdateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateCommentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateCommentRequest[number], err)
}

func (x *CreateCommentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateCommentRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthorId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateCommentRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ReplyTo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateCommentRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateCommentRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ParentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateCommentResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateCommentResponse[number], err)
}

func (x *CreateCommentResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateCommentResponse) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *UpdateCommentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateCommentRequest[number], err)
}

func (x *UpdateCommentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateCommentRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateCommentResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateCommentResponse[number], err)
}

func (x *UpdateCommentResponse) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *DeleteCommentByIdRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCommentByIdRequest[number], err)
}

func (x *DeleteCommentByIdRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteCommentByIdResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCommentByIdResponse[number], err)
}

func (x *DeleteCommentByIdResponse) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *ListCommentByParentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCommentByParentRequest[number], err)
}

func (x *ListCommentByParentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListCommentByParentRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ParentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListCommentByParentRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Skip, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCommentByParentRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCommentByParentResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCommentByParentResponse[number], err)
}

func (x *ListCommentByParentResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comments = append(x.Comments, &v)
	return offset, nil
}

func (x *ListCommentByParentResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCommentByParentResponse) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *CountCommentByParentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CountCommentByParentRequest[number], err)
}

func (x *CountCommentByParentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CountCommentByParentRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ParentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CountCommentByParentResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CountCommentByParentResponse[number], err)
}

func (x *CountCommentByParentResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CountCommentByParentResponse) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *RetrieveCommentByIdRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveCommentByIdRequest[number], err)
}

func (x *RetrieveCommentByIdRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RetrieveCommentByIdResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveCommentByIdResponse[number], err)
}

func (x *RetrieveCommentByIdResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comment = &v
	return offset, nil
}

func (x *RetrieveCommentByIdResponse) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *ListCommentByAuthorIdAndTypeRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCommentByAuthorIdAndTypeRequest[number], err)
}

func (x *ListCommentByAuthorIdAndTypeRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthorId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListCommentByAuthorIdAndTypeRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListCommentByAuthorIdAndTypeRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Skip, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCommentByAuthorIdAndTypeRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCommentByAuthorIdAndTypeResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCommentByAuthorIdAndTypeResponse[number], err)
}

func (x *ListCommentByAuthorIdAndTypeResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comments = append(x.Comments, &v)
	return offset, nil
}

func (x *ListCommentByAuthorIdAndTypeResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCommentByAuthorIdAndTypeResponse) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *ListCommentByReplyToAndTypeRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCommentByReplyToAndTypeRequest[number], err)
}

func (x *ListCommentByReplyToAndTypeRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ReplyTo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListCommentByReplyToAndTypeRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListCommentByReplyToAndTypeRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Skip, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCommentByReplyToAndTypeRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCommentByReplyToAndTypeResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCommentByReplyToAndTypeResponse[number], err)
}

func (x *ListCommentByReplyToAndTypeResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comments = append(x.Comments, &v)
	return offset, nil
}

func (x *ListCommentByReplyToAndTypeResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCommentByReplyToAndTypeResponse) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *Comment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Comment) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Comment) fastWriteField2(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetText())
	return offset
}

func (x *Comment) fastWriteField3(buf []byte) (offset int) {
	if x.AuthorId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAuthorId())
	return offset
}

func (x *Comment) fastWriteField4(buf []byte) (offset int) {
	if x.ReplyTo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetReplyTo())
	return offset
}

func (x *Comment) fastWriteField5(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetType())
	return offset
}

func (x *Comment) fastWriteField6(buf []byte) (offset int) {
	if x.ParentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetParentId())
	return offset
}

func (x *Comment) fastWriteField7(buf []byte) (offset int) {
	if x.UpdateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetUpdateAt())
	return offset
}

func (x *Comment) fastWriteField8(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetCreateAt())
	return offset
}

func (x *CreateCommentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *CreateCommentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetText())
	return offset
}

func (x *CreateCommentRequest) fastWriteField2(buf []byte) (offset int) {
	if x.AuthorId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthorId())
	return offset
}

func (x *CreateCommentRequest) fastWriteField3(buf []byte) (offset int) {
	if x.ReplyTo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetReplyTo())
	return offset
}

func (x *CreateCommentRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetType())
	return offset
}

func (x *CreateCommentRequest) fastWriteField5(buf []byte) (offset int) {
	if x.ParentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetParentId())
	return offset
}

func (x *CreateCommentResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *CreateCommentResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *CreateCommentResponse) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *UpdateCommentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateCommentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateCommentRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetText())
	return offset
}

func (x *UpdateCommentResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *UpdateCommentResponse) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *DeleteCommentByIdRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCommentByIdRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteCommentByIdResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *DeleteCommentByIdResponse) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *ListCommentByParentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ListCommentByParentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetType())
	return offset
}

func (x *ListCommentByParentRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ParentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetParentId())
	return offset
}

func (x *ListCommentByParentRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Skip == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetSkip())
	return offset
}

func (x *ListCommentByParentRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetLimit())
	return offset
}

func (x *ListCommentByParentResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *ListCommentByParentResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Comments == nil {
		return offset
	}
	for i := range x.GetComments() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComments()[i])
	}
	return offset
}

func (x *ListCommentByParentResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *ListCommentByParentResponse) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *CountCommentByParentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CountCommentByParentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetType())
	return offset
}

func (x *CountCommentByParentRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ParentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetParentId())
	return offset
}

func (x *CountCommentByParentResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *CountCommentByParentResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *CountCommentByParentResponse) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *RetrieveCommentByIdRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveCommentByIdRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *RetrieveCommentByIdResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *RetrieveCommentByIdResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Comment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComment())
	return offset
}

func (x *RetrieveCommentByIdResponse) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *ListCommentByAuthorIdAndTypeRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ListCommentByAuthorIdAndTypeRequest) fastWriteField1(buf []byte) (offset int) {
	if x.AuthorId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthorId())
	return offset
}

func (x *ListCommentByAuthorIdAndTypeRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetType())
	return offset
}

func (x *ListCommentByAuthorIdAndTypeRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Skip == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetSkip())
	return offset
}

func (x *ListCommentByAuthorIdAndTypeRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetLimit())
	return offset
}

func (x *ListCommentByAuthorIdAndTypeResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *ListCommentByAuthorIdAndTypeResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Comments == nil {
		return offset
	}
	for i := range x.GetComments() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComments()[i])
	}
	return offset
}

func (x *ListCommentByAuthorIdAndTypeResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *ListCommentByAuthorIdAndTypeResponse) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *ListCommentByReplyToAndTypeRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ListCommentByReplyToAndTypeRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ReplyTo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetReplyTo())
	return offset
}

func (x *ListCommentByReplyToAndTypeRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetType())
	return offset
}

func (x *ListCommentByReplyToAndTypeRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Skip == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetSkip())
	return offset
}

func (x *ListCommentByReplyToAndTypeRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetLimit())
	return offset
}

func (x *ListCommentByReplyToAndTypeResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *ListCommentByReplyToAndTypeResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Comments == nil {
		return offset
	}
	for i := range x.GetComments() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComments()[i])
	}
	return offset
}

func (x *ListCommentByReplyToAndTypeResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *ListCommentByReplyToAndTypeResponse) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *Comment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Comment) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Comment) sizeField2() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetText())
	return n
}

func (x *Comment) sizeField3() (n int) {
	if x.AuthorId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAuthorId())
	return n
}

func (x *Comment) sizeField4() (n int) {
	if x.ReplyTo == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetReplyTo())
	return n
}

func (x *Comment) sizeField5() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetType())
	return n
}

func (x *Comment) sizeField6() (n int) {
	if x.ParentId == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetParentId())
	return n
}

func (x *Comment) sizeField7() (n int) {
	if x.UpdateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetUpdateAt())
	return n
}

func (x *Comment) sizeField8() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetCreateAt())
	return n
}

func (x *CreateCommentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *CreateCommentRequest) sizeField1() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetText())
	return n
}

func (x *CreateCommentRequest) sizeField2() (n int) {
	if x.AuthorId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthorId())
	return n
}

func (x *CreateCommentRequest) sizeField3() (n int) {
	if x.ReplyTo == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetReplyTo())
	return n
}

func (x *CreateCommentRequest) sizeField4() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetType())
	return n
}

func (x *CreateCommentRequest) sizeField5() (n int) {
	if x.ParentId == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetParentId())
	return n
}

func (x *CreateCommentResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *CreateCommentResponse) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *CreateCommentResponse) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *UpdateCommentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateCommentRequest) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateCommentRequest) sizeField2() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetText())
	return n
}

func (x *UpdateCommentResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField255()
	return n
}

func (x *UpdateCommentResponse) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *DeleteCommentByIdRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCommentByIdRequest) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteCommentByIdResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField255()
	return n
}

func (x *DeleteCommentByIdResponse) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *ListCommentByParentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ListCommentByParentRequest) sizeField1() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetType())
	return n
}

func (x *ListCommentByParentRequest) sizeField2() (n int) {
	if x.ParentId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetParentId())
	return n
}

func (x *ListCommentByParentRequest) sizeField3() (n int) {
	if x.Skip == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetSkip())
	return n
}

func (x *ListCommentByParentRequest) sizeField4() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetLimit())
	return n
}

func (x *ListCommentByParentResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField255()
	return n
}

func (x *ListCommentByParentResponse) sizeField1() (n int) {
	if x.Comments == nil {
		return n
	}
	for i := range x.GetComments() {
		n += fastpb.SizeMessage(1, x.GetComments()[i])
	}
	return n
}

func (x *ListCommentByParentResponse) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *ListCommentByParentResponse) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *CountCommentByParentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CountCommentByParentRequest) sizeField1() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetType())
	return n
}

func (x *CountCommentByParentRequest) sizeField2() (n int) {
	if x.ParentId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetParentId())
	return n
}

func (x *CountCommentByParentResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *CountCommentByParentResponse) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *CountCommentByParentResponse) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *RetrieveCommentByIdRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveCommentByIdRequest) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *RetrieveCommentByIdResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *RetrieveCommentByIdResponse) sizeField1() (n int) {
	if x.Comment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetComment())
	return n
}

func (x *RetrieveCommentByIdResponse) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *ListCommentByAuthorIdAndTypeRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ListCommentByAuthorIdAndTypeRequest) sizeField1() (n int) {
	if x.AuthorId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthorId())
	return n
}

func (x *ListCommentByAuthorIdAndTypeRequest) sizeField2() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetType())
	return n
}

func (x *ListCommentByAuthorIdAndTypeRequest) sizeField3() (n int) {
	if x.Skip == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetSkip())
	return n
}

func (x *ListCommentByAuthorIdAndTypeRequest) sizeField4() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetLimit())
	return n
}

func (x *ListCommentByAuthorIdAndTypeResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField255()
	return n
}

func (x *ListCommentByAuthorIdAndTypeResponse) sizeField1() (n int) {
	if x.Comments == nil {
		return n
	}
	for i := range x.GetComments() {
		n += fastpb.SizeMessage(1, x.GetComments()[i])
	}
	return n
}

func (x *ListCommentByAuthorIdAndTypeResponse) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *ListCommentByAuthorIdAndTypeResponse) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *ListCommentByReplyToAndTypeRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ListCommentByReplyToAndTypeRequest) sizeField1() (n int) {
	if x.ReplyTo == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetReplyTo())
	return n
}

func (x *ListCommentByReplyToAndTypeRequest) sizeField2() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetType())
	return n
}

func (x *ListCommentByReplyToAndTypeRequest) sizeField3() (n int) {
	if x.Skip == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetSkip())
	return n
}

func (x *ListCommentByReplyToAndTypeRequest) sizeField4() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetLimit())
	return n
}

func (x *ListCommentByReplyToAndTypeResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField255()
	return n
}

func (x *ListCommentByReplyToAndTypeResponse) sizeField1() (n int) {
	if x.Comments == nil {
		return n
	}
	for i := range x.GetComments() {
		n += fastpb.SizeMessage(1, x.GetComments()[i])
	}
	return n
}

func (x *ListCommentByReplyToAndTypeResponse) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *ListCommentByReplyToAndTypeResponse) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

var fieldIDToName_Comment = map[int32]string{
	1: "Id",
	2: "Text",
	3: "AuthorId",
	4: "ReplyTo",
	5: "Type",
	6: "ParentId",
	7: "UpdateAt",
	8: "CreateAt",
}

var fieldIDToName_CreateCommentRequest = map[int32]string{
	1: "Text",
	2: "AuthorId",
	3: "ReplyTo",
	4: "Type",
	5: "ParentId",
}

var fieldIDToName_CreateCommentResponse = map[int32]string{
	1:   "Id",
	255: "Status",
}

var fieldIDToName_UpdateCommentRequest = map[int32]string{
	1: "Id",
	2: "Text",
}

var fieldIDToName_UpdateCommentResponse = map[int32]string{
	255: "Status",
}

var fieldIDToName_DeleteCommentByIdRequest = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteCommentByIdResponse = map[int32]string{
	255: "Status",
}

var fieldIDToName_ListCommentByParentRequest = map[int32]string{
	1: "Type",
	2: "ParentId",
	3: "Skip",
	4: "Limit",
}

var fieldIDToName_ListCommentByParentResponse = map[int32]string{
	1:   "Comments",
	2:   "Total",
	255: "Status",
}

var fieldIDToName_CountCommentByParentRequest = map[int32]string{
	1: "Type",
	2: "ParentId",
}

var fieldIDToName_CountCommentByParentResponse = map[int32]string{
	1:   "Total",
	255: "Status",
}

var fieldIDToName_RetrieveCommentByIdRequest = map[int32]string{
	1: "Id",
}

var fieldIDToName_RetrieveCommentByIdResponse = map[int32]string{
	1:   "Comment",
	255: "Status",
}

var fieldIDToName_ListCommentByAuthorIdAndTypeRequest = map[int32]string{
	1: "AuthorId",
	2: "Type",
	3: "Skip",
	4: "Limit",
}

var fieldIDToName_ListCommentByAuthorIdAndTypeResponse = map[int32]string{
	1:   "Comments",
	2:   "Total",
	255: "Status",
}

var fieldIDToName_ListCommentByReplyToAndTypeRequest = map[int32]string{
	1: "ReplyTo",
	2: "Type",
	3: "Skip",
	4: "Limit",
}

var fieldIDToName_ListCommentByReplyToAndTypeResponse = map[int32]string{
	1:   "Comments",
	2:   "Total",
	255: "Status",
}

var _ = base.File_base_status_proto
