// Code generated by Kitex v0.6.2. DO NOT EDIT.

package postservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	post "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/post"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreatePost(ctx context.Context, Req *post.CreatePostReq, callOptions ...callopt.Option) (r *post.CreatePostResp, err error)
	RetrievePost(ctx context.Context, Req *post.RetrievePostReq, callOptions ...callopt.Option) (r *post.RetrievePostResp, err error)
	UpdatePost(ctx context.Context, Req *post.UpdatePostReq, callOptions ...callopt.Option) (r *post.UpdatePostResp, err error)
	DeletePost(ctx context.Context, Req *post.DeletePostReq, callOptions ...callopt.Option) (r *post.DeletePostResp, err error)
	ListPost(ctx context.Context, Req *post.ListPostReq, callOptions ...callopt.Option) (r *post.ListPostResp, err error)
	CountPost(ctx context.Context, Req *post.CountPostReq, callOptions ...callopt.Option) (r *post.CountPostResp, err error)
	SetOfficial(ctx context.Context, Req *post.SetOfficialReq, callOptions ...callopt.Option) (r *post.SetOfficialResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPostServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPostServiceClient struct {
	*kClient
}

func (p *kPostServiceClient) CreatePost(ctx context.Context, Req *post.CreatePostReq, callOptions ...callopt.Option) (r *post.CreatePostResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreatePost(ctx, Req)
}

func (p *kPostServiceClient) RetrievePost(ctx context.Context, Req *post.RetrievePostReq, callOptions ...callopt.Option) (r *post.RetrievePostResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RetrievePost(ctx, Req)
}

func (p *kPostServiceClient) UpdatePost(ctx context.Context, Req *post.UpdatePostReq, callOptions ...callopt.Option) (r *post.UpdatePostResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdatePost(ctx, Req)
}

func (p *kPostServiceClient) DeletePost(ctx context.Context, Req *post.DeletePostReq, callOptions ...callopt.Option) (r *post.DeletePostResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePost(ctx, Req)
}

func (p *kPostServiceClient) ListPost(ctx context.Context, Req *post.ListPostReq, callOptions ...callopt.Option) (r *post.ListPostResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListPost(ctx, Req)
}

func (p *kPostServiceClient) CountPost(ctx context.Context, Req *post.CountPostReq, callOptions ...callopt.Option) (r *post.CountPostResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CountPost(ctx, Req)
}

func (p *kPostServiceClient) SetOfficial(ctx context.Context, Req *post.SetOfficialReq, callOptions ...callopt.Option) (r *post.SetOfficialResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetOfficial(ctx, Req)
}
