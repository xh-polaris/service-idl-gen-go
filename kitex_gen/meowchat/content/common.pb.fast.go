// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package content

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Cat) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Cat[number], err)
}

func (x *Cat) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Age, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Color, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Details, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Popularity, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Sex, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Area, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.IsSnipped, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.IsSterilized, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Avatars = append(x.Avatars, v)
	return offset, err
}

func (x *CreateImageElement) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateImageElement[number], err)
}

func (x *CreateImageElement) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateImageElement) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Image) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Image[number], err)
}

func (x *Image) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Image) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Image) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Moment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Moment[number], err)
}

func (x *Moment) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Moment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Moment) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.CatId = &tmp
	return offset, err
}

func (x *Moment) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Photos = append(x.Photos, v)
	return offset, err
}

func (x *Moment) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Moment) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Moment) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Moment) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Post[number], err)
}

func (x *Post) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UpdateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Tags = append(x.Tags, v)
	return offset, err
}

func (x *Post) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.IsOfficial, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Plan) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Plan[number], err)
}

func (x *Plan) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PlanType = PlanType(v)
	return offset, nil
}

func (x *Plan) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Instruction, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.InitiatorId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ImageUrls = append(x.ImageUrls, v)
	return offset, err
}

func (x *Plan) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.MaxFish, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.NowFish, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.Summary, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PlanState = PlanState(v)
	return offset, nil
}

func (x *Donation) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Donation[number], err)
}

func (x *Donation) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Plan
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Plan = &v
	return offset, nil
}

func (x *Donation) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.DonateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Donation) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.DonateNum, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Donation) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.DonateId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchField) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchField[number], err)
}

func (x *SearchField) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Text = &tmp
	return offset, err
}

func (x *SearchField) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Title = &tmp
	return offset, err
}

func (x *SearchField) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Tag = &tmp
	return offset, err
}

func (x *SearchOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchOptions[number], err)
}

func (x *SearchOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var ov SearchOptions_AllFieldsKey
	x.Type = &ov
	ov.AllFieldsKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var ov SearchOptions_MultiFieldsKey
	x.Type = &ov
	var v SearchField
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.MultiFieldsKey = &v
	return offset, nil
}

func (x *MomentFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MomentFilterOptions[number], err)
}

func (x *MomentFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *MomentFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyCommunityId = &tmp
	return offset, err
}

func (x *MomentFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OnlyCommunityIds = append(x.OnlyCommunityIds, v)
	return offset, err
}

func (x *PostFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PostFilterOptions[number], err)
}

func (x *PostFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.OnlyOfficial = &tmp
	return offset, err
}

func (x *PostFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *PlanFilterOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PlanFilterOptions[number], err)
}

func (x *PlanFilterOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyCatId = &tmp
	return offset, err
}

func (x *PlanFilterOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *PlanFilterOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyCommunityId = &tmp
	return offset, err
}

func (x *PlanFilterOptions) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.IncludeGlobal = &tmp
	return offset, err
}

func (x *Cat) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *Cat) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Cat) fastWriteField2(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCreateAt())
	return offset
}

func (x *Cat) fastWriteField3(buf []byte) (offset int) {
	if x.Age == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAge())
	return offset
}

func (x *Cat) fastWriteField4(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCommunityId())
	return offset
}

func (x *Cat) fastWriteField5(buf []byte) (offset int) {
	if x.Color == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetColor())
	return offset
}

func (x *Cat) fastWriteField6(buf []byte) (offset int) {
	if x.Details == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDetails())
	return offset
}

func (x *Cat) fastWriteField7(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetName())
	return offset
}

func (x *Cat) fastWriteField8(buf []byte) (offset int) {
	if x.Popularity == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetPopularity())
	return offset
}

func (x *Cat) fastWriteField9(buf []byte) (offset int) {
	if x.Sex == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetSex())
	return offset
}

func (x *Cat) fastWriteField10(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetStatus())
	return offset
}

func (x *Cat) fastWriteField11(buf []byte) (offset int) {
	if x.Area == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetArea())
	return offset
}

func (x *Cat) fastWriteField12(buf []byte) (offset int) {
	if !x.IsSnipped {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 12, x.GetIsSnipped())
	return offset
}

func (x *Cat) fastWriteField13(buf []byte) (offset int) {
	if !x.IsSterilized {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 13, x.GetIsSterilized())
	return offset
}

func (x *Cat) fastWriteField14(buf []byte) (offset int) {
	if len(x.Avatars) == 0 {
		return offset
	}
	for i := range x.GetAvatars() {
		offset += fastpb.WriteString(buf[offset:], 14, x.GetAvatars()[i])
	}
	return offset
}

func (x *CreateImageElement) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateImageElement) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *CreateImageElement) fastWriteField2(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUrl())
	return offset
}

func (x *Image) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Image) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Image) fastWriteField2(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUrl())
	return offset
}

func (x *Image) fastWriteField3(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCatId())
	return offset
}

func (x *Moment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Moment) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Moment) fastWriteField2(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCreateAt())
	return offset
}

func (x *Moment) fastWriteField3(buf []byte) (offset int) {
	if x.CatId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCatId())
	return offset
}

func (x *Moment) fastWriteField4(buf []byte) (offset int) {
	if len(x.Photos) == 0 {
		return offset
	}
	for i := range x.GetPhotos() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetPhotos()[i])
	}
	return offset
}

func (x *Moment) fastWriteField5(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetTitle())
	return offset
}

func (x *Moment) fastWriteField6(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetText())
	return offset
}

func (x *Moment) fastWriteField7(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetCommunityId())
	return offset
}

func (x *Moment) fastWriteField8(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetUserId())
	return offset
}

func (x *Post) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *Post) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Post) fastWriteField2(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCreateAt())
	return offset
}

func (x *Post) fastWriteField3(buf []byte) (offset int) {
	if x.UpdateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetUpdateAt())
	return offset
}

func (x *Post) fastWriteField5(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetTitle())
	return offset
}

func (x *Post) fastWriteField6(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetText())
	return offset
}

func (x *Post) fastWriteField7(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetCoverUrl())
	return offset
}

func (x *Post) fastWriteField8(buf []byte) (offset int) {
	if len(x.Tags) == 0 {
		return offset
	}
	for i := range x.GetTags() {
		offset += fastpb.WriteString(buf[offset:], 8, x.GetTags()[i])
	}
	return offset
}

func (x *Post) fastWriteField9(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetUserId())
	return offset
}

func (x *Post) fastWriteField10(buf []byte) (offset int) {
	if !x.IsOfficial {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 10, x.GetIsOfficial())
	return offset
}

func (x *Plan) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	return offset
}

func (x *Plan) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Plan) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Plan) fastWriteField3(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCoverUrl())
	return offset
}

func (x *Plan) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *Plan) fastWriteField5(buf []byte) (offset int) {
	if x.PlanType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetPlanType()))
	return offset
}

func (x *Plan) fastWriteField6(buf []byte) (offset int) {
	if x.Instruction == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetInstruction())
	return offset
}

func (x *Plan) fastWriteField7(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetStartTime())
	return offset
}

func (x *Plan) fastWriteField8(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetEndTime())
	return offset
}

func (x *Plan) fastWriteField9(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetCatId())
	return offset
}

func (x *Plan) fastWriteField10(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetCommunityId())
	return offset
}

func (x *Plan) fastWriteField11(buf []byte) (offset int) {
	if x.InitiatorId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetInitiatorId())
	return offset
}

func (x *Plan) fastWriteField12(buf []byte) (offset int) {
	if len(x.ImageUrls) == 0 {
		return offset
	}
	for i := range x.GetImageUrls() {
		offset += fastpb.WriteString(buf[offset:], 12, x.GetImageUrls()[i])
	}
	return offset
}

func (x *Plan) fastWriteField13(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetCreateAt())
	return offset
}

func (x *Plan) fastWriteField14(buf []byte) (offset int) {
	if x.MaxFish == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 14, x.GetMaxFish())
	return offset
}

func (x *Plan) fastWriteField15(buf []byte) (offset int) {
	if x.NowFish == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 15, x.GetNowFish())
	return offset
}

func (x *Plan) fastWriteField16(buf []byte) (offset int) {
	if x.Summary == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 16, x.GetSummary())
	return offset
}

func (x *Plan) fastWriteField17(buf []byte) (offset int) {
	if x.PlanState == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 17, int32(x.GetPlanState()))
	return offset
}

func (x *Donation) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Donation) fastWriteField1(buf []byte) (offset int) {
	if x.Plan == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPlan())
	return offset
}

func (x *Donation) fastWriteField2(buf []byte) (offset int) {
	if x.DonateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetDonateTime())
	return offset
}

func (x *Donation) fastWriteField3(buf []byte) (offset int) {
	if x.DonateNum == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetDonateNum())
	return offset
}

func (x *Donation) fastWriteField4(buf []byte) (offset int) {
	if x.DonateId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDonateId())
	return offset
}

func (x *SearchField) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SearchField) fastWriteField1(buf []byte) (offset int) {
	if x.Text == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetText())
	return offset
}

func (x *SearchField) fastWriteField2(buf []byte) (offset int) {
	if x.Title == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *SearchField) fastWriteField3(buf []byte) (offset int) {
	if x.Tag == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTag())
	return offset
}

func (x *SearchOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SearchOptions) fastWriteField1(buf []byte) (offset int) {
	if x.GetAllFieldsKey() == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAllFieldsKey())
	return offset
}

func (x *SearchOptions) fastWriteField2(buf []byte) (offset int) {
	if x.GetMultiFieldsKey() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetMultiFieldsKey())
	return offset
}

func (x *MomentFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *MomentFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyUserId())
	return offset
}

func (x *MomentFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyCommunityId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyCommunityId())
	return offset
}

func (x *MomentFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if len(x.OnlyCommunityIds) == 0 {
		return offset
	}
	for i := range x.GetOnlyCommunityIds() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyCommunityIds()[i])
	}
	return offset
}

func (x *PostFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PostFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyOfficial == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetOnlyOfficial())
	return offset
}

func (x *PostFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyUserId())
	return offset
}

func (x *PlanFilterOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *PlanFilterOptions) fastWriteField1(buf []byte) (offset int) {
	if x.OnlyCatId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOnlyCatId())
	return offset
}

func (x *PlanFilterOptions) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyUserId())
	return offset
}

func (x *PlanFilterOptions) fastWriteField3(buf []byte) (offset int) {
	if x.OnlyCommunityId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyCommunityId())
	return offset
}

func (x *PlanFilterOptions) fastWriteField4(buf []byte) (offset int) {
	if x.IncludeGlobal == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetIncludeGlobal())
	return offset
}

func (x *Cat) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *Cat) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Cat) sizeField2() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCreateAt())
	return n
}

func (x *Cat) sizeField3() (n int) {
	if x.Age == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAge())
	return n
}

func (x *Cat) sizeField4() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetCommunityId())
	return n
}

func (x *Cat) sizeField5() (n int) {
	if x.Color == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetColor())
	return n
}

func (x *Cat) sizeField6() (n int) {
	if x.Details == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDetails())
	return n
}

func (x *Cat) sizeField7() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetName())
	return n
}

func (x *Cat) sizeField8() (n int) {
	if x.Popularity == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetPopularity())
	return n
}

func (x *Cat) sizeField9() (n int) {
	if x.Sex == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetSex())
	return n
}

func (x *Cat) sizeField10() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetStatus())
	return n
}

func (x *Cat) sizeField11() (n int) {
	if x.Area == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetArea())
	return n
}

func (x *Cat) sizeField12() (n int) {
	if !x.IsSnipped {
		return n
	}
	n += fastpb.SizeBool(12, x.GetIsSnipped())
	return n
}

func (x *Cat) sizeField13() (n int) {
	if !x.IsSterilized {
		return n
	}
	n += fastpb.SizeBool(13, x.GetIsSterilized())
	return n
}

func (x *Cat) sizeField14() (n int) {
	if len(x.Avatars) == 0 {
		return n
	}
	for i := range x.GetAvatars() {
		n += fastpb.SizeString(14, x.GetAvatars()[i])
	}
	return n
}

func (x *CreateImageElement) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateImageElement) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *CreateImageElement) sizeField2() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUrl())
	return n
}

func (x *Image) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Image) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Image) sizeField2() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUrl())
	return n
}

func (x *Image) sizeField3() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCatId())
	return n
}

func (x *Moment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Moment) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Moment) sizeField2() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCreateAt())
	return n
}

func (x *Moment) sizeField3() (n int) {
	if x.CatId == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetCatId())
	return n
}

func (x *Moment) sizeField4() (n int) {
	if len(x.Photos) == 0 {
		return n
	}
	for i := range x.GetPhotos() {
		n += fastpb.SizeString(4, x.GetPhotos()[i])
	}
	return n
}

func (x *Moment) sizeField5() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetTitle())
	return n
}

func (x *Moment) sizeField6() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetText())
	return n
}

func (x *Moment) sizeField7() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetCommunityId())
	return n
}

func (x *Moment) sizeField8() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetUserId())
	return n
}

func (x *Post) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *Post) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Post) sizeField2() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCreateAt())
	return n
}

func (x *Post) sizeField3() (n int) {
	if x.UpdateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetUpdateAt())
	return n
}

func (x *Post) sizeField5() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetTitle())
	return n
}

func (x *Post) sizeField6() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetText())
	return n
}

func (x *Post) sizeField7() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetCoverUrl())
	return n
}

func (x *Post) sizeField8() (n int) {
	if len(x.Tags) == 0 {
		return n
	}
	for i := range x.GetTags() {
		n += fastpb.SizeString(8, x.GetTags()[i])
	}
	return n
}

func (x *Post) sizeField9() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetUserId())
	return n
}

func (x *Post) sizeField10() (n int) {
	if !x.IsOfficial {
		return n
	}
	n += fastpb.SizeBool(10, x.GetIsOfficial())
	return n
}

func (x *Plan) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	return n
}

func (x *Plan) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Plan) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Plan) sizeField3() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCoverUrl())
	return n
}

func (x *Plan) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *Plan) sizeField5() (n int) {
	if x.PlanType == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetPlanType()))
	return n
}

func (x *Plan) sizeField6() (n int) {
	if x.Instruction == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetInstruction())
	return n
}

func (x *Plan) sizeField7() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetStartTime())
	return n
}

func (x *Plan) sizeField8() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetEndTime())
	return n
}

func (x *Plan) sizeField9() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetCatId())
	return n
}

func (x *Plan) sizeField10() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetCommunityId())
	return n
}

func (x *Plan) sizeField11() (n int) {
	if x.InitiatorId == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetInitiatorId())
	return n
}

func (x *Plan) sizeField12() (n int) {
	if len(x.ImageUrls) == 0 {
		return n
	}
	for i := range x.GetImageUrls() {
		n += fastpb.SizeString(12, x.GetImageUrls()[i])
	}
	return n
}

func (x *Plan) sizeField13() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetCreateAt())
	return n
}

func (x *Plan) sizeField14() (n int) {
	if x.MaxFish == 0 {
		return n
	}
	n += fastpb.SizeInt64(14, x.GetMaxFish())
	return n
}

func (x *Plan) sizeField15() (n int) {
	if x.NowFish == 0 {
		return n
	}
	n += fastpb.SizeInt64(15, x.GetNowFish())
	return n
}

func (x *Plan) sizeField16() (n int) {
	if x.Summary == "" {
		return n
	}
	n += fastpb.SizeString(16, x.GetSummary())
	return n
}

func (x *Plan) sizeField17() (n int) {
	if x.PlanState == 0 {
		return n
	}
	n += fastpb.SizeInt32(17, int32(x.GetPlanState()))
	return n
}

func (x *Donation) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Donation) sizeField1() (n int) {
	if x.Plan == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPlan())
	return n
}

func (x *Donation) sizeField2() (n int) {
	if x.DonateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetDonateTime())
	return n
}

func (x *Donation) sizeField3() (n int) {
	if x.DonateNum == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetDonateNum())
	return n
}

func (x *Donation) sizeField4() (n int) {
	if x.DonateId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDonateId())
	return n
}

func (x *SearchField) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SearchField) sizeField1() (n int) {
	if x.Text == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetText())
	return n
}

func (x *SearchField) sizeField2() (n int) {
	if x.Title == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *SearchField) sizeField3() (n int) {
	if x.Tag == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetTag())
	return n
}

func (x *SearchOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SearchOptions) sizeField1() (n int) {
	if x.GetAllFieldsKey() == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAllFieldsKey())
	return n
}

func (x *SearchOptions) sizeField2() (n int) {
	if x.GetMultiFieldsKey() == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetMultiFieldsKey())
	return n
}

func (x *MomentFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *MomentFilterOptions) sizeField1() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyUserId())
	return n
}

func (x *MomentFilterOptions) sizeField2() (n int) {
	if x.OnlyCommunityId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyCommunityId())
	return n
}

func (x *MomentFilterOptions) sizeField3() (n int) {
	if len(x.OnlyCommunityIds) == 0 {
		return n
	}
	for i := range x.GetOnlyCommunityIds() {
		n += fastpb.SizeString(3, x.GetOnlyCommunityIds()[i])
	}
	return n
}

func (x *PostFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PostFilterOptions) sizeField1() (n int) {
	if x.OnlyOfficial == nil {
		return n
	}
	n += fastpb.SizeBool(1, x.GetOnlyOfficial())
	return n
}

func (x *PostFilterOptions) sizeField2() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyUserId())
	return n
}

func (x *PlanFilterOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *PlanFilterOptions) sizeField1() (n int) {
	if x.OnlyCatId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetOnlyCatId())
	return n
}

func (x *PlanFilterOptions) sizeField2() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyUserId())
	return n
}

func (x *PlanFilterOptions) sizeField3() (n int) {
	if x.OnlyCommunityId == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetOnlyCommunityId())
	return n
}

func (x *PlanFilterOptions) sizeField4() (n int) {
	if x.IncludeGlobal == nil {
		return n
	}
	n += fastpb.SizeBool(4, x.GetIncludeGlobal())
	return n
}

var fieldIDToName_Cat = map[int32]string{
	1:  "Id",
	2:  "CreateAt",
	3:  "Age",
	4:  "CommunityId",
	5:  "Color",
	6:  "Details",
	7:  "Name",
	8:  "Popularity",
	9:  "Sex",
	10: "Status",
	11: "Area",
	12: "IsSnipped",
	13: "IsSterilized",
	14: "Avatars",
}

var fieldIDToName_CreateImageElement = map[int32]string{
	1: "CatId",
	2: "Url",
}

var fieldIDToName_Image = map[int32]string{
	1: "Id",
	2: "Url",
	3: "CatId",
}

var fieldIDToName_Moment = map[int32]string{
	1: "Id",
	2: "CreateAt",
	3: "CatId",
	4: "Photos",
	5: "Title",
	6: "Text",
	7: "CommunityId",
	8: "UserId",
}

var fieldIDToName_Post = map[int32]string{
	1:  "Id",
	2:  "CreateAt",
	3:  "UpdateAt",
	5:  "Title",
	6:  "Text",
	7:  "CoverUrl",
	8:  "Tags",
	9:  "UserId",
	10: "IsOfficial",
}

var fieldIDToName_Plan = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "CoverUrl",
	4:  "Description",
	5:  "PlanType",
	6:  "Instruction",
	7:  "StartTime",
	8:  "EndTime",
	9:  "CatId",
	10: "CommunityId",
	11: "InitiatorId",
	12: "ImageUrls",
	13: "CreateAt",
	14: "MaxFish",
	15: "NowFish",
	16: "Summary",
	17: "PlanState",
}

var fieldIDToName_Donation = map[int32]string{
	1: "Plan",
	2: "DonateTime",
	3: "DonateNum",
	4: "DonateId",
}

var fieldIDToName_SearchField = map[int32]string{
	1: "Text",
	2: "Title",
	3: "Tag",
}

var fieldIDToName_SearchOptions = map[int32]string{
	1: "AllFieldsKey",
	2: "MultiFieldsKey",
}

var fieldIDToName_MomentFilterOptions = map[int32]string{
	1: "OnlyUserId",
	2: "OnlyCommunityId",
	3: "OnlyCommunityIds",
}

var fieldIDToName_PostFilterOptions = map[int32]string{
	1: "OnlyOfficial",
	2: "OnlyUserId",
}

var fieldIDToName_PlanFilterOptions = map[int32]string{
	1: "OnlyCatId",
	2: "OnlyUserId",
	3: "OnlyCommunityId",
	4: "IncludeGlobal",
}
