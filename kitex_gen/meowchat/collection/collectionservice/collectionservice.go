// Code generated by Kitex v0.6.2. DO NOT EDIT.

package collectionservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	collection "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/collection"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return collectionServiceServiceInfo
}

var collectionServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CollectionService"
	handlerType := (*collection.CollectionService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SearchCat":   kitex.NewMethodInfo(searchCatHandler, newSearchCatArgs, newSearchCatResult, false),
		"ListCat":     kitex.NewMethodInfo(listCatHandler, newListCatArgs, newListCatResult, false),
		"RetrieveCat": kitex.NewMethodInfo(retrieveCatHandler, newRetrieveCatArgs, newRetrieveCatResult, false),
		"CreateCat":   kitex.NewMethodInfo(createCatHandler, newCreateCatArgs, newCreateCatResult, false),
		"UpdateCat":   kitex.NewMethodInfo(updateCatHandler, newUpdateCatArgs, newUpdateCatResult, false),
		"DeleteCat":   kitex.NewMethodInfo(deleteCatHandler, newDeleteCatArgs, newDeleteCatResult, false),
		"CreateImage": kitex.NewMethodInfo(createImageHandler, newCreateImageArgs, newCreateImageResult, false),
		"DeleteImage": kitex.NewMethodInfo(deleteImageHandler, newDeleteImageArgs, newDeleteImageResult, false),
		"ListImage":   kitex.NewMethodInfo(listImageHandler, newListImageArgs, newListImageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "meowchat.collection",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func searchCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(collection.SearchCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(collection.CollectionService).SearchCat(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchCatArgs:
		success, err := handler.(collection.CollectionService).SearchCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchCatResult)
		realResult.Success = success
	}
	return nil
}
func newSearchCatArgs() interface{} {
	return &SearchCatArgs{}
}

func newSearchCatResult() interface{} {
	return &SearchCatResult{}
}

type SearchCatArgs struct {
	Req *collection.SearchCatReq
}

func (p *SearchCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(collection.SearchCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SearchCatArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SearchCatArgs) Unmarshal(in []byte) error {
	msg := new(collection.SearchCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchCatArgs_Req_DEFAULT *collection.SearchCatReq

func (p *SearchCatArgs) GetReq() *collection.SearchCatReq {
	if !p.IsSetReq() {
		return SearchCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchCatResult struct {
	Success *collection.SearchCatResp
}

var SearchCatResult_Success_DEFAULT *collection.SearchCatResp

func (p *SearchCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(collection.SearchCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SearchCatResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SearchCatResult) Unmarshal(in []byte) error {
	msg := new(collection.SearchCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchCatResult) GetSuccess() *collection.SearchCatResp {
	if !p.IsSetSuccess() {
		return SearchCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*collection.SearchCatResp)
}

func (p *SearchCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchCatResult) GetResult() interface{} {
	return p.Success
}

func listCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(collection.ListCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(collection.CollectionService).ListCat(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListCatArgs:
		success, err := handler.(collection.CollectionService).ListCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListCatResult)
		realResult.Success = success
	}
	return nil
}
func newListCatArgs() interface{} {
	return &ListCatArgs{}
}

func newListCatResult() interface{} {
	return &ListCatResult{}
}

type ListCatArgs struct {
	Req *collection.ListCatReq
}

func (p *ListCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(collection.ListCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListCatArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListCatArgs) Unmarshal(in []byte) error {
	msg := new(collection.ListCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListCatArgs_Req_DEFAULT *collection.ListCatReq

func (p *ListCatArgs) GetReq() *collection.ListCatReq {
	if !p.IsSetReq() {
		return ListCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListCatResult struct {
	Success *collection.ListCatResp
}

var ListCatResult_Success_DEFAULT *collection.ListCatResp

func (p *ListCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(collection.ListCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListCatResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListCatResult) Unmarshal(in []byte) error {
	msg := new(collection.ListCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListCatResult) GetSuccess() *collection.ListCatResp {
	if !p.IsSetSuccess() {
		return ListCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*collection.ListCatResp)
}

func (p *ListCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListCatResult) GetResult() interface{} {
	return p.Success
}

func retrieveCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(collection.RetrieveCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(collection.CollectionService).RetrieveCat(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RetrieveCatArgs:
		success, err := handler.(collection.CollectionService).RetrieveCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveCatResult)
		realResult.Success = success
	}
	return nil
}
func newRetrieveCatArgs() interface{} {
	return &RetrieveCatArgs{}
}

func newRetrieveCatResult() interface{} {
	return &RetrieveCatResult{}
}

type RetrieveCatArgs struct {
	Req *collection.RetrieveCatReq
}

func (p *RetrieveCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(collection.RetrieveCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RetrieveCatArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveCatArgs) Unmarshal(in []byte) error {
	msg := new(collection.RetrieveCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveCatArgs_Req_DEFAULT *collection.RetrieveCatReq

func (p *RetrieveCatArgs) GetReq() *collection.RetrieveCatReq {
	if !p.IsSetReq() {
		return RetrieveCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveCatResult struct {
	Success *collection.RetrieveCatResp
}

var RetrieveCatResult_Success_DEFAULT *collection.RetrieveCatResp

func (p *RetrieveCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(collection.RetrieveCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RetrieveCatResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveCatResult) Unmarshal(in []byte) error {
	msg := new(collection.RetrieveCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveCatResult) GetSuccess() *collection.RetrieveCatResp {
	if !p.IsSetSuccess() {
		return RetrieveCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*collection.RetrieveCatResp)
}

func (p *RetrieveCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveCatResult) GetResult() interface{} {
	return p.Success
}

func createCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(collection.CreateCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(collection.CollectionService).CreateCat(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateCatArgs:
		success, err := handler.(collection.CollectionService).CreateCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateCatResult)
		realResult.Success = success
	}
	return nil
}
func newCreateCatArgs() interface{} {
	return &CreateCatArgs{}
}

func newCreateCatResult() interface{} {
	return &CreateCatResult{}
}

type CreateCatArgs struct {
	Req *collection.CreateCatReq
}

func (p *CreateCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(collection.CreateCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateCatArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateCatArgs) Unmarshal(in []byte) error {
	msg := new(collection.CreateCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateCatArgs_Req_DEFAULT *collection.CreateCatReq

func (p *CreateCatArgs) GetReq() *collection.CreateCatReq {
	if !p.IsSetReq() {
		return CreateCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateCatResult struct {
	Success *collection.CreateCatResp
}

var CreateCatResult_Success_DEFAULT *collection.CreateCatResp

func (p *CreateCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(collection.CreateCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateCatResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateCatResult) Unmarshal(in []byte) error {
	msg := new(collection.CreateCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateCatResult) GetSuccess() *collection.CreateCatResp {
	if !p.IsSetSuccess() {
		return CreateCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*collection.CreateCatResp)
}

func (p *CreateCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateCatResult) GetResult() interface{} {
	return p.Success
}

func updateCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(collection.UpdateCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(collection.CollectionService).UpdateCat(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateCatArgs:
		success, err := handler.(collection.CollectionService).UpdateCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCatResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateCatArgs() interface{} {
	return &UpdateCatArgs{}
}

func newUpdateCatResult() interface{} {
	return &UpdateCatResult{}
}

type UpdateCatArgs struct {
	Req *collection.UpdateCatReq
}

func (p *UpdateCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(collection.UpdateCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateCatArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCatArgs) Unmarshal(in []byte) error {
	msg := new(collection.UpdateCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCatArgs_Req_DEFAULT *collection.UpdateCatReq

func (p *UpdateCatArgs) GetReq() *collection.UpdateCatReq {
	if !p.IsSetReq() {
		return UpdateCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCatResult struct {
	Success *collection.UpdateCatResp
}

var UpdateCatResult_Success_DEFAULT *collection.UpdateCatResp

func (p *UpdateCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(collection.UpdateCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateCatResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCatResult) Unmarshal(in []byte) error {
	msg := new(collection.UpdateCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCatResult) GetSuccess() *collection.UpdateCatResp {
	if !p.IsSetSuccess() {
		return UpdateCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*collection.UpdateCatResp)
}

func (p *UpdateCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCatResult) GetResult() interface{} {
	return p.Success
}

func deleteCatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(collection.DeleteCatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(collection.CollectionService).DeleteCat(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteCatArgs:
		success, err := handler.(collection.CollectionService).DeleteCat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCatResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteCatArgs() interface{} {
	return &DeleteCatArgs{}
}

func newDeleteCatResult() interface{} {
	return &DeleteCatResult{}
}

type DeleteCatArgs struct {
	Req *collection.DeleteCatReq
}

func (p *DeleteCatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(collection.DeleteCatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteCatArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCatArgs) Unmarshal(in []byte) error {
	msg := new(collection.DeleteCatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCatArgs_Req_DEFAULT *collection.DeleteCatReq

func (p *DeleteCatArgs) GetReq() *collection.DeleteCatReq {
	if !p.IsSetReq() {
		return DeleteCatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCatArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCatResult struct {
	Success *collection.DeleteCatResp
}

var DeleteCatResult_Success_DEFAULT *collection.DeleteCatResp

func (p *DeleteCatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(collection.DeleteCatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteCatResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCatResult) Unmarshal(in []byte) error {
	msg := new(collection.DeleteCatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCatResult) GetSuccess() *collection.DeleteCatResp {
	if !p.IsSetSuccess() {
		return DeleteCatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCatResult) SetSuccess(x interface{}) {
	p.Success = x.(*collection.DeleteCatResp)
}

func (p *DeleteCatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCatResult) GetResult() interface{} {
	return p.Success
}

func createImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(collection.CreateImageReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(collection.CollectionService).CreateImage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateImageArgs:
		success, err := handler.(collection.CollectionService).CreateImage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateImageResult)
		realResult.Success = success
	}
	return nil
}
func newCreateImageArgs() interface{} {
	return &CreateImageArgs{}
}

func newCreateImageResult() interface{} {
	return &CreateImageResult{}
}

type CreateImageArgs struct {
	Req *collection.CreateImageReq
}

func (p *CreateImageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(collection.CreateImageReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateImageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateImageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateImageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateImageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateImageArgs) Unmarshal(in []byte) error {
	msg := new(collection.CreateImageReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateImageArgs_Req_DEFAULT *collection.CreateImageReq

func (p *CreateImageArgs) GetReq() *collection.CreateImageReq {
	if !p.IsSetReq() {
		return CreateImageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateImageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateImageResult struct {
	Success *collection.CreateImageResp
}

var CreateImageResult_Success_DEFAULT *collection.CreateImageResp

func (p *CreateImageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(collection.CreateImageResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateImageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateImageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateImageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateImageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateImageResult) Unmarshal(in []byte) error {
	msg := new(collection.CreateImageResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateImageResult) GetSuccess() *collection.CreateImageResp {
	if !p.IsSetSuccess() {
		return CreateImageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*collection.CreateImageResp)
}

func (p *CreateImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateImageResult) GetResult() interface{} {
	return p.Success
}

func deleteImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(collection.DeleteImageReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(collection.CollectionService).DeleteImage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteImageArgs:
		success, err := handler.(collection.CollectionService).DeleteImage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteImageResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteImageArgs() interface{} {
	return &DeleteImageArgs{}
}

func newDeleteImageResult() interface{} {
	return &DeleteImageResult{}
}

type DeleteImageArgs struct {
	Req *collection.DeleteImageReq
}

func (p *DeleteImageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(collection.DeleteImageReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteImageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteImageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteImageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteImageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteImageArgs) Unmarshal(in []byte) error {
	msg := new(collection.DeleteImageReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteImageArgs_Req_DEFAULT *collection.DeleteImageReq

func (p *DeleteImageArgs) GetReq() *collection.DeleteImageReq {
	if !p.IsSetReq() {
		return DeleteImageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteImageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteImageResult struct {
	Success *collection.DeleteImageResp
}

var DeleteImageResult_Success_DEFAULT *collection.DeleteImageResp

func (p *DeleteImageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(collection.DeleteImageResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteImageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteImageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteImageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteImageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteImageResult) Unmarshal(in []byte) error {
	msg := new(collection.DeleteImageResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteImageResult) GetSuccess() *collection.DeleteImageResp {
	if !p.IsSetSuccess() {
		return DeleteImageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*collection.DeleteImageResp)
}

func (p *DeleteImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteImageResult) GetResult() interface{} {
	return p.Success
}

func listImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(collection.ListImageReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(collection.CollectionService).ListImage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListImageArgs:
		success, err := handler.(collection.CollectionService).ListImage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListImageResult)
		realResult.Success = success
	}
	return nil
}
func newListImageArgs() interface{} {
	return &ListImageArgs{}
}

func newListImageResult() interface{} {
	return &ListImageResult{}
}

type ListImageArgs struct {
	Req *collection.ListImageReq
}

func (p *ListImageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(collection.ListImageReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListImageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListImageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListImageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListImageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListImageArgs) Unmarshal(in []byte) error {
	msg := new(collection.ListImageReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListImageArgs_Req_DEFAULT *collection.ListImageReq

func (p *ListImageArgs) GetReq() *collection.ListImageReq {
	if !p.IsSetReq() {
		return ListImageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListImageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListImageResult struct {
	Success *collection.ListImageResp
}

var ListImageResult_Success_DEFAULT *collection.ListImageResp

func (p *ListImageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(collection.ListImageResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListImageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListImageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListImageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListImageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListImageResult) Unmarshal(in []byte) error {
	msg := new(collection.ListImageResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListImageResult) GetSuccess() *collection.ListImageResp {
	if !p.IsSetSuccess() {
		return ListImageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*collection.ListImageResp)
}

func (p *ListImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListImageResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SearchCat(ctx context.Context, Req *collection.SearchCatReq) (r *collection.SearchCatResp, err error) {
	var _args SearchCatArgs
	_args.Req = Req
	var _result SearchCatResult
	if err = p.c.Call(ctx, "SearchCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCat(ctx context.Context, Req *collection.ListCatReq) (r *collection.ListCatResp, err error) {
	var _args ListCatArgs
	_args.Req = Req
	var _result ListCatResult
	if err = p.c.Call(ctx, "ListCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrieveCat(ctx context.Context, Req *collection.RetrieveCatReq) (r *collection.RetrieveCatResp, err error) {
	var _args RetrieveCatArgs
	_args.Req = Req
	var _result RetrieveCatResult
	if err = p.c.Call(ctx, "RetrieveCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCat(ctx context.Context, Req *collection.CreateCatReq) (r *collection.CreateCatResp, err error) {
	var _args CreateCatArgs
	_args.Req = Req
	var _result CreateCatResult
	if err = p.c.Call(ctx, "CreateCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCat(ctx context.Context, Req *collection.UpdateCatReq) (r *collection.UpdateCatResp, err error) {
	var _args UpdateCatArgs
	_args.Req = Req
	var _result UpdateCatResult
	if err = p.c.Call(ctx, "UpdateCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCat(ctx context.Context, Req *collection.DeleteCatReq) (r *collection.DeleteCatResp, err error) {
	var _args DeleteCatArgs
	_args.Req = Req
	var _result DeleteCatResult
	if err = p.c.Call(ctx, "DeleteCat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateImage(ctx context.Context, Req *collection.CreateImageReq) (r *collection.CreateImageResp, err error) {
	var _args CreateImageArgs
	_args.Req = Req
	var _result CreateImageResult
	if err = p.c.Call(ctx, "CreateImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteImage(ctx context.Context, Req *collection.DeleteImageReq) (r *collection.DeleteImageResp, err error) {
	var _args DeleteImageArgs
	_args.Req = Req
	var _result DeleteImageResult
	if err = p.c.Call(ctx, "DeleteImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListImage(ctx context.Context, Req *collection.ListImageReq) (r *collection.ListImageResp, err error) {
	var _args ListImageArgs
	_args.Req = Req
	var _result ListImageResult
	if err = p.c.Call(ctx, "ListImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
