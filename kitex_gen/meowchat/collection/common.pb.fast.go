// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package collection

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Cat) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Cat[number], err)
}

func (x *Cat) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Age, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Color, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Details, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Popularity, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Sex, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Area, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.IsSnipped, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.IsSterilized, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Cat) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Avatars = append(x.Avatars, v)
	return offset, err
}

func (x *CreateImageElement) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateImageElement[number], err)
}

func (x *CreateImageElement) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateImageElement) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Image) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Image[number], err)
}

func (x *Image) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Image) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Image) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Cat) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *Cat) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Cat) fastWriteField2(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCreateAt())
	return offset
}

func (x *Cat) fastWriteField3(buf []byte) (offset int) {
	if x.Age == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAge())
	return offset
}

func (x *Cat) fastWriteField4(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCommunityId())
	return offset
}

func (x *Cat) fastWriteField5(buf []byte) (offset int) {
	if x.Color == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetColor())
	return offset
}

func (x *Cat) fastWriteField6(buf []byte) (offset int) {
	if x.Details == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDetails())
	return offset
}

func (x *Cat) fastWriteField7(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetName())
	return offset
}

func (x *Cat) fastWriteField8(buf []byte) (offset int) {
	if x.Popularity == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetPopularity())
	return offset
}

func (x *Cat) fastWriteField9(buf []byte) (offset int) {
	if x.Sex == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetSex())
	return offset
}

func (x *Cat) fastWriteField10(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetStatus())
	return offset
}

func (x *Cat) fastWriteField11(buf []byte) (offset int) {
	if x.Area == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetArea())
	return offset
}

func (x *Cat) fastWriteField12(buf []byte) (offset int) {
	if !x.IsSnipped {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 12, x.GetIsSnipped())
	return offset
}

func (x *Cat) fastWriteField13(buf []byte) (offset int) {
	if !x.IsSterilized {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 13, x.GetIsSterilized())
	return offset
}

func (x *Cat) fastWriteField14(buf []byte) (offset int) {
	if len(x.Avatars) == 0 {
		return offset
	}
	for i := range x.GetAvatars() {
		offset += fastpb.WriteString(buf[offset:], 14, x.GetAvatars()[i])
	}
	return offset
}

func (x *CreateImageElement) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateImageElement) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *CreateImageElement) fastWriteField2(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUrl())
	return offset
}

func (x *Image) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Image) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Image) fastWriteField2(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUrl())
	return offset
}

func (x *Image) fastWriteField3(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCatId())
	return offset
}

func (x *Cat) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *Cat) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Cat) sizeField2() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCreateAt())
	return n
}

func (x *Cat) sizeField3() (n int) {
	if x.Age == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAge())
	return n
}

func (x *Cat) sizeField4() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetCommunityId())
	return n
}

func (x *Cat) sizeField5() (n int) {
	if x.Color == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetColor())
	return n
}

func (x *Cat) sizeField6() (n int) {
	if x.Details == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDetails())
	return n
}

func (x *Cat) sizeField7() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetName())
	return n
}

func (x *Cat) sizeField8() (n int) {
	if x.Popularity == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetPopularity())
	return n
}

func (x *Cat) sizeField9() (n int) {
	if x.Sex == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetSex())
	return n
}

func (x *Cat) sizeField10() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetStatus())
	return n
}

func (x *Cat) sizeField11() (n int) {
	if x.Area == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetArea())
	return n
}

func (x *Cat) sizeField12() (n int) {
	if !x.IsSnipped {
		return n
	}
	n += fastpb.SizeBool(12, x.GetIsSnipped())
	return n
}

func (x *Cat) sizeField13() (n int) {
	if !x.IsSterilized {
		return n
	}
	n += fastpb.SizeBool(13, x.GetIsSterilized())
	return n
}

func (x *Cat) sizeField14() (n int) {
	if len(x.Avatars) == 0 {
		return n
	}
	for i := range x.GetAvatars() {
		n += fastpb.SizeString(14, x.GetAvatars()[i])
	}
	return n
}

func (x *CreateImageElement) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateImageElement) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *CreateImageElement) sizeField2() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUrl())
	return n
}

func (x *Image) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Image) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Image) sizeField2() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUrl())
	return n
}

func (x *Image) sizeField3() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCatId())
	return n
}

var fieldIDToName_Cat = map[int32]string{
	1:  "Id",
	2:  "CreateAt",
	3:  "Age",
	4:  "CommunityId",
	5:  "Color",
	6:  "Details",
	7:  "Name",
	8:  "Popularity",
	9:  "Sex",
	10: "Status",
	11: "Area",
	12: "IsSnipped",
	13: "IsSterilized",
	14: "Avatars",
}

var fieldIDToName_CreateImageElement = map[int32]string{
	1: "CatId",
	2: "Url",
}

var fieldIDToName_Image = map[int32]string{
	1: "Id",
	2: "Url",
	3: "CatId",
}
