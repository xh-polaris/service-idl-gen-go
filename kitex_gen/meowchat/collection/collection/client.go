// Code generated by Kitex v0.6.2. DO NOT EDIT.

package collection

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	collection "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/collection"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SearchCat(ctx context.Context, Req *collection.SearchCatReq, callOptions ...callopt.Option) (r *collection.SearchCatResp, err error)
	ListCat(ctx context.Context, Req *collection.ListCatReq, callOptions ...callopt.Option) (r *collection.ListCatResp, err error)
	RetrieveCat(ctx context.Context, Req *collection.RetrieveCatReq, callOptions ...callopt.Option) (r *collection.RetrieveCatResp, err error)
	CreateCat(ctx context.Context, Req *collection.CreateCatReq, callOptions ...callopt.Option) (r *collection.CreateCatResp, err error)
	UpdateCat(ctx context.Context, Req *collection.UpdateCatReq, callOptions ...callopt.Option) (r *collection.UpdateCatResp, err error)
	DeleteCat(ctx context.Context, Req *collection.DeleteCatReq, callOptions ...callopt.Option) (r *collection.DeleteCatResp, err error)
	CreateImage(ctx context.Context, Req *collection.CreateImageReq, callOptions ...callopt.Option) (r *collection.CreateImageResp, err error)
	DeleteImage(ctx context.Context, Req *collection.DeleteImageReq, callOptions ...callopt.Option) (r *collection.DeleteImageResp, err error)
	ListImage(ctx context.Context, Req *collection.ListImageReq, callOptions ...callopt.Option) (r *collection.ListImageResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kCollectionClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCollectionClient struct {
	*kClient
}

func (p *kCollectionClient) SearchCat(ctx context.Context, Req *collection.SearchCatReq, callOptions ...callopt.Option) (r *collection.SearchCatResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchCat(ctx, Req)
}

func (p *kCollectionClient) ListCat(ctx context.Context, Req *collection.ListCatReq, callOptions ...callopt.Option) (r *collection.ListCatResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCat(ctx, Req)
}

func (p *kCollectionClient) RetrieveCat(ctx context.Context, Req *collection.RetrieveCatReq, callOptions ...callopt.Option) (r *collection.RetrieveCatResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RetrieveCat(ctx, Req)
}

func (p *kCollectionClient) CreateCat(ctx context.Context, Req *collection.CreateCatReq, callOptions ...callopt.Option) (r *collection.CreateCatResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCat(ctx, Req)
}

func (p *kCollectionClient) UpdateCat(ctx context.Context, Req *collection.UpdateCatReq, callOptions ...callopt.Option) (r *collection.UpdateCatResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCat(ctx, Req)
}

func (p *kCollectionClient) DeleteCat(ctx context.Context, Req *collection.DeleteCatReq, callOptions ...callopt.Option) (r *collection.DeleteCatResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCat(ctx, Req)
}

func (p *kCollectionClient) CreateImage(ctx context.Context, Req *collection.CreateImageReq, callOptions ...callopt.Option) (r *collection.CreateImageResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateImage(ctx, Req)
}

func (p *kCollectionClient) DeleteImage(ctx context.Context, Req *collection.DeleteImageReq, callOptions ...callopt.Option) (r *collection.DeleteImageResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteImage(ctx, Req)
}

func (p *kCollectionClient) ListImage(ctx context.Context, Req *collection.ListImageReq, callOptions ...callopt.Option) (r *collection.ListImageResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListImage(ctx, Req)
}
