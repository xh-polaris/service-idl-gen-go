// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package collection

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SearchCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchCatReq[number], err)
}

func (x *SearchCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchCatReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Skip, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchCatReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchCatReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchCatResp[number], err)
}

func (x *SearchCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Cat
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cats = append(x.Cats, &v)
	return offset, nil
}

func (x *SearchCatResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCatReq[number], err)
}

func (x *ListCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListCatReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCatReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Skip, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListCatResp[number], err)
}

func (x *ListCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Cat
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cats = append(x.Cats, &v)
	return offset, nil
}

func (x *ListCatResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RetrieveCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveCatReq[number], err)
}

func (x *RetrieveCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RetrieveCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveCatResp[number], err)
}

func (x *RetrieveCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Cat
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cat = &v
	return offset, nil
}

func (x *CreateCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateCatReq[number], err)
}

func (x *CreateCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Cat
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cat = &v
	return offset, nil
}

func (x *CreateCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateCatResp[number], err)
}

func (x *CreateCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateCatReq[number], err)
}

func (x *UpdateCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Cat
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cat = &v
	return offset, nil
}

func (x *UpdateCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCatReq[number], err)
}

func (x *DeleteCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CreateImageReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateImageReq[number], err)
}

func (x *CreateImageReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CreateImageElement
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Images = append(x.Images, &v)
	return offset, nil
}

func (x *CreateImageResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateImageResp[number], err)
}

func (x *CreateImageResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ImageIds = append(x.ImageIds, v)
	return offset, err
}

func (x *DeleteImageReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteImageReq[number], err)
}

func (x *DeleteImageReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ImageId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteImageResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *ListImageReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListImageReq[number], err)
}

func (x *ListImageReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListImageReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.PrevId = &tmp
	return offset, err
}

func (x *ListImageReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListImageReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Offset, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListImageReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Backward, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ListImageResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListImageResp[number], err)
}

func (x *ListImageResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Image
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Images = append(x.Images, &v)
	return offset, nil
}

func (x *ListImageResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SearchCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCount())
	return offset
}

func (x *SearchCatReq) fastWriteField2(buf []byte) (offset int) {
	if x.Skip == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetSkip())
	return offset
}

func (x *SearchCatReq) fastWriteField3(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCommunityId())
	return offset
}

func (x *SearchCatReq) fastWriteField4(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetKeyword())
	return offset
}

func (x *SearchCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SearchCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cats == nil {
		return offset
	}
	for i := range x.GetCats() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCats()[i])
	}
	return offset
}

func (x *SearchCatResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *ListCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ListCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCommunityId())
	return offset
}

func (x *ListCatReq) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCount())
	return offset
}

func (x *ListCatReq) fastWriteField3(buf []byte) (offset int) {
	if x.Skip == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetSkip())
	return offset
}

func (x *ListCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cats == nil {
		return offset
	}
	for i := range x.GetCats() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCats()[i])
	}
	return offset
}

func (x *ListCatResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *RetrieveCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *RetrieveCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cat == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCat())
	return offset
}

func (x *CreateCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.Cat == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCat())
	return offset
}

func (x *CreateCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *UpdateCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.Cat == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCat())
	return offset
}

func (x *UpdateCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *DeleteCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CreateImageReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateImageReq) fastWriteField1(buf []byte) (offset int) {
	if x.Images == nil {
		return offset
	}
	for i := range x.GetImages() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetImages()[i])
	}
	return offset
}

func (x *CreateImageResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateImageResp) fastWriteField1(buf []byte) (offset int) {
	if len(x.ImageIds) == 0 {
		return offset
	}
	for i := range x.GetImageIds() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetImageIds()[i])
	}
	return offset
}

func (x *DeleteImageReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteImageReq) fastWriteField1(buf []byte) (offset int) {
	if x.ImageId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetImageId())
	return offset
}

func (x *DeleteImageResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *ListImageReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *ListImageReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *ListImageReq) fastWriteField2(buf []byte) (offset int) {
	if x.PrevId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPrevId())
	return offset
}

func (x *ListImageReq) fastWriteField3(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetLimit())
	return offset
}

func (x *ListImageReq) fastWriteField4(buf []byte) (offset int) {
	if x.Offset == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetOffset())
	return offset
}

func (x *ListImageReq) fastWriteField5(buf []byte) (offset int) {
	if !x.Backward {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.GetBackward())
	return offset
}

func (x *ListImageResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListImageResp) fastWriteField1(buf []byte) (offset int) {
	if x.Images == nil {
		return offset
	}
	for i := range x.GetImages() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetImages()[i])
	}
	return offset
}

func (x *ListImageResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *SearchCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SearchCatReq) sizeField1() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCount())
	return n
}

func (x *SearchCatReq) sizeField2() (n int) {
	if x.Skip == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetSkip())
	return n
}

func (x *SearchCatReq) sizeField3() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCommunityId())
	return n
}

func (x *SearchCatReq) sizeField4() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetKeyword())
	return n
}

func (x *SearchCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SearchCatResp) sizeField1() (n int) {
	if x.Cats == nil {
		return n
	}
	for i := range x.GetCats() {
		n += fastpb.SizeMessage(1, x.GetCats()[i])
	}
	return n
}

func (x *SearchCatResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *ListCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ListCatReq) sizeField1() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCommunityId())
	return n
}

func (x *ListCatReq) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCount())
	return n
}

func (x *ListCatReq) sizeField3() (n int) {
	if x.Skip == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetSkip())
	return n
}

func (x *ListCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListCatResp) sizeField1() (n int) {
	if x.Cats == nil {
		return n
	}
	for i := range x.GetCats() {
		n += fastpb.SizeMessage(1, x.GetCats()[i])
	}
	return n
}

func (x *ListCatResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *RetrieveCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveCatReq) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *RetrieveCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveCatResp) sizeField1() (n int) {
	if x.Cat == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCat())
	return n
}

func (x *CreateCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateCatReq) sizeField1() (n int) {
	if x.Cat == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCat())
	return n
}

func (x *CreateCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateCatResp) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *UpdateCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateCatReq) sizeField1() (n int) {
	if x.Cat == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCat())
	return n
}

func (x *UpdateCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCatReq) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *DeleteCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CreateImageReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateImageReq) sizeField1() (n int) {
	if x.Images == nil {
		return n
	}
	for i := range x.GetImages() {
		n += fastpb.SizeMessage(1, x.GetImages()[i])
	}
	return n
}

func (x *CreateImageResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateImageResp) sizeField1() (n int) {
	if len(x.ImageIds) == 0 {
		return n
	}
	for i := range x.GetImageIds() {
		n += fastpb.SizeString(1, x.GetImageIds()[i])
	}
	return n
}

func (x *DeleteImageReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteImageReq) sizeField1() (n int) {
	if x.ImageId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetImageId())
	return n
}

func (x *DeleteImageResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *ListImageReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *ListImageReq) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *ListImageReq) sizeField2() (n int) {
	if x.PrevId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetPrevId())
	return n
}

func (x *ListImageReq) sizeField3() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetLimit())
	return n
}

func (x *ListImageReq) sizeField4() (n int) {
	if x.Offset == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetOffset())
	return n
}

func (x *ListImageReq) sizeField5() (n int) {
	if !x.Backward {
		return n
	}
	n += fastpb.SizeBool(5, x.GetBackward())
	return n
}

func (x *ListImageResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListImageResp) sizeField1() (n int) {
	if x.Images == nil {
		return n
	}
	for i := range x.GetImages() {
		n += fastpb.SizeMessage(1, x.GetImages()[i])
	}
	return n
}

func (x *ListImageResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

var fieldIDToName_SearchCatReq = map[int32]string{
	1: "Count",
	2: "Skip",
	3: "CommunityId",
	4: "Keyword",
}

var fieldIDToName_SearchCatResp = map[int32]string{
	1: "Cats",
	2: "Total",
}

var fieldIDToName_ListCatReq = map[int32]string{
	1: "CommunityId",
	2: "Count",
	3: "Skip",
}

var fieldIDToName_ListCatResp = map[int32]string{
	1: "Cats",
	2: "Total",
}

var fieldIDToName_RetrieveCatReq = map[int32]string{
	1: "CatId",
}

var fieldIDToName_RetrieveCatResp = map[int32]string{
	1: "Cat",
}

var fieldIDToName_CreateCatReq = map[int32]string{
	1: "Cat",
}

var fieldIDToName_CreateCatResp = map[int32]string{
	1: "CatId",
}

var fieldIDToName_UpdateCatReq = map[int32]string{
	1: "Cat",
}

var fieldIDToName_UpdateCatResp = map[int32]string{}

var fieldIDToName_DeleteCatReq = map[int32]string{
	1: "CatId",
}

var fieldIDToName_DeleteCatResp = map[int32]string{}

var fieldIDToName_CreateImageReq = map[int32]string{
	1: "Images",
}

var fieldIDToName_CreateImageResp = map[int32]string{
	1: "ImageIds",
}

var fieldIDToName_DeleteImageReq = map[int32]string{
	1: "ImageId",
}

var fieldIDToName_DeleteImageResp = map[int32]string{}

var fieldIDToName_ListImageReq = map[int32]string{
	1: "CatId",
	2: "PrevId",
	3: "Limit",
	4: "Offset",
	5: "Backward",
}

var fieldIDToName_ListImageResp = map[int32]string{
	1: "Images",
	2: "Total",
}
