// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package moment

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *ListMomentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListMomentReq[number], err)
}

func (x *ListMomentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SearchOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SearchOptions = &v
	return offset, nil
}

func (x *ListMomentReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v FilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *ListMomentReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOptions = &v
	return offset, nil
}

func (x *ListMomentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListMomentResp[number], err)
}

func (x *ListMomentResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Moment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Moments = append(x.Moments, &v)
	return offset, nil
}

func (x *ListMomentResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListMomentResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CountMomentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CountMomentReq[number], err)
}

func (x *CountMomentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SearchOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SearchOptions = &v
	return offset, nil
}

func (x *CountMomentReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v FilterOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FilterOptions = &v
	return offset, nil
}

func (x *CountMomentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CountMomentResp[number], err)
}

func (x *CountMomentResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RetrieveMomentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveMomentReq[number], err)
}

func (x *RetrieveMomentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MomentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RetrieveMomentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RetrieveMomentResp[number], err)
}

func (x *RetrieveMomentResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Moment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Moment = &v
	return offset, nil
}

func (x *CreateMomentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateMomentReq[number], err)
}

func (x *CreateMomentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Moment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Moment = &v
	return offset, nil
}

func (x *CreateMomentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateMomentResp[number], err)
}

func (x *CreateMomentResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MomentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMomentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateMomentReq[number], err)
}

func (x *UpdateMomentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Moment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Moment = &v
	return offset, nil
}

func (x *UpdateMomentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *DeleteMomentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteMomentReq[number], err)
}

func (x *DeleteMomentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MomentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteMomentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *ListMomentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ListMomentReq) fastWriteField1(buf []byte) (offset int) {
	if x.SearchOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSearchOptions())
	return offset
}

func (x *ListMomentReq) fastWriteField2(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetFilterOptions())
	return offset
}

func (x *ListMomentReq) fastWriteField3(buf []byte) (offset int) {
	if x.PaginationOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetPaginationOptions())
	return offset
}

func (x *ListMomentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ListMomentResp) fastWriteField1(buf []byte) (offset int) {
	if x.Moments == nil {
		return offset
	}
	for i := range x.GetMoments() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMoments()[i])
	}
	return offset
}

func (x *ListMomentResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *ListMomentResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *CountMomentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CountMomentReq) fastWriteField1(buf []byte) (offset int) {
	if x.SearchOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSearchOptions())
	return offset
}

func (x *CountMomentReq) fastWriteField2(buf []byte) (offset int) {
	if x.FilterOptions == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetFilterOptions())
	return offset
}

func (x *CountMomentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CountMomentResp) fastWriteField1(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTotal())
	return offset
}

func (x *RetrieveMomentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveMomentReq) fastWriteField1(buf []byte) (offset int) {
	if x.MomentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMomentId())
	return offset
}

func (x *RetrieveMomentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RetrieveMomentResp) fastWriteField1(buf []byte) (offset int) {
	if x.Moment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMoment())
	return offset
}

func (x *CreateMomentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateMomentReq) fastWriteField1(buf []byte) (offset int) {
	if x.Moment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMoment())
	return offset
}

func (x *CreateMomentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateMomentResp) fastWriteField1(buf []byte) (offset int) {
	if x.MomentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMomentId())
	return offset
}

func (x *UpdateMomentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateMomentReq) fastWriteField1(buf []byte) (offset int) {
	if x.Moment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMoment())
	return offset
}

func (x *UpdateMomentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *DeleteMomentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteMomentReq) fastWriteField1(buf []byte) (offset int) {
	if x.MomentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMomentId())
	return offset
}

func (x *DeleteMomentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *ListMomentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ListMomentReq) sizeField1() (n int) {
	if x.SearchOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSearchOptions())
	return n
}

func (x *ListMomentReq) sizeField2() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetFilterOptions())
	return n
}

func (x *ListMomentReq) sizeField3() (n int) {
	if x.PaginationOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetPaginationOptions())
	return n
}

func (x *ListMomentResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ListMomentResp) sizeField1() (n int) {
	if x.Moments == nil {
		return n
	}
	for i := range x.GetMoments() {
		n += fastpb.SizeMessage(1, x.GetMoments()[i])
	}
	return n
}

func (x *ListMomentResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *ListMomentResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *CountMomentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CountMomentReq) sizeField1() (n int) {
	if x.SearchOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSearchOptions())
	return n
}

func (x *CountMomentReq) sizeField2() (n int) {
	if x.FilterOptions == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetFilterOptions())
	return n
}

func (x *CountMomentResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CountMomentResp) sizeField1() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTotal())
	return n
}

func (x *RetrieveMomentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveMomentReq) sizeField1() (n int) {
	if x.MomentId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMomentId())
	return n
}

func (x *RetrieveMomentResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RetrieveMomentResp) sizeField1() (n int) {
	if x.Moment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMoment())
	return n
}

func (x *CreateMomentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateMomentReq) sizeField1() (n int) {
	if x.Moment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMoment())
	return n
}

func (x *CreateMomentResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateMomentResp) sizeField1() (n int) {
	if x.MomentId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMomentId())
	return n
}

func (x *UpdateMomentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateMomentReq) sizeField1() (n int) {
	if x.Moment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMoment())
	return n
}

func (x *UpdateMomentResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *DeleteMomentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteMomentReq) sizeField1() (n int) {
	if x.MomentId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMomentId())
	return n
}

func (x *DeleteMomentResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

var fieldIDToName_ListMomentReq = map[int32]string{
	1: "SearchOptions",
	2: "FilterOptions",
	3: "PaginationOptions",
}

var fieldIDToName_ListMomentResp = map[int32]string{
	1: "Moments",
	2: "Total",
	3: "Token",
}

var fieldIDToName_CountMomentReq = map[int32]string{
	1: "SearchOptions",
	2: "FilterOptions",
}

var fieldIDToName_CountMomentResp = map[int32]string{
	1: "Total",
}

var fieldIDToName_RetrieveMomentReq = map[int32]string{
	1: "MomentId",
}

var fieldIDToName_RetrieveMomentResp = map[int32]string{
	1: "Moment",
}

var fieldIDToName_CreateMomentReq = map[int32]string{
	1: "Moment",
}

var fieldIDToName_CreateMomentResp = map[int32]string{
	1: "MomentId",
}

var fieldIDToName_UpdateMomentReq = map[int32]string{
	1: "Moment",
}

var fieldIDToName_UpdateMomentResp = map[int32]string{}

var fieldIDToName_DeleteMomentReq = map[int32]string{
	1: "MomentId",
}

var fieldIDToName_DeleteMomentResp = map[int32]string{}

var _ = basic.File_basic_pagination_proto
