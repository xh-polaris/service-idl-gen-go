// Code generated by Kitex v0.6.2. DO NOT EDIT.

package momentrpc

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	moment "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/moment"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return momentRpcServiceInfo
}

var momentRpcServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "moment_rpc"
	handlerType := (*moment.MomentRpc)(nil)
	methods := map[string]kitex.MethodInfo{
		"ListMoment":     kitex.NewMethodInfo(listMomentHandler, newListMomentArgs, newListMomentResult, false),
		"CountMoment":    kitex.NewMethodInfo(countMomentHandler, newCountMomentArgs, newCountMomentResult, false),
		"RetrieveMoment": kitex.NewMethodInfo(retrieveMomentHandler, newRetrieveMomentArgs, newRetrieveMomentResult, false),
		"CreateMoment":   kitex.NewMethodInfo(createMomentHandler, newCreateMomentArgs, newCreateMomentResult, false),
		"UpdateMoment":   kitex.NewMethodInfo(updateMomentHandler, newUpdateMomentArgs, newUpdateMomentResult, false),
		"DeleteMoment":   kitex.NewMethodInfo(deleteMomentHandler, newDeleteMomentArgs, newDeleteMomentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "meowchat.moment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func listMomentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(moment.ListMomentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(moment.MomentRpc).ListMoment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListMomentArgs:
		success, err := handler.(moment.MomentRpc).ListMoment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListMomentResult)
		realResult.Success = success
	}
	return nil
}
func newListMomentArgs() interface{} {
	return &ListMomentArgs{}
}

func newListMomentResult() interface{} {
	return &ListMomentResult{}
}

type ListMomentArgs struct {
	Req *moment.ListMomentReq
}

func (p *ListMomentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(moment.ListMomentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListMomentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListMomentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListMomentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListMomentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListMomentArgs) Unmarshal(in []byte) error {
	msg := new(moment.ListMomentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListMomentArgs_Req_DEFAULT *moment.ListMomentReq

func (p *ListMomentArgs) GetReq() *moment.ListMomentReq {
	if !p.IsSetReq() {
		return ListMomentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListMomentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListMomentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListMomentResult struct {
	Success *moment.ListMomentResp
}

var ListMomentResult_Success_DEFAULT *moment.ListMomentResp

func (p *ListMomentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(moment.ListMomentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListMomentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListMomentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListMomentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListMomentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListMomentResult) Unmarshal(in []byte) error {
	msg := new(moment.ListMomentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListMomentResult) GetSuccess() *moment.ListMomentResp {
	if !p.IsSetSuccess() {
		return ListMomentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListMomentResult) SetSuccess(x interface{}) {
	p.Success = x.(*moment.ListMomentResp)
}

func (p *ListMomentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListMomentResult) GetResult() interface{} {
	return p.Success
}

func countMomentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(moment.CountMomentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(moment.MomentRpc).CountMoment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CountMomentArgs:
		success, err := handler.(moment.MomentRpc).CountMoment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CountMomentResult)
		realResult.Success = success
	}
	return nil
}
func newCountMomentArgs() interface{} {
	return &CountMomentArgs{}
}

func newCountMomentResult() interface{} {
	return &CountMomentResult{}
}

type CountMomentArgs struct {
	Req *moment.CountMomentReq
}

func (p *CountMomentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(moment.CountMomentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CountMomentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CountMomentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CountMomentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CountMomentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CountMomentArgs) Unmarshal(in []byte) error {
	msg := new(moment.CountMomentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CountMomentArgs_Req_DEFAULT *moment.CountMomentReq

func (p *CountMomentArgs) GetReq() *moment.CountMomentReq {
	if !p.IsSetReq() {
		return CountMomentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CountMomentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CountMomentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CountMomentResult struct {
	Success *moment.CountMomentResp
}

var CountMomentResult_Success_DEFAULT *moment.CountMomentResp

func (p *CountMomentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(moment.CountMomentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CountMomentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CountMomentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CountMomentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CountMomentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CountMomentResult) Unmarshal(in []byte) error {
	msg := new(moment.CountMomentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CountMomentResult) GetSuccess() *moment.CountMomentResp {
	if !p.IsSetSuccess() {
		return CountMomentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CountMomentResult) SetSuccess(x interface{}) {
	p.Success = x.(*moment.CountMomentResp)
}

func (p *CountMomentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CountMomentResult) GetResult() interface{} {
	return p.Success
}

func retrieveMomentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(moment.RetrieveMomentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(moment.MomentRpc).RetrieveMoment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RetrieveMomentArgs:
		success, err := handler.(moment.MomentRpc).RetrieveMoment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RetrieveMomentResult)
		realResult.Success = success
	}
	return nil
}
func newRetrieveMomentArgs() interface{} {
	return &RetrieveMomentArgs{}
}

func newRetrieveMomentResult() interface{} {
	return &RetrieveMomentResult{}
}

type RetrieveMomentArgs struct {
	Req *moment.RetrieveMomentReq
}

func (p *RetrieveMomentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(moment.RetrieveMomentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RetrieveMomentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RetrieveMomentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RetrieveMomentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RetrieveMomentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RetrieveMomentArgs) Unmarshal(in []byte) error {
	msg := new(moment.RetrieveMomentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RetrieveMomentArgs_Req_DEFAULT *moment.RetrieveMomentReq

func (p *RetrieveMomentArgs) GetReq() *moment.RetrieveMomentReq {
	if !p.IsSetReq() {
		return RetrieveMomentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RetrieveMomentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RetrieveMomentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RetrieveMomentResult struct {
	Success *moment.RetrieveMomentResp
}

var RetrieveMomentResult_Success_DEFAULT *moment.RetrieveMomentResp

func (p *RetrieveMomentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(moment.RetrieveMomentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RetrieveMomentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RetrieveMomentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RetrieveMomentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RetrieveMomentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RetrieveMomentResult) Unmarshal(in []byte) error {
	msg := new(moment.RetrieveMomentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RetrieveMomentResult) GetSuccess() *moment.RetrieveMomentResp {
	if !p.IsSetSuccess() {
		return RetrieveMomentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RetrieveMomentResult) SetSuccess(x interface{}) {
	p.Success = x.(*moment.RetrieveMomentResp)
}

func (p *RetrieveMomentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RetrieveMomentResult) GetResult() interface{} {
	return p.Success
}

func createMomentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(moment.CreateMomentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(moment.MomentRpc).CreateMoment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateMomentArgs:
		success, err := handler.(moment.MomentRpc).CreateMoment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateMomentResult)
		realResult.Success = success
	}
	return nil
}
func newCreateMomentArgs() interface{} {
	return &CreateMomentArgs{}
}

func newCreateMomentResult() interface{} {
	return &CreateMomentResult{}
}

type CreateMomentArgs struct {
	Req *moment.CreateMomentReq
}

func (p *CreateMomentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(moment.CreateMomentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateMomentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateMomentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateMomentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateMomentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateMomentArgs) Unmarshal(in []byte) error {
	msg := new(moment.CreateMomentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateMomentArgs_Req_DEFAULT *moment.CreateMomentReq

func (p *CreateMomentArgs) GetReq() *moment.CreateMomentReq {
	if !p.IsSetReq() {
		return CreateMomentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateMomentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateMomentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateMomentResult struct {
	Success *moment.CreateMomentResp
}

var CreateMomentResult_Success_DEFAULT *moment.CreateMomentResp

func (p *CreateMomentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(moment.CreateMomentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateMomentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateMomentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateMomentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateMomentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateMomentResult) Unmarshal(in []byte) error {
	msg := new(moment.CreateMomentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateMomentResult) GetSuccess() *moment.CreateMomentResp {
	if !p.IsSetSuccess() {
		return CreateMomentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateMomentResult) SetSuccess(x interface{}) {
	p.Success = x.(*moment.CreateMomentResp)
}

func (p *CreateMomentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateMomentResult) GetResult() interface{} {
	return p.Success
}

func updateMomentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(moment.UpdateMomentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(moment.MomentRpc).UpdateMoment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateMomentArgs:
		success, err := handler.(moment.MomentRpc).UpdateMoment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateMomentResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateMomentArgs() interface{} {
	return &UpdateMomentArgs{}
}

func newUpdateMomentResult() interface{} {
	return &UpdateMomentResult{}
}

type UpdateMomentArgs struct {
	Req *moment.UpdateMomentReq
}

func (p *UpdateMomentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(moment.UpdateMomentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateMomentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateMomentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateMomentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateMomentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateMomentArgs) Unmarshal(in []byte) error {
	msg := new(moment.UpdateMomentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateMomentArgs_Req_DEFAULT *moment.UpdateMomentReq

func (p *UpdateMomentArgs) GetReq() *moment.UpdateMomentReq {
	if !p.IsSetReq() {
		return UpdateMomentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateMomentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateMomentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateMomentResult struct {
	Success *moment.UpdateMomentResp
}

var UpdateMomentResult_Success_DEFAULT *moment.UpdateMomentResp

func (p *UpdateMomentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(moment.UpdateMomentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateMomentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateMomentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateMomentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateMomentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateMomentResult) Unmarshal(in []byte) error {
	msg := new(moment.UpdateMomentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateMomentResult) GetSuccess() *moment.UpdateMomentResp {
	if !p.IsSetSuccess() {
		return UpdateMomentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateMomentResult) SetSuccess(x interface{}) {
	p.Success = x.(*moment.UpdateMomentResp)
}

func (p *UpdateMomentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateMomentResult) GetResult() interface{} {
	return p.Success
}

func deleteMomentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(moment.DeleteMomentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(moment.MomentRpc).DeleteMoment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteMomentArgs:
		success, err := handler.(moment.MomentRpc).DeleteMoment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteMomentResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteMomentArgs() interface{} {
	return &DeleteMomentArgs{}
}

func newDeleteMomentResult() interface{} {
	return &DeleteMomentResult{}
}

type DeleteMomentArgs struct {
	Req *moment.DeleteMomentReq
}

func (p *DeleteMomentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(moment.DeleteMomentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteMomentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteMomentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteMomentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteMomentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteMomentArgs) Unmarshal(in []byte) error {
	msg := new(moment.DeleteMomentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteMomentArgs_Req_DEFAULT *moment.DeleteMomentReq

func (p *DeleteMomentArgs) GetReq() *moment.DeleteMomentReq {
	if !p.IsSetReq() {
		return DeleteMomentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteMomentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteMomentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteMomentResult struct {
	Success *moment.DeleteMomentResp
}

var DeleteMomentResult_Success_DEFAULT *moment.DeleteMomentResp

func (p *DeleteMomentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(moment.DeleteMomentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteMomentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteMomentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteMomentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteMomentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteMomentResult) Unmarshal(in []byte) error {
	msg := new(moment.DeleteMomentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteMomentResult) GetSuccess() *moment.DeleteMomentResp {
	if !p.IsSetSuccess() {
		return DeleteMomentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteMomentResult) SetSuccess(x interface{}) {
	p.Success = x.(*moment.DeleteMomentResp)
}

func (p *DeleteMomentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteMomentResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ListMoment(ctx context.Context, Req *moment.ListMomentReq) (r *moment.ListMomentResp, err error) {
	var _args ListMomentArgs
	_args.Req = Req
	var _result ListMomentResult
	if err = p.c.Call(ctx, "ListMoment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountMoment(ctx context.Context, Req *moment.CountMomentReq) (r *moment.CountMomentResp, err error) {
	var _args CountMomentArgs
	_args.Req = Req
	var _result CountMomentResult
	if err = p.c.Call(ctx, "CountMoment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetrieveMoment(ctx context.Context, Req *moment.RetrieveMomentReq) (r *moment.RetrieveMomentResp, err error) {
	var _args RetrieveMomentArgs
	_args.Req = Req
	var _result RetrieveMomentResult
	if err = p.c.Call(ctx, "RetrieveMoment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMoment(ctx context.Context, Req *moment.CreateMomentReq) (r *moment.CreateMomentResp, err error) {
	var _args CreateMomentArgs
	_args.Req = Req
	var _result CreateMomentResult
	if err = p.c.Call(ctx, "CreateMoment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMoment(ctx context.Context, Req *moment.UpdateMomentReq) (r *moment.UpdateMomentResp, err error) {
	var _args UpdateMomentArgs
	_args.Req = Req
	var _result UpdateMomentResult
	if err = p.c.Call(ctx, "UpdateMoment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMoment(ctx context.Context, Req *moment.DeleteMomentReq) (r *moment.DeleteMomentResp, err error) {
	var _args DeleteMomentArgs
	_args.Req = Req
	var _result DeleteMomentResult
	if err = p.c.Call(ctx, "DeleteMoment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
