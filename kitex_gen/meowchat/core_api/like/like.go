// Code generated by Kitex v0.8.0. DO NOT EDIT.

package like

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/core_api"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return likeServiceInfo
}

var likeServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "like"
	handlerType := (*core_api.Like)(nil)
	methods := map[string]kitex.MethodInfo{
		"DoLike":              kitex.NewMethodInfo(doLikeHandler, newDoLikeArgs, newDoLikeResult, false),
		"GetUserLiked":        kitex.NewMethodInfo(getUserLikedHandler, newGetUserLikedArgs, newGetUserLikedResult, false),
		"GetLikedCount":       kitex.NewMethodInfo(getLikedCountHandler, newGetLikedCountArgs, newGetLikedCountResult, false),
		"GetLikedUsers":       kitex.NewMethodInfo(getLikedUsersHandler, newGetLikedUsersArgs, newGetLikedUsersResult, false),
		"GetUserLikes":        kitex.NewMethodInfo(getUserLikesHandler, newGetUserLikesArgs, newGetUserLikesResult, false),
		"GetUserLikeContents": kitex.NewMethodInfo(getUserLikeContentsHandler, newGetUserLikeContentsArgs, newGetUserLikeContentsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "meowchat.core_api",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func doLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DoLikeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Like).DoLike(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DoLikeArgs:
		success, err := handler.(core_api.Like).DoLike(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoLikeResult)
		realResult.Success = success
	}
	return nil
}
func newDoLikeArgs() interface{} {
	return &DoLikeArgs{}
}

func newDoLikeResult() interface{} {
	return &DoLikeResult{}
}

type DoLikeArgs struct {
	Req *core_api.DoLikeReq
}

func (p *DoLikeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DoLikeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoLikeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoLikeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoLikeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoLikeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DoLikeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoLikeArgs_Req_DEFAULT *core_api.DoLikeReq

func (p *DoLikeArgs) GetReq() *core_api.DoLikeReq {
	if !p.IsSetReq() {
		return DoLikeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoLikeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoLikeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoLikeResult struct {
	Success *core_api.DoLikeResp
}

var DoLikeResult_Success_DEFAULT *core_api.DoLikeResp

func (p *DoLikeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DoLikeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoLikeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoLikeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoLikeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoLikeResult) Unmarshal(in []byte) error {
	msg := new(core_api.DoLikeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoLikeResult) GetSuccess() *core_api.DoLikeResp {
	if !p.IsSetSuccess() {
		return DoLikeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoLikeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DoLikeResp)
}

func (p *DoLikeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoLikeResult) GetResult() interface{} {
	return p.Success
}

func getUserLikedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserLikedReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Like).GetUserLiked(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserLikedArgs:
		success, err := handler.(core_api.Like).GetUserLiked(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserLikedResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserLikedArgs() interface{} {
	return &GetUserLikedArgs{}
}

func newGetUserLikedResult() interface{} {
	return &GetUserLikedResult{}
}

type GetUserLikedArgs struct {
	Req *core_api.GetUserLikedReq
}

func (p *GetUserLikedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserLikedReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserLikedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserLikedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserLikedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserLikedArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserLikedReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserLikedArgs_Req_DEFAULT *core_api.GetUserLikedReq

func (p *GetUserLikedArgs) GetReq() *core_api.GetUserLikedReq {
	if !p.IsSetReq() {
		return GetUserLikedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserLikedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserLikedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserLikedResult struct {
	Success *core_api.GetUserLikedResp
}

var GetUserLikedResult_Success_DEFAULT *core_api.GetUserLikedResp

func (p *GetUserLikedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserLikedResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserLikedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserLikedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserLikedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserLikedResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserLikedResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserLikedResult) GetSuccess() *core_api.GetUserLikedResp {
	if !p.IsSetSuccess() {
		return GetUserLikedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserLikedResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserLikedResp)
}

func (p *GetUserLikedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserLikedResult) GetResult() interface{} {
	return p.Success
}

func getLikedCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetLikedCountReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Like).GetLikedCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLikedCountArgs:
		success, err := handler.(core_api.Like).GetLikedCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLikedCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetLikedCountArgs() interface{} {
	return &GetLikedCountArgs{}
}

func newGetLikedCountResult() interface{} {
	return &GetLikedCountResult{}
}

type GetLikedCountArgs struct {
	Req *core_api.GetLikedCountReq
}

func (p *GetLikedCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetLikedCountReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLikedCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLikedCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLikedCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLikedCountArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetLikedCountReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLikedCountArgs_Req_DEFAULT *core_api.GetLikedCountReq

func (p *GetLikedCountArgs) GetReq() *core_api.GetLikedCountReq {
	if !p.IsSetReq() {
		return GetLikedCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLikedCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLikedCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLikedCountResult struct {
	Success *core_api.GetLikedCountResp
}

var GetLikedCountResult_Success_DEFAULT *core_api.GetLikedCountResp

func (p *GetLikedCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetLikedCountResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLikedCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLikedCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLikedCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLikedCountResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetLikedCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLikedCountResult) GetSuccess() *core_api.GetLikedCountResp {
	if !p.IsSetSuccess() {
		return GetLikedCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLikedCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetLikedCountResp)
}

func (p *GetLikedCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLikedCountResult) GetResult() interface{} {
	return p.Success
}

func getLikedUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetLikedUsersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Like).GetLikedUsers(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLikedUsersArgs:
		success, err := handler.(core_api.Like).GetLikedUsers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLikedUsersResult)
		realResult.Success = success
	}
	return nil
}
func newGetLikedUsersArgs() interface{} {
	return &GetLikedUsersArgs{}
}

func newGetLikedUsersResult() interface{} {
	return &GetLikedUsersResult{}
}

type GetLikedUsersArgs struct {
	Req *core_api.GetLikedUsersReq
}

func (p *GetLikedUsersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetLikedUsersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLikedUsersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLikedUsersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLikedUsersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLikedUsersArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetLikedUsersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLikedUsersArgs_Req_DEFAULT *core_api.GetLikedUsersReq

func (p *GetLikedUsersArgs) GetReq() *core_api.GetLikedUsersReq {
	if !p.IsSetReq() {
		return GetLikedUsersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLikedUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLikedUsersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLikedUsersResult struct {
	Success *core_api.GetLikedUsersResp
}

var GetLikedUsersResult_Success_DEFAULT *core_api.GetLikedUsersResp

func (p *GetLikedUsersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetLikedUsersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLikedUsersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLikedUsersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLikedUsersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLikedUsersResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetLikedUsersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLikedUsersResult) GetSuccess() *core_api.GetLikedUsersResp {
	if !p.IsSetSuccess() {
		return GetLikedUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLikedUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetLikedUsersResp)
}

func (p *GetLikedUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLikedUsersResult) GetResult() interface{} {
	return p.Success
}

func getUserLikesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserLikesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Like).GetUserLikes(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserLikesArgs:
		success, err := handler.(core_api.Like).GetUserLikes(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserLikesResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserLikesArgs() interface{} {
	return &GetUserLikesArgs{}
}

func newGetUserLikesResult() interface{} {
	return &GetUserLikesResult{}
}

type GetUserLikesArgs struct {
	Req *core_api.GetUserLikesReq
}

func (p *GetUserLikesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserLikesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserLikesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserLikesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserLikesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserLikesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserLikesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserLikesArgs_Req_DEFAULT *core_api.GetUserLikesReq

func (p *GetUserLikesArgs) GetReq() *core_api.GetUserLikesReq {
	if !p.IsSetReq() {
		return GetUserLikesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserLikesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserLikesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserLikesResult struct {
	Success *core_api.GetUserLikesResp
}

var GetUserLikesResult_Success_DEFAULT *core_api.GetUserLikesResp

func (p *GetUserLikesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserLikesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserLikesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserLikesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserLikesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserLikesResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserLikesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserLikesResult) GetSuccess() *core_api.GetUserLikesResp {
	if !p.IsSetSuccess() {
		return GetUserLikesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserLikesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserLikesResp)
}

func (p *GetUserLikesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserLikesResult) GetResult() interface{} {
	return p.Success
}

func getUserLikeContentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserLikeContentsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Like).GetUserLikeContents(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserLikeContentsArgs:
		success, err := handler.(core_api.Like).GetUserLikeContents(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserLikeContentsResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserLikeContentsArgs() interface{} {
	return &GetUserLikeContentsArgs{}
}

func newGetUserLikeContentsResult() interface{} {
	return &GetUserLikeContentsResult{}
}

type GetUserLikeContentsArgs struct {
	Req *core_api.GetUserLikeContentsReq
}

func (p *GetUserLikeContentsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserLikeContentsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserLikeContentsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserLikeContentsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserLikeContentsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserLikeContentsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserLikeContentsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserLikeContentsArgs_Req_DEFAULT *core_api.GetUserLikeContentsReq

func (p *GetUserLikeContentsArgs) GetReq() *core_api.GetUserLikeContentsReq {
	if !p.IsSetReq() {
		return GetUserLikeContentsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserLikeContentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserLikeContentsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserLikeContentsResult struct {
	Success *core_api.GetUserLikeContentsResp
}

var GetUserLikeContentsResult_Success_DEFAULT *core_api.GetUserLikeContentsResp

func (p *GetUserLikeContentsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserLikeContentsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserLikeContentsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserLikeContentsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserLikeContentsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserLikeContentsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserLikeContentsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserLikeContentsResult) GetSuccess() *core_api.GetUserLikeContentsResp {
	if !p.IsSetSuccess() {
		return GetUserLikeContentsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserLikeContentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserLikeContentsResp)
}

func (p *GetUserLikeContentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserLikeContentsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DoLike(ctx context.Context, Req *core_api.DoLikeReq) (r *core_api.DoLikeResp, err error) {
	var _args DoLikeArgs
	_args.Req = Req
	var _result DoLikeResult
	if err = p.c.Call(ctx, "DoLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserLiked(ctx context.Context, Req *core_api.GetUserLikedReq) (r *core_api.GetUserLikedResp, err error) {
	var _args GetUserLikedArgs
	_args.Req = Req
	var _result GetUserLikedResult
	if err = p.c.Call(ctx, "GetUserLiked", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikedCount(ctx context.Context, Req *core_api.GetLikedCountReq) (r *core_api.GetLikedCountResp, err error) {
	var _args GetLikedCountArgs
	_args.Req = Req
	var _result GetLikedCountResult
	if err = p.c.Call(ctx, "GetLikedCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikedUsers(ctx context.Context, Req *core_api.GetLikedUsersReq) (r *core_api.GetLikedUsersResp, err error) {
	var _args GetLikedUsersArgs
	_args.Req = Req
	var _result GetLikedUsersResult
	if err = p.c.Call(ctx, "GetLikedUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserLikes(ctx context.Context, Req *core_api.GetUserLikesReq) (r *core_api.GetUserLikesResp, err error) {
	var _args GetUserLikesArgs
	_args.Req = Req
	var _result GetUserLikesResult
	if err = p.c.Call(ctx, "GetUserLikes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserLikeContents(ctx context.Context, Req *core_api.GetUserLikeContentsReq) (r *core_api.GetUserLikeContentsResp, err error) {
	var _args GetUserLikeContentsArgs
	_args.Req = Req
	var _result GetUserLikeContentsResult
	if err = p.c.Call(ctx, "GetUserLikeContents", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
