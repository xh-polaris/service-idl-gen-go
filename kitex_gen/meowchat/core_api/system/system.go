// Code generated by Kitex v0.9.1. DO NOT EDIT.

package system

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/core_api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetAdmins": kitex.NewMethodInfo(
		getAdminsHandler,
		newGetAdminsArgs,
		newGetAdminsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"NewAdmin": kitex.NewMethodInfo(
		newAdminHandler,
		newNewAdminArgs,
		newNewAdminResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteAdmin": kitex.NewMethodInfo(
		deleteAdminHandler,
		newDeleteAdminArgs,
		newDeleteAdminResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetNews": kitex.NewMethodInfo(
		getNewsHandler,
		newGetNewsArgs,
		newGetNewsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"NewNews": kitex.NewMethodInfo(
		newNewsHandler,
		newNewNewsArgs,
		newNewNewsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteNews": kitex.NewMethodInfo(
		deleteNewsHandler,
		newDeleteNewsArgs,
		newDeleteNewsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetNotices": kitex.NewMethodInfo(
		getNoticesHandler,
		newGetNoticesArgs,
		newGetNoticesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"NewNotice": kitex.NewMethodInfo(
		newNoticeHandler,
		newNewNoticeArgs,
		newNewNoticeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteNotice": kitex.NewMethodInfo(
		deleteNoticeHandler,
		newDeleteNoticeArgs,
		newDeleteNoticeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListCommunity": kitex.NewMethodInfo(
		listCommunityHandler,
		newListCommunityArgs,
		newListCommunityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"NewCommunity": kitex.NewMethodInfo(
		newCommunityHandler,
		newNewCommunityArgs,
		newNewCommunityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteCommunity": kitex.NewMethodInfo(
		deleteCommunityHandler,
		newDeleteCommunityArgs,
		newDeleteCommunityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserRoles": kitex.NewMethodInfo(
		getUserRolesHandler,
		newGetUserRolesArgs,
		newGetUserRolesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateCommunityAdmin": kitex.NewMethodInfo(
		updateCommunityAdminHandler,
		newUpdateCommunityAdminArgs,
		newUpdateCommunityAdminResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateSuperAdmin": kitex.NewMethodInfo(
		updateSuperAdminHandler,
		newUpdateSuperAdminArgs,
		newUpdateSuperAdminResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserByRole": kitex.NewMethodInfo(
		getUserByRoleHandler,
		newGetUserByRoleArgs,
		newGetUserByRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateRole": kitex.NewMethodInfo(
		updateRoleHandler,
		newUpdateRoleArgs,
		newUpdateRoleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListApply": kitex.NewMethodInfo(
		listApplyHandler,
		newListApplyArgs,
		newListApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"HandleApply": kitex.NewMethodInfo(
		handleApplyHandler,
		newHandleApplyArgs,
		newHandleApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateApply": kitex.NewMethodInfo(
		createApplyHandler,
		newCreateApplyArgs,
		newCreateApplyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListNotification": kitex.NewMethodInfo(
		listNotificationHandler,
		newListNotificationArgs,
		newListNotificationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CleanNotification": kitex.NewMethodInfo(
		cleanNotificationHandler,
		newCleanNotificationArgs,
		newCleanNotificationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CountNotification": kitex.NewMethodInfo(
		countNotificationHandler,
		newCountNotificationArgs,
		newCountNotificationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ReadNotification": kitex.NewMethodInfo(
		readNotificationHandler,
		newReadNotificationArgs,
		newReadNotificationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ReadRangeNotification": kitex.NewMethodInfo(
		readRangeNotificationHandler,
		newReadRangeNotificationArgs,
		newReadRangeNotificationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Prefetch": kitex.NewMethodInfo(
		prefetchHandler,
		newPrefetchArgs,
		newPrefetchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMinVersion": kitex.NewMethodInfo(
		getMinVersionHandler,
		newGetMinVersionArgs,
		newGetMinVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	systemServiceInfo                = NewServiceInfo()
	systemServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "system"
	handlerType := (*core_api.System)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowchat.core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func getAdminsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetAdminsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).GetAdmins(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAdminsArgs:
		success, err := handler.(core_api.System).GetAdmins(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAdminsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAdminsArgs() interface{} {
	return &GetAdminsArgs{}
}

func newGetAdminsResult() interface{} {
	return &GetAdminsResult{}
}

type GetAdminsArgs struct {
	Req *core_api.GetAdminsReq
}

func (p *GetAdminsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetAdminsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAdminsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAdminsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAdminsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAdminsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetAdminsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAdminsArgs_Req_DEFAULT *core_api.GetAdminsReq

func (p *GetAdminsArgs) GetReq() *core_api.GetAdminsReq {
	if !p.IsSetReq() {
		return GetAdminsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAdminsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAdminsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAdminsResult struct {
	Success *core_api.GetAdminsResp
}

var GetAdminsResult_Success_DEFAULT *core_api.GetAdminsResp

func (p *GetAdminsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetAdminsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAdminsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAdminsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAdminsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAdminsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetAdminsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAdminsResult) GetSuccess() *core_api.GetAdminsResp {
	if !p.IsSetSuccess() {
		return GetAdminsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAdminsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetAdminsResp)
}

func (p *GetAdminsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAdminsResult) GetResult() interface{} {
	return p.Success
}

func newAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.NewAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).NewAdmin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *NewAdminArgs:
		success, err := handler.(core_api.System).NewAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*NewAdminResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newNewAdminArgs() interface{} {
	return &NewAdminArgs{}
}

func newNewAdminResult() interface{} {
	return &NewAdminResult{}
}

type NewAdminArgs struct {
	Req *core_api.NewAdminReq
}

func (p *NewAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.NewAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *NewAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *NewAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *NewAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *NewAdminArgs) Unmarshal(in []byte) error {
	msg := new(core_api.NewAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var NewAdminArgs_Req_DEFAULT *core_api.NewAdminReq

func (p *NewAdminArgs) GetReq() *core_api.NewAdminReq {
	if !p.IsSetReq() {
		return NewAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *NewAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NewAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type NewAdminResult struct {
	Success *core_api.NewAdminResp
}

var NewAdminResult_Success_DEFAULT *core_api.NewAdminResp

func (p *NewAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.NewAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *NewAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *NewAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *NewAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *NewAdminResult) Unmarshal(in []byte) error {
	msg := new(core_api.NewAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *NewAdminResult) GetSuccess() *core_api.NewAdminResp {
	if !p.IsSetSuccess() {
		return NewAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *NewAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.NewAdminResp)
}

func (p *NewAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NewAdminResult) GetResult() interface{} {
	return p.Success
}

func deleteAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).DeleteAdmin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteAdminArgs:
		success, err := handler.(core_api.System).DeleteAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteAdminResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteAdminArgs() interface{} {
	return &DeleteAdminArgs{}
}

func newDeleteAdminResult() interface{} {
	return &DeleteAdminResult{}
}

type DeleteAdminArgs struct {
	Req *core_api.DeleteAdminReq
}

func (p *DeleteAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteAdminArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteAdminArgs_Req_DEFAULT *core_api.DeleteAdminReq

func (p *DeleteAdminArgs) GetReq() *core_api.DeleteAdminReq {
	if !p.IsSetReq() {
		return DeleteAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteAdminResult struct {
	Success *core_api.DeleteAdminResp
}

var DeleteAdminResult_Success_DEFAULT *core_api.DeleteAdminResp

func (p *DeleteAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteAdminResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteAdminResult) GetSuccess() *core_api.DeleteAdminResp {
	if !p.IsSetSuccess() {
		return DeleteAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteAdminResp)
}

func (p *DeleteAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteAdminResult) GetResult() interface{} {
	return p.Success
}

func getNewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetNewsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).GetNews(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetNewsArgs:
		success, err := handler.(core_api.System).GetNews(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetNewsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetNewsArgs() interface{} {
	return &GetNewsArgs{}
}

func newGetNewsResult() interface{} {
	return &GetNewsResult{}
}

type GetNewsArgs struct {
	Req *core_api.GetNewsReq
}

func (p *GetNewsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetNewsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetNewsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetNewsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetNewsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetNewsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetNewsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetNewsArgs_Req_DEFAULT *core_api.GetNewsReq

func (p *GetNewsArgs) GetReq() *core_api.GetNewsReq {
	if !p.IsSetReq() {
		return GetNewsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetNewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetNewsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetNewsResult struct {
	Success *core_api.GetNewsResp
}

var GetNewsResult_Success_DEFAULT *core_api.GetNewsResp

func (p *GetNewsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetNewsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetNewsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetNewsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetNewsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetNewsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetNewsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetNewsResult) GetSuccess() *core_api.GetNewsResp {
	if !p.IsSetSuccess() {
		return GetNewsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetNewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetNewsResp)
}

func (p *GetNewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNewsResult) GetResult() interface{} {
	return p.Success
}

func newNewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.NewNewsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).NewNews(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *NewNewsArgs:
		success, err := handler.(core_api.System).NewNews(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*NewNewsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newNewNewsArgs() interface{} {
	return &NewNewsArgs{}
}

func newNewNewsResult() interface{} {
	return &NewNewsResult{}
}

type NewNewsArgs struct {
	Req *core_api.NewNewsReq
}

func (p *NewNewsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.NewNewsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *NewNewsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *NewNewsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *NewNewsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *NewNewsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.NewNewsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var NewNewsArgs_Req_DEFAULT *core_api.NewNewsReq

func (p *NewNewsArgs) GetReq() *core_api.NewNewsReq {
	if !p.IsSetReq() {
		return NewNewsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *NewNewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NewNewsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type NewNewsResult struct {
	Success *core_api.NewNewsResp
}

var NewNewsResult_Success_DEFAULT *core_api.NewNewsResp

func (p *NewNewsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.NewNewsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *NewNewsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *NewNewsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *NewNewsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *NewNewsResult) Unmarshal(in []byte) error {
	msg := new(core_api.NewNewsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *NewNewsResult) GetSuccess() *core_api.NewNewsResp {
	if !p.IsSetSuccess() {
		return NewNewsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *NewNewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.NewNewsResp)
}

func (p *NewNewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NewNewsResult) GetResult() interface{} {
	return p.Success
}

func deleteNewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteNewsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).DeleteNews(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteNewsArgs:
		success, err := handler.(core_api.System).DeleteNews(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteNewsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteNewsArgs() interface{} {
	return &DeleteNewsArgs{}
}

func newDeleteNewsResult() interface{} {
	return &DeleteNewsResult{}
}

type DeleteNewsArgs struct {
	Req *core_api.DeleteNewsReq
}

func (p *DeleteNewsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteNewsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteNewsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteNewsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteNewsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteNewsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteNewsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteNewsArgs_Req_DEFAULT *core_api.DeleteNewsReq

func (p *DeleteNewsArgs) GetReq() *core_api.DeleteNewsReq {
	if !p.IsSetReq() {
		return DeleteNewsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteNewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteNewsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteNewsResult struct {
	Success *core_api.DeleteNewsResp
}

var DeleteNewsResult_Success_DEFAULT *core_api.DeleteNewsResp

func (p *DeleteNewsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteNewsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteNewsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteNewsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteNewsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteNewsResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteNewsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteNewsResult) GetSuccess() *core_api.DeleteNewsResp {
	if !p.IsSetSuccess() {
		return DeleteNewsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteNewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteNewsResp)
}

func (p *DeleteNewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteNewsResult) GetResult() interface{} {
	return p.Success
}

func getNoticesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetNoticesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).GetNotices(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetNoticesArgs:
		success, err := handler.(core_api.System).GetNotices(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetNoticesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetNoticesArgs() interface{} {
	return &GetNoticesArgs{}
}

func newGetNoticesResult() interface{} {
	return &GetNoticesResult{}
}

type GetNoticesArgs struct {
	Req *core_api.GetNoticesReq
}

func (p *GetNoticesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetNoticesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetNoticesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetNoticesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetNoticesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetNoticesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetNoticesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetNoticesArgs_Req_DEFAULT *core_api.GetNoticesReq

func (p *GetNoticesArgs) GetReq() *core_api.GetNoticesReq {
	if !p.IsSetReq() {
		return GetNoticesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetNoticesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetNoticesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetNoticesResult struct {
	Success *core_api.GetNoticesResp
}

var GetNoticesResult_Success_DEFAULT *core_api.GetNoticesResp

func (p *GetNoticesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetNoticesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetNoticesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetNoticesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetNoticesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetNoticesResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetNoticesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetNoticesResult) GetSuccess() *core_api.GetNoticesResp {
	if !p.IsSetSuccess() {
		return GetNoticesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetNoticesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetNoticesResp)
}

func (p *GetNoticesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetNoticesResult) GetResult() interface{} {
	return p.Success
}

func newNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.NewNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).NewNotice(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *NewNoticeArgs:
		success, err := handler.(core_api.System).NewNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*NewNoticeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newNewNoticeArgs() interface{} {
	return &NewNoticeArgs{}
}

func newNewNoticeResult() interface{} {
	return &NewNoticeResult{}
}

type NewNoticeArgs struct {
	Req *core_api.NewNoticeReq
}

func (p *NewNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.NewNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *NewNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *NewNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *NewNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *NewNoticeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.NewNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var NewNoticeArgs_Req_DEFAULT *core_api.NewNoticeReq

func (p *NewNoticeArgs) GetReq() *core_api.NewNoticeReq {
	if !p.IsSetReq() {
		return NewNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *NewNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NewNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type NewNoticeResult struct {
	Success *core_api.NewNoticeResp
}

var NewNoticeResult_Success_DEFAULT *core_api.NewNoticeResp

func (p *NewNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.NewNoticeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *NewNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *NewNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *NewNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *NewNoticeResult) Unmarshal(in []byte) error {
	msg := new(core_api.NewNoticeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *NewNoticeResult) GetSuccess() *core_api.NewNoticeResp {
	if !p.IsSetSuccess() {
		return NewNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *NewNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.NewNoticeResp)
}

func (p *NewNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NewNoticeResult) GetResult() interface{} {
	return p.Success
}

func deleteNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).DeleteNotice(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteNoticeArgs:
		success, err := handler.(core_api.System).DeleteNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteNoticeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteNoticeArgs() interface{} {
	return &DeleteNoticeArgs{}
}

func newDeleteNoticeResult() interface{} {
	return &DeleteNoticeResult{}
}

type DeleteNoticeArgs struct {
	Req *core_api.DeleteNoticeReq
}

func (p *DeleteNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteNoticeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteNoticeArgs_Req_DEFAULT *core_api.DeleteNoticeReq

func (p *DeleteNoticeArgs) GetReq() *core_api.DeleteNoticeReq {
	if !p.IsSetReq() {
		return DeleteNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteNoticeResult struct {
	Success *core_api.DeleteNoticeResp
}

var DeleteNoticeResult_Success_DEFAULT *core_api.DeleteNoticeResp

func (p *DeleteNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteNoticeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteNoticeResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteNoticeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteNoticeResult) GetSuccess() *core_api.DeleteNoticeResp {
	if !p.IsSetSuccess() {
		return DeleteNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteNoticeResp)
}

func (p *DeleteNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteNoticeResult) GetResult() interface{} {
	return p.Success
}

func listCommunityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListCommunityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).ListCommunity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListCommunityArgs:
		success, err := handler.(core_api.System).ListCommunity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListCommunityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListCommunityArgs() interface{} {
	return &ListCommunityArgs{}
}

func newListCommunityResult() interface{} {
	return &ListCommunityResult{}
}

type ListCommunityArgs struct {
	Req *core_api.ListCommunityReq
}

func (p *ListCommunityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListCommunityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListCommunityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListCommunityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListCommunityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListCommunityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListCommunityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListCommunityArgs_Req_DEFAULT *core_api.ListCommunityReq

func (p *ListCommunityArgs) GetReq() *core_api.ListCommunityReq {
	if !p.IsSetReq() {
		return ListCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListCommunityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListCommunityResult struct {
	Success *core_api.ListCommunityResp
}

var ListCommunityResult_Success_DEFAULT *core_api.ListCommunityResp

func (p *ListCommunityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListCommunityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListCommunityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListCommunityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListCommunityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListCommunityResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListCommunityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListCommunityResult) GetSuccess() *core_api.ListCommunityResp {
	if !p.IsSetSuccess() {
		return ListCommunityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListCommunityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListCommunityResp)
}

func (p *ListCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListCommunityResult) GetResult() interface{} {
	return p.Success
}

func newCommunityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.NewCommunityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).NewCommunity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *NewCommunityArgs:
		success, err := handler.(core_api.System).NewCommunity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*NewCommunityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newNewCommunityArgs() interface{} {
	return &NewCommunityArgs{}
}

func newNewCommunityResult() interface{} {
	return &NewCommunityResult{}
}

type NewCommunityArgs struct {
	Req *core_api.NewCommunityReq
}

func (p *NewCommunityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.NewCommunityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *NewCommunityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *NewCommunityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *NewCommunityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *NewCommunityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.NewCommunityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var NewCommunityArgs_Req_DEFAULT *core_api.NewCommunityReq

func (p *NewCommunityArgs) GetReq() *core_api.NewCommunityReq {
	if !p.IsSetReq() {
		return NewCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *NewCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NewCommunityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type NewCommunityResult struct {
	Success *core_api.NewCommunityResp
}

var NewCommunityResult_Success_DEFAULT *core_api.NewCommunityResp

func (p *NewCommunityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.NewCommunityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *NewCommunityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *NewCommunityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *NewCommunityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *NewCommunityResult) Unmarshal(in []byte) error {
	msg := new(core_api.NewCommunityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *NewCommunityResult) GetSuccess() *core_api.NewCommunityResp {
	if !p.IsSetSuccess() {
		return NewCommunityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *NewCommunityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.NewCommunityResp)
}

func (p *NewCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NewCommunityResult) GetResult() interface{} {
	return p.Success
}

func deleteCommunityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteCommunityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).DeleteCommunity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteCommunityArgs:
		success, err := handler.(core_api.System).DeleteCommunity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCommunityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteCommunityArgs() interface{} {
	return &DeleteCommunityArgs{}
}

func newDeleteCommunityResult() interface{} {
	return &DeleteCommunityResult{}
}

type DeleteCommunityArgs struct {
	Req *core_api.DeleteCommunityReq
}

func (p *DeleteCommunityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteCommunityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCommunityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCommunityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCommunityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCommunityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteCommunityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCommunityArgs_Req_DEFAULT *core_api.DeleteCommunityReq

func (p *DeleteCommunityArgs) GetReq() *core_api.DeleteCommunityReq {
	if !p.IsSetReq() {
		return DeleteCommunityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCommunityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCommunityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCommunityResult struct {
	Success *core_api.DeleteCommunityResp
}

var DeleteCommunityResult_Success_DEFAULT *core_api.DeleteCommunityResp

func (p *DeleteCommunityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteCommunityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCommunityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCommunityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCommunityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCommunityResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteCommunityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCommunityResult) GetSuccess() *core_api.DeleteCommunityResp {
	if !p.IsSetSuccess() {
		return DeleteCommunityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCommunityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteCommunityResp)
}

func (p *DeleteCommunityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCommunityResult) GetResult() interface{} {
	return p.Success
}

func getUserRolesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserRolesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).GetUserRoles(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserRolesArgs:
		success, err := handler.(core_api.System).GetUserRoles(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserRolesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserRolesArgs() interface{} {
	return &GetUserRolesArgs{}
}

func newGetUserRolesResult() interface{} {
	return &GetUserRolesResult{}
}

type GetUserRolesArgs struct {
	Req *core_api.GetUserRolesReq
}

func (p *GetUserRolesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserRolesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserRolesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserRolesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserRolesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserRolesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserRolesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserRolesArgs_Req_DEFAULT *core_api.GetUserRolesReq

func (p *GetUserRolesArgs) GetReq() *core_api.GetUserRolesReq {
	if !p.IsSetReq() {
		return GetUserRolesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserRolesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserRolesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserRolesResult struct {
	Success *core_api.GetUserRolesResp
}

var GetUserRolesResult_Success_DEFAULT *core_api.GetUserRolesResp

func (p *GetUserRolesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserRolesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserRolesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserRolesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserRolesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserRolesResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserRolesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserRolesResult) GetSuccess() *core_api.GetUserRolesResp {
	if !p.IsSetSuccess() {
		return GetUserRolesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserRolesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserRolesResp)
}

func (p *GetUserRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserRolesResult) GetResult() interface{} {
	return p.Success
}

func updateCommunityAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateCommunityAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).UpdateCommunityAdmin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateCommunityAdminArgs:
		success, err := handler.(core_api.System).UpdateCommunityAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCommunityAdminResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateCommunityAdminArgs() interface{} {
	return &UpdateCommunityAdminArgs{}
}

func newUpdateCommunityAdminResult() interface{} {
	return &UpdateCommunityAdminResult{}
}

type UpdateCommunityAdminArgs struct {
	Req *core_api.UpdateCommunityAdminReq
}

func (p *UpdateCommunityAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateCommunityAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCommunityAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCommunityAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCommunityAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCommunityAdminArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateCommunityAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCommunityAdminArgs_Req_DEFAULT *core_api.UpdateCommunityAdminReq

func (p *UpdateCommunityAdminArgs) GetReq() *core_api.UpdateCommunityAdminReq {
	if !p.IsSetReq() {
		return UpdateCommunityAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCommunityAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCommunityAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCommunityAdminResult struct {
	Success *core_api.UpdateCommunityAdminResp
}

var UpdateCommunityAdminResult_Success_DEFAULT *core_api.UpdateCommunityAdminResp

func (p *UpdateCommunityAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateCommunityAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCommunityAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCommunityAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCommunityAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCommunityAdminResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateCommunityAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCommunityAdminResult) GetSuccess() *core_api.UpdateCommunityAdminResp {
	if !p.IsSetSuccess() {
		return UpdateCommunityAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCommunityAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateCommunityAdminResp)
}

func (p *UpdateCommunityAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCommunityAdminResult) GetResult() interface{} {
	return p.Success
}

func updateSuperAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateSuperAdminReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).UpdateSuperAdmin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateSuperAdminArgs:
		success, err := handler.(core_api.System).UpdateSuperAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateSuperAdminResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateSuperAdminArgs() interface{} {
	return &UpdateSuperAdminArgs{}
}

func newUpdateSuperAdminResult() interface{} {
	return &UpdateSuperAdminResult{}
}

type UpdateSuperAdminArgs struct {
	Req *core_api.UpdateSuperAdminReq
}

func (p *UpdateSuperAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateSuperAdminReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateSuperAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateSuperAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateSuperAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateSuperAdminArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateSuperAdminReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateSuperAdminArgs_Req_DEFAULT *core_api.UpdateSuperAdminReq

func (p *UpdateSuperAdminArgs) GetReq() *core_api.UpdateSuperAdminReq {
	if !p.IsSetReq() {
		return UpdateSuperAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateSuperAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateSuperAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateSuperAdminResult struct {
	Success *core_api.UpdateSuperAdminResp
}

var UpdateSuperAdminResult_Success_DEFAULT *core_api.UpdateSuperAdminResp

func (p *UpdateSuperAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateSuperAdminResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateSuperAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateSuperAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateSuperAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateSuperAdminResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateSuperAdminResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateSuperAdminResult) GetSuccess() *core_api.UpdateSuperAdminResp {
	if !p.IsSetSuccess() {
		return UpdateSuperAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateSuperAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateSuperAdminResp)
}

func (p *UpdateSuperAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateSuperAdminResult) GetResult() interface{} {
	return p.Success
}

func getUserByRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserByRoleReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).GetUserByRole(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserByRoleArgs:
		success, err := handler.(core_api.System).GetUserByRole(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserByRoleResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserByRoleArgs() interface{} {
	return &GetUserByRoleArgs{}
}

func newGetUserByRoleResult() interface{} {
	return &GetUserByRoleResult{}
}

type GetUserByRoleArgs struct {
	Req *core_api.GetUserByRoleReq
}

func (p *GetUserByRoleArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserByRoleReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserByRoleArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserByRoleArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserByRoleArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserByRoleArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserByRoleReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserByRoleArgs_Req_DEFAULT *core_api.GetUserByRoleReq

func (p *GetUserByRoleArgs) GetReq() *core_api.GetUserByRoleReq {
	if !p.IsSetReq() {
		return GetUserByRoleArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserByRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserByRoleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserByRoleResult struct {
	Success *core_api.GetUserByRoleResp
}

var GetUserByRoleResult_Success_DEFAULT *core_api.GetUserByRoleResp

func (p *GetUserByRoleResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserByRoleResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserByRoleResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserByRoleResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserByRoleResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserByRoleResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserByRoleResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserByRoleResult) GetSuccess() *core_api.GetUserByRoleResp {
	if !p.IsSetSuccess() {
		return GetUserByRoleResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserByRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserByRoleResp)
}

func (p *GetUserByRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserByRoleResult) GetResult() interface{} {
	return p.Success
}

func updateRoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateRoleReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).UpdateRole(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateRoleArgs:
		success, err := handler.(core_api.System).UpdateRole(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateRoleResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateRoleArgs() interface{} {
	return &UpdateRoleArgs{}
}

func newUpdateRoleResult() interface{} {
	return &UpdateRoleResult{}
}

type UpdateRoleArgs struct {
	Req *core_api.UpdateRoleReq
}

func (p *UpdateRoleArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateRoleReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateRoleArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateRoleArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateRoleArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateRoleArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateRoleReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateRoleArgs_Req_DEFAULT *core_api.UpdateRoleReq

func (p *UpdateRoleArgs) GetReq() *core_api.UpdateRoleReq {
	if !p.IsSetReq() {
		return UpdateRoleArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateRoleArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateRoleResult struct {
	Success *core_api.UpdateRoleResp
}

var UpdateRoleResult_Success_DEFAULT *core_api.UpdateRoleResp

func (p *UpdateRoleResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.UpdateRoleResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateRoleResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateRoleResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateRoleResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateRoleResult) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateRoleResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateRoleResult) GetSuccess() *core_api.UpdateRoleResp {
	if !p.IsSetSuccess() {
		return UpdateRoleResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateRoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.UpdateRoleResp)
}

func (p *UpdateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateRoleResult) GetResult() interface{} {
	return p.Success
}

func listApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListApplyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).ListApply(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListApplyArgs:
		success, err := handler.(core_api.System).ListApply(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListApplyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListApplyArgs() interface{} {
	return &ListApplyArgs{}
}

func newListApplyResult() interface{} {
	return &ListApplyResult{}
}

type ListApplyArgs struct {
	Req *core_api.ListApplyReq
}

func (p *ListApplyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListApplyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListApplyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListApplyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListApplyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListApplyArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListApplyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListApplyArgs_Req_DEFAULT *core_api.ListApplyReq

func (p *ListApplyArgs) GetReq() *core_api.ListApplyReq {
	if !p.IsSetReq() {
		return ListApplyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListApplyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListApplyResult struct {
	Success *core_api.ListApplyResp
}

var ListApplyResult_Success_DEFAULT *core_api.ListApplyResp

func (p *ListApplyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListApplyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListApplyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListApplyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListApplyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListApplyResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListApplyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListApplyResult) GetSuccess() *core_api.ListApplyResp {
	if !p.IsSetSuccess() {
		return ListApplyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListApplyResp)
}

func (p *ListApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListApplyResult) GetResult() interface{} {
	return p.Success
}

func handleApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.HandleApplyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).HandleApply(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *HandleApplyArgs:
		success, err := handler.(core_api.System).HandleApply(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*HandleApplyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newHandleApplyArgs() interface{} {
	return &HandleApplyArgs{}
}

func newHandleApplyResult() interface{} {
	return &HandleApplyResult{}
}

type HandleApplyArgs struct {
	Req *core_api.HandleApplyReq
}

func (p *HandleApplyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.HandleApplyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *HandleApplyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *HandleApplyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *HandleApplyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *HandleApplyArgs) Unmarshal(in []byte) error {
	msg := new(core_api.HandleApplyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var HandleApplyArgs_Req_DEFAULT *core_api.HandleApplyReq

func (p *HandleApplyArgs) GetReq() *core_api.HandleApplyReq {
	if !p.IsSetReq() {
		return HandleApplyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *HandleApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HandleApplyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type HandleApplyResult struct {
	Success *core_api.HandleApplyResp
}

var HandleApplyResult_Success_DEFAULT *core_api.HandleApplyResp

func (p *HandleApplyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.HandleApplyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *HandleApplyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *HandleApplyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *HandleApplyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *HandleApplyResult) Unmarshal(in []byte) error {
	msg := new(core_api.HandleApplyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *HandleApplyResult) GetSuccess() *core_api.HandleApplyResp {
	if !p.IsSetSuccess() {
		return HandleApplyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *HandleApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.HandleApplyResp)
}

func (p *HandleApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HandleApplyResult) GetResult() interface{} {
	return p.Success
}

func createApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateApplyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).CreateApply(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateApplyArgs:
		success, err := handler.(core_api.System).CreateApply(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateApplyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateApplyArgs() interface{} {
	return &CreateApplyArgs{}
}

func newCreateApplyResult() interface{} {
	return &CreateApplyResult{}
}

type CreateApplyArgs struct {
	Req *core_api.CreateApplyReq
}

func (p *CreateApplyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateApplyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateApplyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateApplyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateApplyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateApplyArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateApplyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateApplyArgs_Req_DEFAULT *core_api.CreateApplyReq

func (p *CreateApplyArgs) GetReq() *core_api.CreateApplyReq {
	if !p.IsSetReq() {
		return CreateApplyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateApplyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateApplyResult struct {
	Success *core_api.CreateApplyResp
}

var CreateApplyResult_Success_DEFAULT *core_api.CreateApplyResp

func (p *CreateApplyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CreateApplyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateApplyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateApplyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateApplyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateApplyResult) Unmarshal(in []byte) error {
	msg := new(core_api.CreateApplyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateApplyResult) GetSuccess() *core_api.CreateApplyResp {
	if !p.IsSetSuccess() {
		return CreateApplyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CreateApplyResp)
}

func (p *CreateApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateApplyResult) GetResult() interface{} {
	return p.Success
}

func listNotificationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListNotificationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).ListNotification(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListNotificationArgs:
		success, err := handler.(core_api.System).ListNotification(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListNotificationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListNotificationArgs() interface{} {
	return &ListNotificationArgs{}
}

func newListNotificationResult() interface{} {
	return &ListNotificationResult{}
}

type ListNotificationArgs struct {
	Req *core_api.ListNotificationReq
}

func (p *ListNotificationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListNotificationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListNotificationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListNotificationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListNotificationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListNotificationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListNotificationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListNotificationArgs_Req_DEFAULT *core_api.ListNotificationReq

func (p *ListNotificationArgs) GetReq() *core_api.ListNotificationReq {
	if !p.IsSetReq() {
		return ListNotificationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListNotificationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListNotificationResult struct {
	Success *core_api.ListNotificationResp
}

var ListNotificationResult_Success_DEFAULT *core_api.ListNotificationResp

func (p *ListNotificationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListNotificationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListNotificationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListNotificationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListNotificationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListNotificationResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListNotificationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListNotificationResult) GetSuccess() *core_api.ListNotificationResp {
	if !p.IsSetSuccess() {
		return ListNotificationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListNotificationResp)
}

func (p *ListNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListNotificationResult) GetResult() interface{} {
	return p.Success
}

func cleanNotificationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CleanNotificationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).CleanNotification(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CleanNotificationArgs:
		success, err := handler.(core_api.System).CleanNotification(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CleanNotificationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCleanNotificationArgs() interface{} {
	return &CleanNotificationArgs{}
}

func newCleanNotificationResult() interface{} {
	return &CleanNotificationResult{}
}

type CleanNotificationArgs struct {
	Req *core_api.CleanNotificationReq
}

func (p *CleanNotificationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CleanNotificationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CleanNotificationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CleanNotificationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CleanNotificationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CleanNotificationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CleanNotificationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CleanNotificationArgs_Req_DEFAULT *core_api.CleanNotificationReq

func (p *CleanNotificationArgs) GetReq() *core_api.CleanNotificationReq {
	if !p.IsSetReq() {
		return CleanNotificationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CleanNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CleanNotificationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CleanNotificationResult struct {
	Success *core_api.CleanNotificationResp
}

var CleanNotificationResult_Success_DEFAULT *core_api.CleanNotificationResp

func (p *CleanNotificationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CleanNotificationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CleanNotificationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CleanNotificationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CleanNotificationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CleanNotificationResult) Unmarshal(in []byte) error {
	msg := new(core_api.CleanNotificationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CleanNotificationResult) GetSuccess() *core_api.CleanNotificationResp {
	if !p.IsSetSuccess() {
		return CleanNotificationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CleanNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CleanNotificationResp)
}

func (p *CleanNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CleanNotificationResult) GetResult() interface{} {
	return p.Success
}

func countNotificationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CountNotificationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).CountNotification(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CountNotificationArgs:
		success, err := handler.(core_api.System).CountNotification(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CountNotificationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCountNotificationArgs() interface{} {
	return &CountNotificationArgs{}
}

func newCountNotificationResult() interface{} {
	return &CountNotificationResult{}
}

type CountNotificationArgs struct {
	Req *core_api.CountNotificationReq
}

func (p *CountNotificationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CountNotificationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CountNotificationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CountNotificationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CountNotificationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CountNotificationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CountNotificationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CountNotificationArgs_Req_DEFAULT *core_api.CountNotificationReq

func (p *CountNotificationArgs) GetReq() *core_api.CountNotificationReq {
	if !p.IsSetReq() {
		return CountNotificationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CountNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CountNotificationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CountNotificationResult struct {
	Success *core_api.CountNotificationResp
}

var CountNotificationResult_Success_DEFAULT *core_api.CountNotificationResp

func (p *CountNotificationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.CountNotificationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CountNotificationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CountNotificationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CountNotificationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CountNotificationResult) Unmarshal(in []byte) error {
	msg := new(core_api.CountNotificationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CountNotificationResult) GetSuccess() *core_api.CountNotificationResp {
	if !p.IsSetSuccess() {
		return CountNotificationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CountNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.CountNotificationResp)
}

func (p *CountNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CountNotificationResult) GetResult() interface{} {
	return p.Success
}

func readNotificationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ReadNotificationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).ReadNotification(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ReadNotificationArgs:
		success, err := handler.(core_api.System).ReadNotification(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReadNotificationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newReadNotificationArgs() interface{} {
	return &ReadNotificationArgs{}
}

func newReadNotificationResult() interface{} {
	return &ReadNotificationResult{}
}

type ReadNotificationArgs struct {
	Req *core_api.ReadNotificationReq
}

func (p *ReadNotificationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ReadNotificationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReadNotificationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReadNotificationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReadNotificationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReadNotificationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ReadNotificationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReadNotificationArgs_Req_DEFAULT *core_api.ReadNotificationReq

func (p *ReadNotificationArgs) GetReq() *core_api.ReadNotificationReq {
	if !p.IsSetReq() {
		return ReadNotificationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReadNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReadNotificationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReadNotificationResult struct {
	Success *core_api.ReadNotificationResp
}

var ReadNotificationResult_Success_DEFAULT *core_api.ReadNotificationResp

func (p *ReadNotificationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ReadNotificationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReadNotificationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReadNotificationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReadNotificationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReadNotificationResult) Unmarshal(in []byte) error {
	msg := new(core_api.ReadNotificationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReadNotificationResult) GetSuccess() *core_api.ReadNotificationResp {
	if !p.IsSetSuccess() {
		return ReadNotificationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReadNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ReadNotificationResp)
}

func (p *ReadNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReadNotificationResult) GetResult() interface{} {
	return p.Success
}

func readRangeNotificationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ReadRangeNotificationReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).ReadRangeNotification(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ReadRangeNotificationArgs:
		success, err := handler.(core_api.System).ReadRangeNotification(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ReadRangeNotificationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newReadRangeNotificationArgs() interface{} {
	return &ReadRangeNotificationArgs{}
}

func newReadRangeNotificationResult() interface{} {
	return &ReadRangeNotificationResult{}
}

type ReadRangeNotificationArgs struct {
	Req *core_api.ReadRangeNotificationReq
}

func (p *ReadRangeNotificationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ReadRangeNotificationReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ReadRangeNotificationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ReadRangeNotificationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ReadRangeNotificationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ReadRangeNotificationArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ReadRangeNotificationReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReadRangeNotificationArgs_Req_DEFAULT *core_api.ReadRangeNotificationReq

func (p *ReadRangeNotificationArgs) GetReq() *core_api.ReadRangeNotificationReq {
	if !p.IsSetReq() {
		return ReadRangeNotificationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReadRangeNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ReadRangeNotificationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ReadRangeNotificationResult struct {
	Success *core_api.ReadRangeNotificationResp
}

var ReadRangeNotificationResult_Success_DEFAULT *core_api.ReadRangeNotificationResp

func (p *ReadRangeNotificationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ReadRangeNotificationResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ReadRangeNotificationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ReadRangeNotificationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ReadRangeNotificationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ReadRangeNotificationResult) Unmarshal(in []byte) error {
	msg := new(core_api.ReadRangeNotificationResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReadRangeNotificationResult) GetSuccess() *core_api.ReadRangeNotificationResp {
	if !p.IsSetSuccess() {
		return ReadRangeNotificationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReadRangeNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ReadRangeNotificationResp)
}

func (p *ReadRangeNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ReadRangeNotificationResult) GetResult() interface{} {
	return p.Success
}

func prefetchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.PrefetchReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).Prefetch(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PrefetchArgs:
		success, err := handler.(core_api.System).Prefetch(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PrefetchResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPrefetchArgs() interface{} {
	return &PrefetchArgs{}
}

func newPrefetchResult() interface{} {
	return &PrefetchResult{}
}

type PrefetchArgs struct {
	Req *core_api.PrefetchReq
}

func (p *PrefetchArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.PrefetchReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PrefetchArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PrefetchArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PrefetchArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PrefetchArgs) Unmarshal(in []byte) error {
	msg := new(core_api.PrefetchReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PrefetchArgs_Req_DEFAULT *core_api.PrefetchReq

func (p *PrefetchArgs) GetReq() *core_api.PrefetchReq {
	if !p.IsSetReq() {
		return PrefetchArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PrefetchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PrefetchArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PrefetchResult struct {
	Success *core_api.PrefetchResp
}

var PrefetchResult_Success_DEFAULT *core_api.PrefetchResp

func (p *PrefetchResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.PrefetchResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PrefetchResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PrefetchResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PrefetchResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PrefetchResult) Unmarshal(in []byte) error {
	msg := new(core_api.PrefetchResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PrefetchResult) GetSuccess() *core_api.PrefetchResp {
	if !p.IsSetSuccess() {
		return PrefetchResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PrefetchResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.PrefetchResp)
}

func (p *PrefetchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PrefetchResult) GetResult() interface{} {
	return p.Success
}

func getMinVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetMinVersionReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).GetMinVersion(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMinVersionArgs:
		success, err := handler.(core_api.System).GetMinVersion(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMinVersionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMinVersionArgs() interface{} {
	return &GetMinVersionArgs{}
}

func newGetMinVersionResult() interface{} {
	return &GetMinVersionResult{}
}

type GetMinVersionArgs struct {
	Req *core_api.GetMinVersionReq
}

func (p *GetMinVersionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetMinVersionReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMinVersionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMinVersionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMinVersionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMinVersionArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetMinVersionReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMinVersionArgs_Req_DEFAULT *core_api.GetMinVersionReq

func (p *GetMinVersionArgs) GetReq() *core_api.GetMinVersionReq {
	if !p.IsSetReq() {
		return GetMinVersionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMinVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMinVersionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMinVersionResult struct {
	Success *core_api.GetMinVersionResp
}

var GetMinVersionResult_Success_DEFAULT *core_api.GetMinVersionResp

func (p *GetMinVersionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetMinVersionResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMinVersionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMinVersionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMinVersionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMinVersionResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetMinVersionResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMinVersionResult) GetSuccess() *core_api.GetMinVersionResp {
	if !p.IsSetSuccess() {
		return GetMinVersionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMinVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetMinVersionResp)
}

func (p *GetMinVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMinVersionResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetAdmins(ctx context.Context, Req *core_api.GetAdminsReq) (r *core_api.GetAdminsResp, err error) {
	var _args GetAdminsArgs
	_args.Req = Req
	var _result GetAdminsResult
	if err = p.c.Call(ctx, "GetAdmins", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NewAdmin(ctx context.Context, Req *core_api.NewAdminReq) (r *core_api.NewAdminResp, err error) {
	var _args NewAdminArgs
	_args.Req = Req
	var _result NewAdminResult
	if err = p.c.Call(ctx, "NewAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAdmin(ctx context.Context, Req *core_api.DeleteAdminReq) (r *core_api.DeleteAdminResp, err error) {
	var _args DeleteAdminArgs
	_args.Req = Req
	var _result DeleteAdminResult
	if err = p.c.Call(ctx, "DeleteAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNews(ctx context.Context, Req *core_api.GetNewsReq) (r *core_api.GetNewsResp, err error) {
	var _args GetNewsArgs
	_args.Req = Req
	var _result GetNewsResult
	if err = p.c.Call(ctx, "GetNews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NewNews(ctx context.Context, Req *core_api.NewNewsReq) (r *core_api.NewNewsResp, err error) {
	var _args NewNewsArgs
	_args.Req = Req
	var _result NewNewsResult
	if err = p.c.Call(ctx, "NewNews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNews(ctx context.Context, Req *core_api.DeleteNewsReq) (r *core_api.DeleteNewsResp, err error) {
	var _args DeleteNewsArgs
	_args.Req = Req
	var _result DeleteNewsResult
	if err = p.c.Call(ctx, "DeleteNews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNotices(ctx context.Context, Req *core_api.GetNoticesReq) (r *core_api.GetNoticesResp, err error) {
	var _args GetNoticesArgs
	_args.Req = Req
	var _result GetNoticesResult
	if err = p.c.Call(ctx, "GetNotices", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NewNotice(ctx context.Context, Req *core_api.NewNoticeReq) (r *core_api.NewNoticeResp, err error) {
	var _args NewNoticeArgs
	_args.Req = Req
	var _result NewNoticeResult
	if err = p.c.Call(ctx, "NewNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNotice(ctx context.Context, Req *core_api.DeleteNoticeReq) (r *core_api.DeleteNoticeResp, err error) {
	var _args DeleteNoticeArgs
	_args.Req = Req
	var _result DeleteNoticeResult
	if err = p.c.Call(ctx, "DeleteNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCommunity(ctx context.Context, Req *core_api.ListCommunityReq) (r *core_api.ListCommunityResp, err error) {
	var _args ListCommunityArgs
	_args.Req = Req
	var _result ListCommunityResult
	if err = p.c.Call(ctx, "ListCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NewCommunity(ctx context.Context, Req *core_api.NewCommunityReq) (r *core_api.NewCommunityResp, err error) {
	var _args NewCommunityArgs
	_args.Req = Req
	var _result NewCommunityResult
	if err = p.c.Call(ctx, "NewCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCommunity(ctx context.Context, Req *core_api.DeleteCommunityReq) (r *core_api.DeleteCommunityResp, err error) {
	var _args DeleteCommunityArgs
	_args.Req = Req
	var _result DeleteCommunityResult
	if err = p.c.Call(ctx, "DeleteCommunity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserRoles(ctx context.Context, Req *core_api.GetUserRolesReq) (r *core_api.GetUserRolesResp, err error) {
	var _args GetUserRolesArgs
	_args.Req = Req
	var _result GetUserRolesResult
	if err = p.c.Call(ctx, "GetUserRoles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCommunityAdmin(ctx context.Context, Req *core_api.UpdateCommunityAdminReq) (r *core_api.UpdateCommunityAdminResp, err error) {
	var _args UpdateCommunityAdminArgs
	_args.Req = Req
	var _result UpdateCommunityAdminResult
	if err = p.c.Call(ctx, "UpdateCommunityAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSuperAdmin(ctx context.Context, Req *core_api.UpdateSuperAdminReq) (r *core_api.UpdateSuperAdminResp, err error) {
	var _args UpdateSuperAdminArgs
	_args.Req = Req
	var _result UpdateSuperAdminResult
	if err = p.c.Call(ctx, "UpdateSuperAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserByRole(ctx context.Context, Req *core_api.GetUserByRoleReq) (r *core_api.GetUserByRoleResp, err error) {
	var _args GetUserByRoleArgs
	_args.Req = Req
	var _result GetUserByRoleResult
	if err = p.c.Call(ctx, "GetUserByRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRole(ctx context.Context, Req *core_api.UpdateRoleReq) (r *core_api.UpdateRoleResp, err error) {
	var _args UpdateRoleArgs
	_args.Req = Req
	var _result UpdateRoleResult
	if err = p.c.Call(ctx, "UpdateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListApply(ctx context.Context, Req *core_api.ListApplyReq) (r *core_api.ListApplyResp, err error) {
	var _args ListApplyArgs
	_args.Req = Req
	var _result ListApplyResult
	if err = p.c.Call(ctx, "ListApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HandleApply(ctx context.Context, Req *core_api.HandleApplyReq) (r *core_api.HandleApplyResp, err error) {
	var _args HandleApplyArgs
	_args.Req = Req
	var _result HandleApplyResult
	if err = p.c.Call(ctx, "HandleApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateApply(ctx context.Context, Req *core_api.CreateApplyReq) (r *core_api.CreateApplyResp, err error) {
	var _args CreateApplyArgs
	_args.Req = Req
	var _result CreateApplyResult
	if err = p.c.Call(ctx, "CreateApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNotification(ctx context.Context, Req *core_api.ListNotificationReq) (r *core_api.ListNotificationResp, err error) {
	var _args ListNotificationArgs
	_args.Req = Req
	var _result ListNotificationResult
	if err = p.c.Call(ctx, "ListNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CleanNotification(ctx context.Context, Req *core_api.CleanNotificationReq) (r *core_api.CleanNotificationResp, err error) {
	var _args CleanNotificationArgs
	_args.Req = Req
	var _result CleanNotificationResult
	if err = p.c.Call(ctx, "CleanNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountNotification(ctx context.Context, Req *core_api.CountNotificationReq) (r *core_api.CountNotificationResp, err error) {
	var _args CountNotificationArgs
	_args.Req = Req
	var _result CountNotificationResult
	if err = p.c.Call(ctx, "CountNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReadNotification(ctx context.Context, Req *core_api.ReadNotificationReq) (r *core_api.ReadNotificationResp, err error) {
	var _args ReadNotificationArgs
	_args.Req = Req
	var _result ReadNotificationResult
	if err = p.c.Call(ctx, "ReadNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReadRangeNotification(ctx context.Context, Req *core_api.ReadRangeNotificationReq) (r *core_api.ReadRangeNotificationResp, err error) {
	var _args ReadRangeNotificationArgs
	_args.Req = Req
	var _result ReadRangeNotificationResult
	if err = p.c.Call(ctx, "ReadRangeNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Prefetch(ctx context.Context, Req *core_api.PrefetchReq) (r *core_api.PrefetchResp, err error) {
	var _args PrefetchArgs
	_args.Req = Req
	var _result PrefetchResult
	if err = p.c.Call(ctx, "Prefetch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMinVersion(ctx context.Context, Req *core_api.GetMinVersionReq) (r *core_api.GetMinVersionResp, err error) {
	var _args GetMinVersionArgs
	_args.Req = Req
	var _result GetMinVersionResult
	if err = p.c.Call(ctx, "GetMinVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
