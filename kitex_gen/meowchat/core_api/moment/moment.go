// Code generated by Kitex v0.11.3. DO NOT EDIT.

package moment

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/core_api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetMomentPreviews": kitex.NewMethodInfo(
		getMomentPreviewsHandler,
		newGetMomentPreviewsArgs,
		newGetMomentPreviewsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMomentDetail": kitex.NewMethodInfo(
		getMomentDetailHandler,
		newGetMomentDetailArgs,
		newGetMomentDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"NewMoment": kitex.NewMethodInfo(
		newMomentHandler,
		newNewMomentArgs,
		newNewMomentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteMoment": kitex.NewMethodInfo(
		deleteMomentHandler,
		newDeleteMomentArgs,
		newDeleteMomentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SearchMoment": kitex.NewMethodInfo(
		searchMomentHandler,
		newSearchMomentArgs,
		newSearchMomentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	momentServiceInfo                = NewServiceInfo()
	momentServiceInfoForClient       = NewServiceInfoForClient()
	momentServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return momentServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return momentServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return momentServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "moment"
	handlerType := (*core_api.Moment)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "meowchat.core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func getMomentPreviewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetMomentPreviewsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Moment).GetMomentPreviews(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMomentPreviewsArgs:
		success, err := handler.(core_api.Moment).GetMomentPreviews(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMomentPreviewsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMomentPreviewsArgs() interface{} {
	return &GetMomentPreviewsArgs{}
}

func newGetMomentPreviewsResult() interface{} {
	return &GetMomentPreviewsResult{}
}

type GetMomentPreviewsArgs struct {
	Req *core_api.GetMomentPreviewsReq
}

func (p *GetMomentPreviewsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetMomentPreviewsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMomentPreviewsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMomentPreviewsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMomentPreviewsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMomentPreviewsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetMomentPreviewsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMomentPreviewsArgs_Req_DEFAULT *core_api.GetMomentPreviewsReq

func (p *GetMomentPreviewsArgs) GetReq() *core_api.GetMomentPreviewsReq {
	if !p.IsSetReq() {
		return GetMomentPreviewsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMomentPreviewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMomentPreviewsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMomentPreviewsResult struct {
	Success *core_api.GetMomentPreviewsResp
}

var GetMomentPreviewsResult_Success_DEFAULT *core_api.GetMomentPreviewsResp

func (p *GetMomentPreviewsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetMomentPreviewsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMomentPreviewsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMomentPreviewsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMomentPreviewsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMomentPreviewsResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetMomentPreviewsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMomentPreviewsResult) GetSuccess() *core_api.GetMomentPreviewsResp {
	if !p.IsSetSuccess() {
		return GetMomentPreviewsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMomentPreviewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetMomentPreviewsResp)
}

func (p *GetMomentPreviewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMomentPreviewsResult) GetResult() interface{} {
	return p.Success
}

func getMomentDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetMomentDetailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Moment).GetMomentDetail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMomentDetailArgs:
		success, err := handler.(core_api.Moment).GetMomentDetail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMomentDetailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMomentDetailArgs() interface{} {
	return &GetMomentDetailArgs{}
}

func newGetMomentDetailResult() interface{} {
	return &GetMomentDetailResult{}
}

type GetMomentDetailArgs struct {
	Req *core_api.GetMomentDetailReq
}

func (p *GetMomentDetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetMomentDetailReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMomentDetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMomentDetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMomentDetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMomentDetailArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetMomentDetailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMomentDetailArgs_Req_DEFAULT *core_api.GetMomentDetailReq

func (p *GetMomentDetailArgs) GetReq() *core_api.GetMomentDetailReq {
	if !p.IsSetReq() {
		return GetMomentDetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMomentDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMomentDetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMomentDetailResult struct {
	Success *core_api.GetMomentDetailResp
}

var GetMomentDetailResult_Success_DEFAULT *core_api.GetMomentDetailResp

func (p *GetMomentDetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetMomentDetailResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMomentDetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMomentDetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMomentDetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMomentDetailResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetMomentDetailResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMomentDetailResult) GetSuccess() *core_api.GetMomentDetailResp {
	if !p.IsSetSuccess() {
		return GetMomentDetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMomentDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetMomentDetailResp)
}

func (p *GetMomentDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMomentDetailResult) GetResult() interface{} {
	return p.Success
}

func newMomentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.NewMomentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Moment).NewMoment(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *NewMomentArgs:
		success, err := handler.(core_api.Moment).NewMoment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*NewMomentResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newNewMomentArgs() interface{} {
	return &NewMomentArgs{}
}

func newNewMomentResult() interface{} {
	return &NewMomentResult{}
}

type NewMomentArgs struct {
	Req *core_api.NewMomentReq
}

func (p *NewMomentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.NewMomentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *NewMomentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *NewMomentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *NewMomentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *NewMomentArgs) Unmarshal(in []byte) error {
	msg := new(core_api.NewMomentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var NewMomentArgs_Req_DEFAULT *core_api.NewMomentReq

func (p *NewMomentArgs) GetReq() *core_api.NewMomentReq {
	if !p.IsSetReq() {
		return NewMomentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *NewMomentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NewMomentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type NewMomentResult struct {
	Success *core_api.NewMomentResp
}

var NewMomentResult_Success_DEFAULT *core_api.NewMomentResp

func (p *NewMomentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.NewMomentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *NewMomentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *NewMomentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *NewMomentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *NewMomentResult) Unmarshal(in []byte) error {
	msg := new(core_api.NewMomentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *NewMomentResult) GetSuccess() *core_api.NewMomentResp {
	if !p.IsSetSuccess() {
		return NewMomentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *NewMomentResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.NewMomentResp)
}

func (p *NewMomentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NewMomentResult) GetResult() interface{} {
	return p.Success
}

func deleteMomentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteMomentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Moment).DeleteMoment(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteMomentArgs:
		success, err := handler.(core_api.Moment).DeleteMoment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteMomentResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteMomentArgs() interface{} {
	return &DeleteMomentArgs{}
}

func newDeleteMomentResult() interface{} {
	return &DeleteMomentResult{}
}

type DeleteMomentArgs struct {
	Req *core_api.DeleteMomentReq
}

func (p *DeleteMomentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteMomentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteMomentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteMomentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteMomentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteMomentArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteMomentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteMomentArgs_Req_DEFAULT *core_api.DeleteMomentReq

func (p *DeleteMomentArgs) GetReq() *core_api.DeleteMomentReq {
	if !p.IsSetReq() {
		return DeleteMomentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteMomentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteMomentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteMomentResult struct {
	Success *core_api.DeleteMomentResp
}

var DeleteMomentResult_Success_DEFAULT *core_api.DeleteMomentResp

func (p *DeleteMomentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.DeleteMomentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteMomentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteMomentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteMomentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteMomentResult) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteMomentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteMomentResult) GetSuccess() *core_api.DeleteMomentResp {
	if !p.IsSetSuccess() {
		return DeleteMomentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteMomentResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.DeleteMomentResp)
}

func (p *DeleteMomentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteMomentResult) GetResult() interface{} {
	return p.Success
}

func searchMomentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SearchMomentReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Moment).SearchMoment(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SearchMomentArgs:
		success, err := handler.(core_api.Moment).SearchMoment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchMomentResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSearchMomentArgs() interface{} {
	return &SearchMomentArgs{}
}

func newSearchMomentResult() interface{} {
	return &SearchMomentResult{}
}

type SearchMomentArgs struct {
	Req *core_api.SearchMomentReq
}

func (p *SearchMomentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SearchMomentReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchMomentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchMomentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchMomentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchMomentArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SearchMomentReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchMomentArgs_Req_DEFAULT *core_api.SearchMomentReq

func (p *SearchMomentArgs) GetReq() *core_api.SearchMomentReq {
	if !p.IsSetReq() {
		return SearchMomentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchMomentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchMomentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchMomentResult struct {
	Success *core_api.SearchMomentResp
}

var SearchMomentResult_Success_DEFAULT *core_api.SearchMomentResp

func (p *SearchMomentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SearchMomentResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchMomentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchMomentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchMomentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchMomentResult) Unmarshal(in []byte) error {
	msg := new(core_api.SearchMomentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchMomentResult) GetSuccess() *core_api.SearchMomentResp {
	if !p.IsSetSuccess() {
		return SearchMomentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchMomentResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SearchMomentResp)
}

func (p *SearchMomentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchMomentResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetMomentPreviews(ctx context.Context, Req *core_api.GetMomentPreviewsReq) (r *core_api.GetMomentPreviewsResp, err error) {
	var _args GetMomentPreviewsArgs
	_args.Req = Req
	var _result GetMomentPreviewsResult
	if err = p.c.Call(ctx, "GetMomentPreviews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMomentDetail(ctx context.Context, Req *core_api.GetMomentDetailReq) (r *core_api.GetMomentDetailResp, err error) {
	var _args GetMomentDetailArgs
	_args.Req = Req
	var _result GetMomentDetailResult
	if err = p.c.Call(ctx, "GetMomentDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NewMoment(ctx context.Context, Req *core_api.NewMomentReq) (r *core_api.NewMomentResp, err error) {
	var _args NewMomentArgs
	_args.Req = Req
	var _result NewMomentResult
	if err = p.c.Call(ctx, "NewMoment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMoment(ctx context.Context, Req *core_api.DeleteMomentReq) (r *core_api.DeleteMomentResp, err error) {
	var _args DeleteMomentArgs
	_args.Req = Req
	var _result DeleteMomentResult
	if err = p.c.Call(ctx, "DeleteMoment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchMoment(ctx context.Context, Req *core_api.SearchMomentReq) (r *core_api.SearchMomentResp, err error) {
	var _args SearchMomentArgs
	_args.Req = Req
	var _result SearchMomentResult
	if err = p.c.Call(ctx, "SearchMoment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
