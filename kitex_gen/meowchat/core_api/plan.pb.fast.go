// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/basic"
	content "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/content"
	user "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/user"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Plan) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Plan[number], err)
}

func (x *Plan) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PlanType = content.PlanType(v)
	return offset, nil
}

func (x *Plan) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Instruction, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	var v user.UserPreview
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *Plan) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ImageUrls = append(x.ImageUrls, v)
	return offset, err
}

func (x *Plan) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.MaxFish, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.NowFish, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Plan) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.Summary, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPlanPreviewsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPlanPreviewsReq[number], err)
}

func (x *GetPlanPreviewsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.CatId = &tmp
	return offset, err
}

func (x *GetPlanPreviewsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyUserId = &tmp
	return offset, err
}

func (x *GetPlanPreviewsReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.OnlyCommunityId = &tmp
	return offset, err
}

func (x *GetPlanPreviewsReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.IncludeGlobal = &tmp
	return offset, err
}

func (x *GetPlanPreviewsReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Keyword = &tmp
	return offset, err
}

func (x *GetPlanPreviewsReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOption = &v
	return offset, nil
}

func (x *GetPlanPreviewsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPlanPreviewsResp[number], err)
}

func (x *GetPlanPreviewsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Plan
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Plans = append(x.Plans, &v)
	return offset, nil
}

func (x *GetPlanPreviewsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetPlanPreviewsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPlanDetailReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPlanDetailReq[number], err)
}

func (x *GetPlanDetailReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PlanId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetPlanDetailResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetPlanDetailResp[number], err)
}

func (x *GetPlanDetailResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Plan
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Plan = &v
	return offset, nil
}

func (x *DeletePlanReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeletePlanReq[number], err)
}

func (x *DeletePlanReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PlanId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeletePlanResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *NewPlanReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NewPlanReq[number], err)
}

func (x *NewPlanReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Id = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Name = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Description = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.CoverUrl = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PlanType = content.PlanType(v).Enum()
	return offset, nil
}

func (x *NewPlanReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Instruction = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.StartTime = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.EndTime = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.CatId = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.CommunityId = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.MaxFish = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ImageUrls = append(x.ImageUrls, v)
	return offset, err
}

func (x *NewPlanReq) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Summary = &tmp
	return offset, err
}

func (x *NewPlanReq) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PlanState = content.PlanState(v).Enum()
	return offset, nil
}

func (x *NewPlanResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NewPlanResp[number], err)
}

func (x *NewPlanResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PlanId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DonateFishReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DonateFishReq[number], err)
}

func (x *DonateFishReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PlanId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DonateFishReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Fish, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DonateFishResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetUserFishReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserFishReq[number], err)
}

func (x *GetUserFishReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.UserId = &tmp
	return offset, err
}

func (x *GetUserFishResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserFishResp[number], err)
}

func (x *GetUserFishResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Fish, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListFishByPlanReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListFishByPlanReq[number], err)
}

func (x *ListFishByPlanReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PlanId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListFishByPlanResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListFishByPlanResp[number], err)
}

func (x *ListFishByPlanResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v user.UserPreview
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Users = append(x.Users, &v)
	return offset, nil
}

func (x *ListFishByPlanResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.FishMap == nil {
		x.FishMap = make(map[string]int64)
	}
	var key string
	var value int64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.FishMap[key] = value
	return offset, nil
}

func (x *Plan) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	return offset
}

func (x *Plan) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Plan) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Plan) fastWriteField3(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCoverUrl())
	return offset
}

func (x *Plan) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *Plan) fastWriteField5(buf []byte) (offset int) {
	if x.PlanType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetPlanType()))
	return offset
}

func (x *Plan) fastWriteField6(buf []byte) (offset int) {
	if x.Instruction == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetInstruction())
	return offset
}

func (x *Plan) fastWriteField7(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetStartTime())
	return offset
}

func (x *Plan) fastWriteField8(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetEndTime())
	return offset
}

func (x *Plan) fastWriteField9(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetCatId())
	return offset
}

func (x *Plan) fastWriteField10(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetCommunityId())
	return offset
}

func (x *Plan) fastWriteField11(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 11, x.GetUser())
	return offset
}

func (x *Plan) fastWriteField12(buf []byte) (offset int) {
	if len(x.ImageUrls) == 0 {
		return offset
	}
	for i := range x.GetImageUrls() {
		offset += fastpb.WriteString(buf[offset:], 12, x.GetImageUrls()[i])
	}
	return offset
}

func (x *Plan) fastWriteField13(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetCreateAt())
	return offset
}

func (x *Plan) fastWriteField14(buf []byte) (offset int) {
	if x.MaxFish == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 14, x.GetMaxFish())
	return offset
}

func (x *Plan) fastWriteField15(buf []byte) (offset int) {
	if x.NowFish == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 15, x.GetNowFish())
	return offset
}

func (x *Plan) fastWriteField16(buf []byte) (offset int) {
	if x.Summary == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 16, x.GetSummary())
	return offset
}

func (x *GetPlanPreviewsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *GetPlanPreviewsReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *GetPlanPreviewsReq) fastWriteField2(buf []byte) (offset int) {
	if x.OnlyUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOnlyUserId())
	return offset
}

func (x *GetPlanPreviewsReq) fastWriteField3(buf []byte) (offset int) {
	if x.OnlyCommunityId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOnlyCommunityId())
	return offset
}

func (x *GetPlanPreviewsReq) fastWriteField4(buf []byte) (offset int) {
	if x.IncludeGlobal == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.GetIncludeGlobal())
	return offset
}

func (x *GetPlanPreviewsReq) fastWriteField5(buf []byte) (offset int) {
	if x.Keyword == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetKeyword())
	return offset
}

func (x *GetPlanPreviewsReq) fastWriteField6(buf []byte) (offset int) {
	if x.PaginationOption == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 6, x.GetPaginationOption())
	return offset
}

func (x *GetPlanPreviewsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetPlanPreviewsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Plans == nil {
		return offset
	}
	for i := range x.GetPlans() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPlans()[i])
	}
	return offset
}

func (x *GetPlanPreviewsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetPlanPreviewsResp) fastWriteField3(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetToken())
	return offset
}

func (x *GetPlanDetailReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPlanDetailReq) fastWriteField1(buf []byte) (offset int) {
	if x.PlanId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPlanId())
	return offset
}

func (x *GetPlanDetailResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetPlanDetailResp) fastWriteField1(buf []byte) (offset int) {
	if x.Plan == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPlan())
	return offset
}

func (x *DeletePlanReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeletePlanReq) fastWriteField1(buf []byte) (offset int) {
	if x.PlanId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPlanId())
	return offset
}

func (x *DeletePlanResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *NewPlanReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *NewPlanReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *NewPlanReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *NewPlanReq) fastWriteField3(buf []byte) (offset int) {
	if x.Description == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *NewPlanReq) fastWriteField4(buf []byte) (offset int) {
	if x.CoverUrl == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCoverUrl())
	return offset
}

func (x *NewPlanReq) fastWriteField5(buf []byte) (offset int) {
	if x.PlanType == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetPlanType()))
	return offset
}

func (x *NewPlanReq) fastWriteField6(buf []byte) (offset int) {
	if x.Instruction == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetInstruction())
	return offset
}

func (x *NewPlanReq) fastWriteField7(buf []byte) (offset int) {
	if x.StartTime == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetStartTime())
	return offset
}

func (x *NewPlanReq) fastWriteField8(buf []byte) (offset int) {
	if x.EndTime == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetEndTime())
	return offset
}

func (x *NewPlanReq) fastWriteField9(buf []byte) (offset int) {
	if x.CatId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetCatId())
	return offset
}

func (x *NewPlanReq) fastWriteField10(buf []byte) (offset int) {
	if x.CommunityId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetCommunityId())
	return offset
}

func (x *NewPlanReq) fastWriteField11(buf []byte) (offset int) {
	if x.MaxFish == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetMaxFish())
	return offset
}

func (x *NewPlanReq) fastWriteField12(buf []byte) (offset int) {
	if len(x.ImageUrls) == 0 {
		return offset
	}
	for i := range x.GetImageUrls() {
		offset += fastpb.WriteString(buf[offset:], 12, x.GetImageUrls()[i])
	}
	return offset
}

func (x *NewPlanReq) fastWriteField13(buf []byte) (offset int) {
	if x.Summary == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 13, x.GetSummary())
	return offset
}

func (x *NewPlanReq) fastWriteField14(buf []byte) (offset int) {
	if x.PlanState == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 14, int32(x.GetPlanState()))
	return offset
}

func (x *NewPlanResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *NewPlanResp) fastWriteField1(buf []byte) (offset int) {
	if x.PlanId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPlanId())
	return offset
}

func (x *DonateFishReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DonateFishReq) fastWriteField1(buf []byte) (offset int) {
	if x.PlanId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPlanId())
	return offset
}

func (x *DonateFishReq) fastWriteField2(buf []byte) (offset int) {
	if x.Fish == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetFish())
	return offset
}

func (x *DonateFishResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetUserFishReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserFishReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetUserFishResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserFishResp) fastWriteField1(buf []byte) (offset int) {
	if x.Fish == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetFish())
	return offset
}

func (x *ListFishByPlanReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListFishByPlanReq) fastWriteField1(buf []byte) (offset int) {
	if x.PlanId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPlanId())
	return offset
}

func (x *ListFishByPlanResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListFishByPlanResp) fastWriteField1(buf []byte) (offset int) {
	if x.Users == nil {
		return offset
	}
	for i := range x.GetUsers() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUsers()[i])
	}
	return offset
}

func (x *ListFishByPlanResp) fastWriteField2(buf []byte) (offset int) {
	if x.FishMap == nil {
		return offset
	}
	for k, v := range x.GetFishMap() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt64(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Plan) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	return n
}

func (x *Plan) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Plan) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Plan) sizeField3() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCoverUrl())
	return n
}

func (x *Plan) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *Plan) sizeField5() (n int) {
	if x.PlanType == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetPlanType()))
	return n
}

func (x *Plan) sizeField6() (n int) {
	if x.Instruction == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetInstruction())
	return n
}

func (x *Plan) sizeField7() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetStartTime())
	return n
}

func (x *Plan) sizeField8() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetEndTime())
	return n
}

func (x *Plan) sizeField9() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetCatId())
	return n
}

func (x *Plan) sizeField10() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetCommunityId())
	return n
}

func (x *Plan) sizeField11() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(11, x.GetUser())
	return n
}

func (x *Plan) sizeField12() (n int) {
	if len(x.ImageUrls) == 0 {
		return n
	}
	for i := range x.GetImageUrls() {
		n += fastpb.SizeString(12, x.GetImageUrls()[i])
	}
	return n
}

func (x *Plan) sizeField13() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetCreateAt())
	return n
}

func (x *Plan) sizeField14() (n int) {
	if x.MaxFish == 0 {
		return n
	}
	n += fastpb.SizeInt64(14, x.GetMaxFish())
	return n
}

func (x *Plan) sizeField15() (n int) {
	if x.NowFish == 0 {
		return n
	}
	n += fastpb.SizeInt64(15, x.GetNowFish())
	return n
}

func (x *Plan) sizeField16() (n int) {
	if x.Summary == "" {
		return n
	}
	n += fastpb.SizeString(16, x.GetSummary())
	return n
}

func (x *GetPlanPreviewsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *GetPlanPreviewsReq) sizeField1() (n int) {
	if x.CatId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *GetPlanPreviewsReq) sizeField2() (n int) {
	if x.OnlyUserId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetOnlyUserId())
	return n
}

func (x *GetPlanPreviewsReq) sizeField3() (n int) {
	if x.OnlyCommunityId == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetOnlyCommunityId())
	return n
}

func (x *GetPlanPreviewsReq) sizeField4() (n int) {
	if x.IncludeGlobal == nil {
		return n
	}
	n += fastpb.SizeBool(4, x.GetIncludeGlobal())
	return n
}

func (x *GetPlanPreviewsReq) sizeField5() (n int) {
	if x.Keyword == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetKeyword())
	return n
}

func (x *GetPlanPreviewsReq) sizeField6() (n int) {
	if x.PaginationOption == nil {
		return n
	}
	n += fastpb.SizeMessage(6, x.GetPaginationOption())
	return n
}

func (x *GetPlanPreviewsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetPlanPreviewsResp) sizeField1() (n int) {
	if x.Plans == nil {
		return n
	}
	for i := range x.GetPlans() {
		n += fastpb.SizeMessage(1, x.GetPlans()[i])
	}
	return n
}

func (x *GetPlanPreviewsResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetPlanPreviewsResp) sizeField3() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetToken())
	return n
}

func (x *GetPlanDetailReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPlanDetailReq) sizeField1() (n int) {
	if x.PlanId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPlanId())
	return n
}

func (x *GetPlanDetailResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetPlanDetailResp) sizeField1() (n int) {
	if x.Plan == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPlan())
	return n
}

func (x *DeletePlanReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeletePlanReq) sizeField1() (n int) {
	if x.PlanId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPlanId())
	return n
}

func (x *DeletePlanResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *NewPlanReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *NewPlanReq) sizeField1() (n int) {
	if x.Id == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *NewPlanReq) sizeField2() (n int) {
	if x.Name == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *NewPlanReq) sizeField3() (n int) {
	if x.Description == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *NewPlanReq) sizeField4() (n int) {
	if x.CoverUrl == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetCoverUrl())
	return n
}

func (x *NewPlanReq) sizeField5() (n int) {
	if x.PlanType == nil {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetPlanType()))
	return n
}

func (x *NewPlanReq) sizeField6() (n int) {
	if x.Instruction == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetInstruction())
	return n
}

func (x *NewPlanReq) sizeField7() (n int) {
	if x.StartTime == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetStartTime())
	return n
}

func (x *NewPlanReq) sizeField8() (n int) {
	if x.EndTime == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetEndTime())
	return n
}

func (x *NewPlanReq) sizeField9() (n int) {
	if x.CatId == nil {
		return n
	}
	n += fastpb.SizeString(9, x.GetCatId())
	return n
}

func (x *NewPlanReq) sizeField10() (n int) {
	if x.CommunityId == nil {
		return n
	}
	n += fastpb.SizeString(10, x.GetCommunityId())
	return n
}

func (x *NewPlanReq) sizeField11() (n int) {
	if x.MaxFish == nil {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetMaxFish())
	return n
}

func (x *NewPlanReq) sizeField12() (n int) {
	if len(x.ImageUrls) == 0 {
		return n
	}
	for i := range x.GetImageUrls() {
		n += fastpb.SizeString(12, x.GetImageUrls()[i])
	}
	return n
}

func (x *NewPlanReq) sizeField13() (n int) {
	if x.Summary == nil {
		return n
	}
	n += fastpb.SizeString(13, x.GetSummary())
	return n
}

func (x *NewPlanReq) sizeField14() (n int) {
	if x.PlanState == nil {
		return n
	}
	n += fastpb.SizeInt32(14, int32(x.GetPlanState()))
	return n
}

func (x *NewPlanResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *NewPlanResp) sizeField1() (n int) {
	if x.PlanId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPlanId())
	return n
}

func (x *DonateFishReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DonateFishReq) sizeField1() (n int) {
	if x.PlanId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPlanId())
	return n
}

func (x *DonateFishReq) sizeField2() (n int) {
	if x.Fish == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetFish())
	return n
}

func (x *DonateFishResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetUserFishReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserFishReq) sizeField1() (n int) {
	if x.UserId == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetUserFishResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserFishResp) sizeField1() (n int) {
	if x.Fish == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetFish())
	return n
}

func (x *ListFishByPlanReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListFishByPlanReq) sizeField1() (n int) {
	if x.PlanId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPlanId())
	return n
}

func (x *ListFishByPlanResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListFishByPlanResp) sizeField1() (n int) {
	if x.Users == nil {
		return n
	}
	for i := range x.GetUsers() {
		n += fastpb.SizeMessage(1, x.GetUsers()[i])
	}
	return n
}

func (x *ListFishByPlanResp) sizeField2() (n int) {
	if x.FishMap == nil {
		return n
	}
	for k, v := range x.GetFishMap() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeInt64(numIdxOrVal, v)
				return n
			})
	}
	return n
}

var fieldIDToName_Plan = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "CoverUrl",
	4:  "Description",
	5:  "PlanType",
	6:  "Instruction",
	7:  "StartTime",
	8:  "EndTime",
	9:  "CatId",
	10: "CommunityId",
	11: "User",
	12: "ImageUrls",
	13: "CreateAt",
	14: "MaxFish",
	15: "NowFish",
	16: "Summary",
}

var fieldIDToName_GetPlanPreviewsReq = map[int32]string{
	1: "CatId",
	2: "OnlyUserId",
	3: "OnlyCommunityId",
	4: "IncludeGlobal",
	5: "Keyword",
	6: "PaginationOption",
}

var fieldIDToName_GetPlanPreviewsResp = map[int32]string{
	1: "Plans",
	2: "Total",
	3: "Token",
}

var fieldIDToName_GetPlanDetailReq = map[int32]string{
	1: "PlanId",
}

var fieldIDToName_GetPlanDetailResp = map[int32]string{
	1: "Plan",
}

var fieldIDToName_DeletePlanReq = map[int32]string{
	1: "PlanId",
}

var fieldIDToName_DeletePlanResp = map[int32]string{}

var fieldIDToName_NewPlanReq = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "Description",
	4:  "CoverUrl",
	5:  "PlanType",
	6:  "Instruction",
	7:  "StartTime",
	8:  "EndTime",
	9:  "CatId",
	10: "CommunityId",
	11: "MaxFish",
	12: "ImageUrls",
	13: "Summary",
	14: "PlanState",
}

var fieldIDToName_NewPlanResp = map[int32]string{
	1: "PlanId",
}

var fieldIDToName_DonateFishReq = map[int32]string{
	1: "PlanId",
	2: "Fish",
}

var fieldIDToName_DonateFishResp = map[int32]string{}

var fieldIDToName_GetUserFishReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_GetUserFishResp = map[int32]string{
	1: "Fish",
}

var fieldIDToName_ListFishByPlanReq = map[int32]string{
	1: "PlanId",
}

var fieldIDToName_ListFishByPlanResp = map[int32]string{
	1: "Users",
	2: "FishMap",
}

var _ = basic.File_basic_pagination_proto
var _ = user.File_meowchat_user_common_proto
var _ = content.File_meowchat_content_common_proto
