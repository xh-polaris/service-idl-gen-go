// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	comment "github.com/xh-polaris/service-idl-gen-go/kitex_gen/platform/comment"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Comment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Comment[number], err)
}

func (x *Comment) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.FirstLevelId = &tmp
	return offset, err
}

func (x *Comment) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *Comment) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ReplyUser = &v
	return offset, nil
}

func (x *Comment) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Comments = &tmp
	return offset, err
}

func (x *Comment) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CreateAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.LikeCount = &tmp
	return offset, err
}

func (x *Comment) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.IsLiked = &tmp
	return offset, err
}

func (x *NewCommentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NewCommentReq[number], err)
}

func (x *NewCommentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Id = &tmp
	return offset, err
}

func (x *NewCommentReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.FirstLevelId = &tmp
	return offset, err
}

func (x *NewCommentReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewCommentReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = comment.CommentType(v)
	return offset, nil
}

func (x *NewCommentReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.ReplyToUserId = &tmp
	return offset, err
}

func (x *NewCommentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NewCommentResp[number], err)
}

func (x *NewCommentResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.GetFish, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *NewCommentResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.GetFishTimes, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *NewCommentResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.GetFishNum, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetCommentsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCommentsReq[number], err)
}

func (x *GetCommentsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCommentsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = comment.CommentType(v)
	return offset, nil
}

func (x *GetCommentsReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetCommentsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCommentsResp[number], err)
}

func (x *GetCommentsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comments = append(x.Comments, &v)
	return offset, nil
}

func (x *GetCommentsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteCommentReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCommentReq[number], err)
}

func (x *DeleteCommentReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CommentId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteCommentResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *Comment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *Comment) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Comment) fastWriteField2(buf []byte) (offset int) {
	if x.FirstLevelId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFirstLevelId())
	return offset
}

func (x *Comment) fastWriteField3(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetText())
	return offset
}

func (x *Comment) fastWriteField4(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetUser())
	return offset
}

func (x *Comment) fastWriteField5(buf []byte) (offset int) {
	if x.ReplyUser == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetReplyUser())
	return offset
}

func (x *Comment) fastWriteField6(buf []byte) (offset int) {
	if x.Comments == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetComments())
	return offset
}

func (x *Comment) fastWriteField7(buf []byte) (offset int) {
	if x.CreateAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCreateAt())
	return offset
}

func (x *Comment) fastWriteField8(buf []byte) (offset int) {
	if x.LikeCount == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetLikeCount())
	return offset
}

func (x *Comment) fastWriteField9(buf []byte) (offset int) {
	if x.IsLiked == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetIsLiked())
	return offset
}

func (x *NewCommentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *NewCommentReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *NewCommentReq) fastWriteField2(buf []byte) (offset int) {
	if x.FirstLevelId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFirstLevelId())
	return offset
}

func (x *NewCommentReq) fastWriteField3(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetText())
	return offset
}

func (x *NewCommentReq) fastWriteField4(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetType()))
	return offset
}

func (x *NewCommentReq) fastWriteField5(buf []byte) (offset int) {
	if x.ReplyToUserId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetReplyToUserId())
	return offset
}

func (x *NewCommentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *NewCommentResp) fastWriteField1(buf []byte) (offset int) {
	if !x.GetFish {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetGetFish())
	return offset
}

func (x *NewCommentResp) fastWriteField2(buf []byte) (offset int) {
	if x.GetFishTimes == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetGetFishTimes())
	return offset
}

func (x *NewCommentResp) fastWriteField3(buf []byte) (offset int) {
	if x.GetFishNum == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetGetFishNum())
	return offset
}

func (x *GetCommentsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetCommentsReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetCommentsReq) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetType()))
	return offset
}

func (x *GetCommentsReq) fastWriteField3(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetPage())
	return offset
}

func (x *GetCommentsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetCommentsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Comments == nil {
		return offset
	}
	for i := range x.GetComments() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetComments()[i])
	}
	return offset
}

func (x *GetCommentsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *DeleteCommentReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCommentReq) fastWriteField1(buf []byte) (offset int) {
	if x.CommentId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCommentId())
	return offset
}

func (x *DeleteCommentResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *Comment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *Comment) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Comment) sizeField2() (n int) {
	if x.FirstLevelId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetFirstLevelId())
	return n
}

func (x *Comment) sizeField3() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetText())
	return n
}

func (x *Comment) sizeField4() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetUser())
	return n
}

func (x *Comment) sizeField5() (n int) {
	if x.ReplyUser == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetReplyUser())
	return n
}

func (x *Comment) sizeField6() (n int) {
	if x.Comments == nil {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetComments())
	return n
}

func (x *Comment) sizeField7() (n int) {
	if x.CreateAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCreateAt())
	return n
}

func (x *Comment) sizeField8() (n int) {
	if x.LikeCount == nil {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetLikeCount())
	return n
}

func (x *Comment) sizeField9() (n int) {
	if x.IsLiked == nil {
		return n
	}
	n += fastpb.SizeBool(9, x.GetIsLiked())
	return n
}

func (x *NewCommentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *NewCommentReq) sizeField1() (n int) {
	if x.Id == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *NewCommentReq) sizeField2() (n int) {
	if x.FirstLevelId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetFirstLevelId())
	return n
}

func (x *NewCommentReq) sizeField3() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetText())
	return n
}

func (x *NewCommentReq) sizeField4() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetType()))
	return n
}

func (x *NewCommentReq) sizeField5() (n int) {
	if x.ReplyToUserId == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetReplyToUserId())
	return n
}

func (x *NewCommentResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *NewCommentResp) sizeField1() (n int) {
	if !x.GetFish {
		return n
	}
	n += fastpb.SizeBool(1, x.GetGetFish())
	return n
}

func (x *NewCommentResp) sizeField2() (n int) {
	if x.GetFishTimes == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetGetFishTimes())
	return n
}

func (x *NewCommentResp) sizeField3() (n int) {
	if x.GetFishNum == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetGetFishNum())
	return n
}

func (x *GetCommentsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetCommentsReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetCommentsReq) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetType()))
	return n
}

func (x *GetCommentsReq) sizeField3() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetPage())
	return n
}

func (x *GetCommentsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetCommentsResp) sizeField1() (n int) {
	if x.Comments == nil {
		return n
	}
	for i := range x.GetComments() {
		n += fastpb.SizeMessage(1, x.GetComments()[i])
	}
	return n
}

func (x *GetCommentsResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *DeleteCommentReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCommentReq) sizeField1() (n int) {
	if x.CommentId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCommentId())
	return n
}

func (x *DeleteCommentResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

var fieldIDToName_Comment = map[int32]string{
	1: "Id",
	2: "FirstLevelId",
	3: "Text",
	4: "User",
	5: "ReplyUser",
	6: "Comments",
	7: "CreateAt",
	8: "LikeCount",
	9: "IsLiked",
}

var fieldIDToName_NewCommentReq = map[int32]string{
	1: "Id",
	2: "FirstLevelId",
	3: "Text",
	4: "Type",
	5: "ReplyToUserId",
}

var fieldIDToName_NewCommentResp = map[int32]string{
	1: "GetFish",
	2: "GetFishTimes",
	3: "GetFishNum",
}

var fieldIDToName_GetCommentsReq = map[int32]string{
	1: "Id",
	2: "Type",
	3: "Page",
}

var fieldIDToName_GetCommentsResp = map[int32]string{
	1: "Comments",
	2: "Total",
}

var fieldIDToName_DeleteCommentReq = map[int32]string{
	1: "CommentId",
}

var fieldIDToName_DeleteCommentResp = map[int32]string{}

var _ = comment.File_platform_comment_common_proto
