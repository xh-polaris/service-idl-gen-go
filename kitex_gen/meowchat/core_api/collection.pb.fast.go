// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package core_api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "github.com/xh-polaris/service-idl-gen-go/kitex_gen/base"
	http "github.com/xh-polaris/service-idl-gen-go/kitex_gen/http"
	basic "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/basic"
	collection "github.com/xh-polaris/service-idl-gen-go/kitex_gen/meowchat/collection"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CatPreview) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CatPreview[number], err)
}

func (x *CatPreview) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatPreview) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatPreview) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Area, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatPreview) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Color, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatPreview) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.AvatarUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CatPreview) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.IsCollected, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetCatPreviewsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCatPreviewsReq[number], err)
}

func (x *GetCatPreviewsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCatPreviewsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetCatPreviewsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCatPreviewsResp[number], err)
}

func (x *GetCatPreviewsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatPreview
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cats = append(x.Cats, &v)
	return offset, nil
}

func (x *GetCatPreviewsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetCatPreviewsResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *GetCatDetailReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCatDetailReq[number], err)
}

func (x *GetCatDetailReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCatDetailResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCatDetailResp[number], err)
}

func (x *GetCatDetailResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v collection.Cat
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cat = &v
	return offset, nil
}

func (x *GetCatDetailResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *DeleteCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCatReq[number], err)
}

func (x *DeleteCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteCatResp[number], err)
}

func (x *DeleteCatResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *NewCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NewCatReq[number], err)
}

func (x *NewCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Id = &tmp
	return offset, err
}

func (x *NewCatReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Age, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewCatReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewCatReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Color, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewCatReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Details, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewCatReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewCatReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Sex, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewCatReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Area, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewCatReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.IsSnipped, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *NewCatReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.IsSterilized, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *NewCatReq) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Avatars = append(x.Avatars, v)
	return offset, err
}

func (x *NewCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_NewCatResp[number], err)
}

func (x *NewCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NewCatResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *SearchCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchCatReq[number], err)
}

func (x *SearchCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchCatReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.PaginationOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PaginationOption = &v
	return offset, nil
}

func (x *SearchCatReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CommunityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SearchCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SearchCatResp[number], err)
}

func (x *SearchCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CatPreview
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cats = append(x.Cats, &v)
	return offset, nil
}

func (x *SearchCatResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SearchCatResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *CreateImageReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateImageReq[number], err)
}

func (x *CreateImageReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v collection.CreateImageElement
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Images = append(x.Images, &v)
	return offset, nil
}

func (x *CreateImageResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateImageResp[number], err)
}

func (x *CreateImageResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ImageIds = append(x.ImageIds, v)
	return offset, err
}

func (x *CreateImageResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *DeleteImageReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteImageReq[number], err)
}

func (x *DeleteImageReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ImageId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteImageResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteImageResp[number], err)
}

func (x *DeleteImageResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *GetImageByCatReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetImageByCatReq[number], err)
}

func (x *GetImageByCatReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CatId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetImageByCatReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.PrevId = &tmp
	return offset, err
}

func (x *GetImageByCatReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetImageByCatReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Offset, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetImageByCatReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Backward, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetImageByCatResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetImageByCatResp[number], err)
}

func (x *GetImageByCatResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v collection.Image
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Images = append(x.Images, &v)
	return offset, nil
}

func (x *GetImageByCatResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetImageByCatResp) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v base.Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = &v
	return offset, nil
}

func (x *CatPreview) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *CatPreview) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *CatPreview) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *CatPreview) fastWriteField3(buf []byte) (offset int) {
	if x.Area == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetArea())
	return offset
}

func (x *CatPreview) fastWriteField4(buf []byte) (offset int) {
	if x.Color == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetColor())
	return offset
}

func (x *CatPreview) fastWriteField5(buf []byte) (offset int) {
	if x.AvatarUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetAvatarUrl())
	return offset
}

func (x *CatPreview) fastWriteField6(buf []byte) (offset int) {
	if !x.IsCollected {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 6, x.GetIsCollected())
	return offset
}

func (x *GetCatPreviewsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetCatPreviewsReq) fastWriteField1(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCommunityId())
	return offset
}

func (x *GetCatPreviewsReq) fastWriteField2(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPage())
	return offset
}

func (x *GetCatPreviewsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *GetCatPreviewsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cats == nil {
		return offset
	}
	for i := range x.GetCats() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCats()[i])
	}
	return offset
}

func (x *GetCatPreviewsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetCatPreviewsResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *GetCatDetailReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCatDetailReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *GetCatDetailResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *GetCatDetailResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cat == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCat())
	return offset
}

func (x *GetCatDetailResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *DeleteCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *DeleteCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *DeleteCatResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *NewCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *NewCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *NewCatReq) fastWriteField2(buf []byte) (offset int) {
	if x.Age == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAge())
	return offset
}

func (x *NewCatReq) fastWriteField3(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCommunityId())
	return offset
}

func (x *NewCatReq) fastWriteField4(buf []byte) (offset int) {
	if x.Color == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetColor())
	return offset
}

func (x *NewCatReq) fastWriteField5(buf []byte) (offset int) {
	if x.Details == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDetails())
	return offset
}

func (x *NewCatReq) fastWriteField6(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetName())
	return offset
}

func (x *NewCatReq) fastWriteField7(buf []byte) (offset int) {
	if x.Sex == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetSex())
	return offset
}

func (x *NewCatReq) fastWriteField8(buf []byte) (offset int) {
	if x.Area == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetArea())
	return offset
}

func (x *NewCatReq) fastWriteField9(buf []byte) (offset int) {
	if !x.IsSnipped {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetIsSnipped())
	return offset
}

func (x *NewCatReq) fastWriteField10(buf []byte) (offset int) {
	if !x.IsSterilized {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 10, x.GetIsSterilized())
	return offset
}

func (x *NewCatReq) fastWriteField11(buf []byte) (offset int) {
	if len(x.Avatars) == 0 {
		return offset
	}
	for i := range x.GetAvatars() {
		offset += fastpb.WriteString(buf[offset:], 11, x.GetAvatars()[i])
	}
	return offset
}

func (x *NewCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *NewCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *NewCatResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *SearchCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SearchCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKeyword())
	return offset
}

func (x *SearchCatReq) fastWriteField2(buf []byte) (offset int) {
	if x.PaginationOption == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaginationOption())
	return offset
}

func (x *SearchCatReq) fastWriteField3(buf []byte) (offset int) {
	if x.CommunityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCommunityId())
	return offset
}

func (x *SearchCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *SearchCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.Cats == nil {
		return offset
	}
	for i := range x.GetCats() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetCats()[i])
	}
	return offset
}

func (x *SearchCatResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *SearchCatResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *CreateImageReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateImageReq) fastWriteField1(buf []byte) (offset int) {
	if x.Images == nil {
		return offset
	}
	for i := range x.GetImages() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetImages()[i])
	}
	return offset
}

func (x *CreateImageResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *CreateImageResp) fastWriteField1(buf []byte) (offset int) {
	if len(x.ImageIds) == 0 {
		return offset
	}
	for i := range x.GetImageIds() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetImageIds()[i])
	}
	return offset
}

func (x *CreateImageResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *DeleteImageReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteImageReq) fastWriteField1(buf []byte) (offset int) {
	if x.ImageId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetImageId())
	return offset
}

func (x *DeleteImageResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *DeleteImageResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *GetImageByCatReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GetImageByCatReq) fastWriteField1(buf []byte) (offset int) {
	if x.CatId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCatId())
	return offset
}

func (x *GetImageByCatReq) fastWriteField2(buf []byte) (offset int) {
	if x.PrevId == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPrevId())
	return offset
}

func (x *GetImageByCatReq) fastWriteField3(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetLimit())
	return offset
}

func (x *GetImageByCatReq) fastWriteField4(buf []byte) (offset int) {
	if x.Offset == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetOffset())
	return offset
}

func (x *GetImageByCatReq) fastWriteField5(buf []byte) (offset int) {
	if !x.Backward {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.GetBackward())
	return offset
}

func (x *GetImageByCatResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *GetImageByCatResp) fastWriteField1(buf []byte) (offset int) {
	if x.Images == nil {
		return offset
	}
	for i := range x.GetImages() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetImages()[i])
	}
	return offset
}

func (x *GetImageByCatResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *GetImageByCatResp) fastWriteField255(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.GetStatus())
	return offset
}

func (x *CatPreview) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *CatPreview) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *CatPreview) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *CatPreview) sizeField3() (n int) {
	if x.Area == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetArea())
	return n
}

func (x *CatPreview) sizeField4() (n int) {
	if x.Color == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetColor())
	return n
}

func (x *CatPreview) sizeField5() (n int) {
	if x.AvatarUrl == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetAvatarUrl())
	return n
}

func (x *CatPreview) sizeField6() (n int) {
	if !x.IsCollected {
		return n
	}
	n += fastpb.SizeBool(6, x.GetIsCollected())
	return n
}

func (x *GetCatPreviewsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetCatPreviewsReq) sizeField1() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCommunityId())
	return n
}

func (x *GetCatPreviewsReq) sizeField2() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPage())
	return n
}

func (x *GetCatPreviewsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField255()
	return n
}

func (x *GetCatPreviewsResp) sizeField1() (n int) {
	if x.Cats == nil {
		return n
	}
	for i := range x.GetCats() {
		n += fastpb.SizeMessage(1, x.GetCats()[i])
	}
	return n
}

func (x *GetCatPreviewsResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetCatPreviewsResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *GetCatDetailReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCatDetailReq) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *GetCatDetailResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *GetCatDetailResp) sizeField1() (n int) {
	if x.Cat == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetCat())
	return n
}

func (x *GetCatDetailResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *DeleteCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteCatReq) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *DeleteCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField255()
	return n
}

func (x *DeleteCatResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *NewCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *NewCatReq) sizeField1() (n int) {
	if x.Id == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *NewCatReq) sizeField2() (n int) {
	if x.Age == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAge())
	return n
}

func (x *NewCatReq) sizeField3() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCommunityId())
	return n
}

func (x *NewCatReq) sizeField4() (n int) {
	if x.Color == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetColor())
	return n
}

func (x *NewCatReq) sizeField5() (n int) {
	if x.Details == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDetails())
	return n
}

func (x *NewCatReq) sizeField6() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetName())
	return n
}

func (x *NewCatReq) sizeField7() (n int) {
	if x.Sex == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetSex())
	return n
}

func (x *NewCatReq) sizeField8() (n int) {
	if x.Area == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetArea())
	return n
}

func (x *NewCatReq) sizeField9() (n int) {
	if !x.IsSnipped {
		return n
	}
	n += fastpb.SizeBool(9, x.GetIsSnipped())
	return n
}

func (x *NewCatReq) sizeField10() (n int) {
	if !x.IsSterilized {
		return n
	}
	n += fastpb.SizeBool(10, x.GetIsSterilized())
	return n
}

func (x *NewCatReq) sizeField11() (n int) {
	if len(x.Avatars) == 0 {
		return n
	}
	for i := range x.GetAvatars() {
		n += fastpb.SizeString(11, x.GetAvatars()[i])
	}
	return n
}

func (x *NewCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *NewCatResp) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *NewCatResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *SearchCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SearchCatReq) sizeField1() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKeyword())
	return n
}

func (x *SearchCatReq) sizeField2() (n int) {
	if x.PaginationOption == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaginationOption())
	return n
}

func (x *SearchCatReq) sizeField3() (n int) {
	if x.CommunityId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCommunityId())
	return n
}

func (x *SearchCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField255()
	return n
}

func (x *SearchCatResp) sizeField1() (n int) {
	if x.Cats == nil {
		return n
	}
	for i := range x.GetCats() {
		n += fastpb.SizeMessage(1, x.GetCats()[i])
	}
	return n
}

func (x *SearchCatResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *SearchCatResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *CreateImageReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateImageReq) sizeField1() (n int) {
	if x.Images == nil {
		return n
	}
	for i := range x.GetImages() {
		n += fastpb.SizeMessage(1, x.GetImages()[i])
	}
	return n
}

func (x *CreateImageResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField255()
	return n
}

func (x *CreateImageResp) sizeField1() (n int) {
	if len(x.ImageIds) == 0 {
		return n
	}
	for i := range x.GetImageIds() {
		n += fastpb.SizeString(1, x.GetImageIds()[i])
	}
	return n
}

func (x *CreateImageResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *DeleteImageReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteImageReq) sizeField1() (n int) {
	if x.ImageId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetImageId())
	return n
}

func (x *DeleteImageResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField255()
	return n
}

func (x *DeleteImageResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

func (x *GetImageByCatReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GetImageByCatReq) sizeField1() (n int) {
	if x.CatId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCatId())
	return n
}

func (x *GetImageByCatReq) sizeField2() (n int) {
	if x.PrevId == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetPrevId())
	return n
}

func (x *GetImageByCatReq) sizeField3() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetLimit())
	return n
}

func (x *GetImageByCatReq) sizeField4() (n int) {
	if x.Offset == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetOffset())
	return n
}

func (x *GetImageByCatReq) sizeField5() (n int) {
	if !x.Backward {
		return n
	}
	n += fastpb.SizeBool(5, x.GetBackward())
	return n
}

func (x *GetImageByCatResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField255()
	return n
}

func (x *GetImageByCatResp) sizeField1() (n int) {
	if x.Images == nil {
		return n
	}
	for i := range x.GetImages() {
		n += fastpb.SizeMessage(1, x.GetImages()[i])
	}
	return n
}

func (x *GetImageByCatResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *GetImageByCatResp) sizeField255() (n int) {
	if x.Status == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.GetStatus())
	return n
}

var fieldIDToName_CatPreview = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Area",
	4: "Color",
	5: "AvatarUrl",
	6: "IsCollected",
}

var fieldIDToName_GetCatPreviewsReq = map[int32]string{
	1: "CommunityId",
	2: "Page",
}

var fieldIDToName_GetCatPreviewsResp = map[int32]string{
	1:   "Cats",
	2:   "Total",
	255: "Status",
}

var fieldIDToName_GetCatDetailReq = map[int32]string{
	1: "CatId",
}

var fieldIDToName_GetCatDetailResp = map[int32]string{
	1:   "Cat",
	255: "Status",
}

var fieldIDToName_DeleteCatReq = map[int32]string{
	1: "CatId",
}

var fieldIDToName_DeleteCatResp = map[int32]string{
	255: "Status",
}

var fieldIDToName_NewCatReq = map[int32]string{
	1:  "Id",
	2:  "Age",
	3:  "CommunityId",
	4:  "Color",
	5:  "Details",
	6:  "Name",
	7:  "Sex",
	8:  "Area",
	9:  "IsSnipped",
	10: "IsSterilized",
	11: "Avatars",
}

var fieldIDToName_NewCatResp = map[int32]string{
	1:   "CatId",
	255: "Status",
}

var fieldIDToName_SearchCatReq = map[int32]string{
	1: "Keyword",
	2: "PaginationOption",
	3: "CommunityId",
}

var fieldIDToName_SearchCatResp = map[int32]string{
	1:   "Cats",
	2:   "Total",
	255: "Status",
}

var fieldIDToName_CreateImageReq = map[int32]string{
	1: "Images",
}

var fieldIDToName_CreateImageResp = map[int32]string{
	1:   "ImageIds",
	255: "Status",
}

var fieldIDToName_DeleteImageReq = map[int32]string{
	1: "ImageId",
}

var fieldIDToName_DeleteImageResp = map[int32]string{
	255: "Status",
}

var fieldIDToName_GetImageByCatReq = map[int32]string{
	1: "CatId",
	2: "PrevId",
	3: "Limit",
	4: "Offset",
	5: "Backward",
}

var fieldIDToName_GetImageByCatResp = map[int32]string{
	1:   "Images",
	2:   "Total",
	255: "Status",
}

var _ = base.File_base_status_proto
var _ = http.File_http_http_proto
var _ = collection.File_meowchat_collection_common_proto
var _ = basic.File_meowchat_basic_basic_proto
